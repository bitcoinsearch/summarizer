{
    "id": "bitcointranscripts+misc+2020-07-10-what-am-i-working-on",
    "title": "What am I working on?",
    "body_formatted": "{\"type\":\"paragraph\",\"text\":\"I've been working on essentially rewriting the Bitcoin Core wallet, one piece at a time. Now when I say \\\"the wallet\\\", a lot of people think of the GUI. That's not what I've been working on. Rather I've been changing the internals; how keys are managed, how transactions are tracked, how inputs are selected for spending. All of those under the hood things. At some point, I will get around to changing the GUI. And in general, my focus has been on improving the user experience. Cross wallet compatibility is also something I've been working on.\"}, {\"type\":\"paragraph\",\"text\":\"One of the big things I've been working on recently is descriptor wallets. What Core does right now is treat the wallet as a bag of keys. It turns these keys into scripts and addresses. But fundamentally, everything is centered around \\\"do we have the keys to spend this script\\\". Descriptor wallets change this. Instead, everything is centered around the script, which a descriptor describes. This makes more sense than keys as Bitcoin transactions are really script based, not key based. The keys are still there, they are just attached to a specific script as auxiliary data. By using descriptors (which map one-to-one to a script), we have an engineer readable way to write a script so they will be easier to import to other wallets. And descriptors leads us into Miniscript which will give us the ability to have and reason about complex contracts.\"}, {\"type\":\"paragraph\",\"text\":\"Descriptor wallets also greatly simplifies a lot of internal logic, so there will be far fewer corner cases and bugs. Notably, because they are script based, we no longer determine whether a transaction belongs to a wallet by checking whether we have any key that can spend the output. Instead we just check whether the scriptPubKey matches any of the scriptPubKeys we are watching for. This also makes watchonly behavior much simpler and actually sane.\"}, {\"type\":\"paragraph\",\"text\":\"Descriptor wallets have since been merged into Bitcoin Core as an experimental feature for 0.21. Hopefully it will become the default wallet type soon and we'll have a way to migrate legacy wallets to descriptor wallets. I'm actually going to be streaming the entire process of writing the migration code on my [twitch channel](https://www.twitch.tv/achow101/).\"}, {\"type\":\"paragraph\",\"text\":\"My current big project is changing how the wallet is stored. Namely, instead of using a super old version of Berkeley DB, I'm migrating us to using SQLite. We consistently, though not frequently nor regularly, get reports of wallet corruption. This usually means data loss and the loss of private keys. And that is not good. I attribute a lot of the issues we have with our unusual use of BDB; we're essentially using the database in a way that it really wasn't designed for. The gist of it is that we want all the wallet data to end up in the wallet.dat file, and consistently. But BDB wasn't designed to always have everything in a single file, and for everything to end up in that file when it considers the data to be written to disk. So we have a bunch of hacks to force it to do that.\"}, {\"type\":\"paragraph\",\"text\":\"So BDB isn't really good for our use case. It just so happens that SQLite is. It actually is designed for use as an application file format and can be configured to ensure that the data is written to the database file. So I've been refactoring the database handling code to let us integrate SQLite and use that for wallet storage. There are several PRs still open and in review to do all of this. The goal is to have this for 0.21 as the default type for descriptor wallets. Then I'll see about adding the migration of legacy wallets to use SQLite as well.\"}",
    "body": "I've been working on essentially rewriting the Bitcoin Core wallet, one piece at a time. Now when I say \"the wallet\", a lot of people think of the GUI. That's not what I've been working on. Rather I've been changing the internals; how keys are managed, how transactions are tracked, how inputs are selected for spending. All of those under the hood things. At some point, I will get around to changing the GUI. And in general, my focus has been on improving the user experience. Cross wallet compatibility is also something I've been working on.\n\nOne of the big things I've been working on recently is descriptor wallets. What Core does right now is treat the wallet as a bag of keys. It turns these keys into scripts and addresses. But fundamentally, everything is centered around \"do we have the keys to spend this script\". Descriptor wallets change this. Instead, everything is centered around the script, which a descriptor describes. This makes more sense than keys as Bitcoin transactions are really script based, not key based. The keys are still there, they are just attached to a specific script as auxiliary data. By using descriptors (which map one-to-one to a script), we have an engineer readable way to write a script so they will be easier to import to other wallets. And descriptors leads us into Miniscript which will give us the ability to have and reason about complex contracts.\n\nDescriptor wallets also greatly simplifies a lot of internal logic, so there will be far fewer corner cases and bugs. Notably, because they are script based, we no longer determine whether a transaction belongs to a wallet by checking whether we have any key that can spend the output. Instead we just check whether the scriptPubKey matches any of the scriptPubKeys we are watching for. This also makes watchonly behavior much simpler and actually sane.\n\nDescriptor wallets have since been merged into Bitcoin Core as an experimental feature for 0.21. Hopefully it will become the default wallet type soon and we'll have a way to migrate legacy wallets to descriptor wallets. I'm actually going to be streaming the entire process of writing the migration code on my [twitch channel](https://www.twitch.tv/achow101/).\n\nMy current big project is changing how the wallet is stored. Namely, instead of using a super old version of Berkeley DB, I'm migrating us to using SQLite. We consistently, though not frequently nor regularly, get reports of wallet corruption. This usually means data loss and the loss of private keys. And that is not good. I attribute a lot of the issues we have with our unusual use of BDB; we're essentially using the database in a way that it really wasn't designed for. The gist of it is that we want all the wallet data to end up in the wallet.dat file, and consistently. But BDB wasn't designed to always have everything in a single file, and for everything to end up in that file when it considers the data to be written to disk. So we have a bunch of hacks to force it to do that.\n\nSo BDB isn't really good for our use case. It just so happens that SQLite is. It actually is designed for use as an application file format and can be configured to ensure that the data is written to the database file. So I've been refactoring the database handling code to let us integrate SQLite and use that for wallet storage. There are several PRs still open and in review to do all of this. The goal is to have this for 0.21 as the default type for descriptor wallets. Then I'll see about adding the migration of legacy wallets to use SQLite as well.\n\n",
    "body_type": "markdown",
    "created_at": "2020-07-10T00:00:00.000Z",
    "domain": "https://btctranscripts.com/",
    "url": "https://btctranscripts.com/misc/2020-07-10-what-am-i-working-on",
    "tags": [
        "wallet"
    ],
    "media": "https://www.reddit.com/r/Bitcoin/comments/ho0t1a/what_are_bitcoin_developers_currently_working_on/fxhwqli/?context=3",
    "authors": [
        "Andrew Chow"
    ],
    "indexed_at": "2024-03-21T16:33:36.831Z",
    "transcript_by": "Michael Folkson",
    "summary": "In the evolving landscape of Bitcoin Core development, Andrew Chow has embarked on a significant project aimed at overhauling the internal mechanics of the Bitcoin Core wallet. Contrary to what some might assume, his focus has not been on enhancing the graphical user interface (GUI) but rather on refining the core functionalities that manage cryptographic keys, track transactions, and select inputs for spending. This meticulous work is driven by a commitment to enhance user experience and promote cross-wallet compatibility, laying the groundwork for more intuitive and efficient interactions with Bitcoin Core.\n\nA pivotal aspect of Chow's work involves the introduction and integration of descriptor wallets into Bitcoin Core. Traditional wallets in the Bitcoin ecosystem have been treated as mere collections of keys, which are then converted into scripts and addresses for transaction purposes. However, this approach has its limitations, primarily because it centers around the possession of keys to authorize transactions. Descriptor wallets represent a paradigm shift by focusing on the scripts\u2014described by descriptors\u2014that underlie Bitcoin transactions. This script-centric perspective aligns more closely with the inherent structure of Bitcoin transactions and allows for a more straightforward and engineer-friendly method of managing and importing scripts into other wallets. Additionally, the adoption of descriptors paves the way for Miniscript, enabling the creation and management of complex contracts within the Bitcoin network.\n\nThe transition to descriptor wallets simplifies much of the underlying logic within Bitcoin Core, significantly reducing the occurrence of bugs and corner cases. By basing transaction validation on scriptPubKey matches rather than key ownership, descriptor wallets facilitate a more logical and streamlined watch-only behavior. This enhancement has led to the incorporation of descriptor wallets as an experimental feature in Bitcoin Core 0.21, with aspirations for it to become the default wallet type. Chow is also spearheading the development of migration tools to transition legacy wallets to the descriptor format, a process he intends to share through live streams on his Twitch channel.\n\nAnother major initiative undertaken by Chow is the migration of wallet storage from Berkeley DB (BDB) to SQLite. The motivation behind this shift stems from persistent issues of wallet corruption and data loss associated with BDB's unconventional usage within Bitcoin Core. SQLite, designed explicitly for use as an application file format, offers a more reliable and consistent mechanism for storing wallet data, thereby addressing the vulnerabilities presented by BDB. Chow's efforts include refactoring the database handling code to integrate SQLite, aiming to standardize it as the default storage solution for descriptor wallets in the upcoming Bitcoin Core 0.21 release. This transition not only promises enhanced stability and security for users but also signifies a crucial step forward in the modernization of Bitcoin Core's infrastructure."
}
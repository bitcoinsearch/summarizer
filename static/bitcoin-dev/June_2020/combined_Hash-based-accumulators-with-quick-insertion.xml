<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Hash-based accumulators with quick insertion</title>
  <updated>2025-10-29T13:12:28.841082+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/June_2020/017943_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017941_Hash-based-accumulators-with-quick-insertion.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Hash-based accumulators with quick insertion</title>
    <updated>2025-10-29T13:12:28.841186+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017941.html" rel="alternate"/>
    <published>2020-06-08T22:01:09+00:00</published>
    <summary>A mathematician named Germán expressed interest in a piece of work and suggested a method to indirectly support addition and removal by formulating it as a difference of sets, similar to collision-resistant replicated data types (CRDTs). This suggestion involves checking for membership through CheckMembershipInAdditionSet &amp;&amp; !CheckMembershipInRemovalSet. Germán also mentioned the possibility of supporting multiple addition/removal by attaching a count of how many times an item has been added, but this may disrupt some aspects of the paper.The author has been focusing on cryptographic accumulators that optimize for quick insertion. Accumulators are data structures that maintain compact commitments to a potentially large set while keeping proofs of membership short. The author's focus is on additive accumulators that support adding new elements but not removing them. The motivation behind this is to enable Script to access an arbitrarily large portion of the blockchain history and state. The author has developed two constructions: 1. An accumulator with insertion time O(1) and proof size O(log^2 n).2. A construction with insertion time O(log log n) and proof size O(log n log log n).The draft writeup and sample python code for these constructions are available on Github. Although the ideas presented in the draft are still unfinished, they are clear and easy to understand. The author is sharing the work at this stage to receive feedback for improving the constructions, covering related work, and exploring potential applications in Bitcoin. One notable application in Bitcoin is the creation of lightweight full nodes that do not require storing the UTXO set, known as the Utreexo accumulator.Overall, the mathematician's comment sparked interest in the work, and the author has been working on cryptographic accumulators that optimize for quick insertion. The author has developed two constructions and is seeking feedback to enhance the constructions, explore related work, and uncover potential applications in Bitcoin, such as lightweight full nodes using the Utreexo accumulator. The draft writeup and sample python code are available on Github for further examination.</summary>
  </entry>
</feed>
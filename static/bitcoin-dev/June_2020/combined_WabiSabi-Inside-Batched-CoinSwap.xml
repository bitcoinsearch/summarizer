<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - WabiSabi Inside Batched CoinSwap</title>
  <updated>2025-09-25T23:14:23.321432+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/June_2020/017972_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017970_WabiSabi-Inside-Batched-CoinSwap.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017970.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - WabiSabi Inside Batched CoinSwap</title>
    <updated>2025-09-25T23:14:23.321485+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/017970.html" rel="alternate"/>
    <published>2020-06-12T14:53:59+00:00</published>
    <summary>In a cryptocurrency transaction scenario, Alice initiates the process by creating an unsigned funding transaction with MuSig(Alice, Macky). Following this, Alice and Macky collaborate to create a backout transaction with `nLockTime` set at L2. The MuSig signing ritual is completed before Alice broadcasts the original funding transaction. However, it has come to light that the taker funding transactions should have a closer locktime, referred to as L1, whereas the maker funding transactions should have a later locktime, denoted as L2. This modification requires Macky to claim the incoming funds earlier, consequently unlocking the outgoing payout transaction upon claiming.The WabiSabi protocol, although innovative, lacks proven security and privacy. While WabiSabi intends to enable CoinJoin operations, it creates a transaction where the inputs are linked to the outputs, which is not ideal. A more favorable solution would involve employing CoinSwap and the new swap scheme called Succinct Atomic Swaps, which effectively addresses this issue. By utilizing Batched CoinSwap, makers can serve as WabiSabi servers, while batched takers can act as WabiSabi clients. However, naive CoinSwap necessitates that outputs from the maker be linkable, at least by the maker, to the inputs provided, which contradicts the purpose of WabiSabi in hiding such information from the server. To overcome this, we propose using Signature Selling as the foundation for atomic CoinSwap.In the proposed system, WabiSabi replaces blind signatures with credentials. The notable advantage of credentials lies in their ability to incorporate a homomorphic value, which allows for the representation of a blinded amount. The WabiSabi process involves a single server responsible for issuing credentials and multiple clients whom the server serves. Clients can facilitate value exchange by swapping credentials, subsequently claiming the received credentials and exchanging them for fresh ones.In the context of Batched CoinSwap, Macky takes on the role of a WabiSabi server, while Alice, Bob, and Carol function as WabiSabi clients. Rather than generating a single CoinJoin transaction, they opt for a CoinSwap operation. To initiate this process, all parties agree upon future block heights L1 and L2, where L1 denotes the timelock for the maker's funds and L2 represents the timelock for the takers' funds. Subsequently, they proceed with creating the CoinSwap transaction, which involves several steps.To ensure that the CoinSwap can transpire without the maker being able to link outputs to inputs, this proposal employs the Signature Selling technique. By adopting this approach, the privacy and security objectives of WabiSabi are maintained while facilitating successful CoinSwaps.</summary>
  </entry>
</feed>
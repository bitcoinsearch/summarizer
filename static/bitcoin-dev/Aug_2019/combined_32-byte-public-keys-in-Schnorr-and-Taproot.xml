<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 32-byte public keys in Schnorr and Taproot</title>
  <updated>2025-09-26T15:55:20.442332+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="meb7f6abdb68f01a29040205668bd8226087430d5">
      <author>[bitcoin-dev] 32-byte public keys in Schnorr and Taproot Pieter Wuille</author>
      <timestamp>2019-08-09T18:16:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] 32-byte public keys in Schnorr and Taproot Pieter Wuille" parent_id="mailing-list-2019-08-meb7f6abdb68f01a29040205668bd8226087430d5" anchor="ma2dcbdf102d0c776b209f1d57bc4d21508b8a718">
      <author>Christopher Allen</author>
      <timestamp>2019-08-09T18:37:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="1" position="2" reply_to="[bitcoin-dev] 32-byte public keys in Schnorr and Taproot Pieter Wuille" parent_id="mailing-list-2019-08-meb7f6abdb68f01a29040205668bd8226087430d5" anchor="mca96c62a848940fb901c3895949c5a3accc7cbb9">
      <author>Karl-Johan Alm</author>
      <timestamp>2019-08-11T06:08:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Aug_2019/017253_32-byte-public-keys-in-Schnorr-and-Taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2019/017249_32-byte-public-keys-in-Schnorr-and-Taproot.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2019/017247_32-byte-public-keys-in-Schnorr-and-Taproot.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-August/017247.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - 32-byte public keys in Schnorr and Taproot</title>
    <updated>2025-09-26T15:55:20.442860+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-August/017247.html" rel="alternate"/>
    <published>2019-08-11T06:08:48+00:00</published>
    <summary>In a Bitcoin developer mailing list, a suggestion has been made to drop the Y oddness bit in the witness program for Taproot outputs. This change would not affect security and would prevent Taproot outputs from being more expensive than v0 P2WSH. It would also allow for future changes that may still require the additional byte. As part of exploring this option, it has been found that introducing a type of 32-byte public keys in bip-schnorr would be the cleanest approach. This raises the question of whether 33-byte public keys are necessary at all. While bip-schnorr public keys would not be exactly the same as ECDSA public keys if this change is implemented, all derivation logic would still apply. Under this modification, the Q point in bip-taproot (the one going in the scriptPubKey) would follow the 32-byte pubkey encoding instead of needing a 33rd byte. The P point in bip-taproot (the internal key revealed during the script path) would become a 32-byte public key. All public keys inside bip-tapscript would also be 32-bytes long. If desired, the &quot;upgradable public key&quot; construction in bip-tapscript can be retained by triggering based on the length of public keys. However, opinions are being sought about whether it is worth making this change to bip-schnorr at this stage, considering that it has already been in use for some time. While it is possible to keep verification compatible by hashing the implied &quot;even&quot; byte inside the scheme, which commits to the pubkey, if changes are to be made, it is best to do so as cleanly as possible and drop that byte as well. In conclusion, this is a discussion within the Bitcoin developer community about modifying bip-schnorr to only define 32-byte public keys and how it would impact Taproot outputs and bip-tapscript. Pieter Wuille suggests making the change cleanly and dropping the extra byte, while Christopher Allen proposes considering a non-binary format for sharing public keys.</summary>
  </entry>
</feed>
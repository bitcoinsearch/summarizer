<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Miniscript</title>
  <updated>2025-09-26T15:55:28.985070+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m2de5ebaedb768b92fb9f8c38391992ab605b05e5">
      <author>[bitcoin-dev] Miniscript Pieter Wuille</author>
      <timestamp>2019-08-19T23:17:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Miniscript Pieter Wuille" parent_id="mailing-list-2019-08-m2de5ebaedb768b92fb9f8c38391992ab605b05e5" anchor="md9f5a91e6e087443778232de2c3c177f69787bfe">
      <author>David Vorick</author>
      <timestamp>2019-08-20T07:15:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="David Vorick" parent_id="mailing-list-2019-08-md9f5a91e6e087443778232de2c3c177f69787bfe" anchor="m4695450ef57cccc05889ad9049110dd3e7f4ef69">
      <author>ZmnSCPxj</author>
      <timestamp>2019-08-20T08:14:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Aug_2019/017272_Miniscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2019/017271_Miniscript.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2019/017270_Miniscript.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-August/017270.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Miniscript</title>
    <updated>2025-09-26T15:55:28.985635+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-August/017270.html" rel="alternate"/>
    <published>2019-08-20T08:14:13+00:00</published>
    <summary>Miniscript is a language for writing Bitcoin Scripts in a structured way, enabling analysis, composition, generic signing and more. It is a joint project between Pieter Wuille, Andrew Poelstra, and Sanket Sanjalkar. The language allows for the creation of descriptors for addresses that implement more complex scripts than multisig. This opens up possibilities for software that can handle policy composition and compile complex spending policies into efficient scripts. Miniscript also enables users to determine the necessary and/or sufficient conditions for a script to be satisfied. With signatures for a set of keys, it can generically construct a witness for arbitrary scripts without any additional metadata. This means that generic PSBT signers are possible for this class of scripts.Furthermore, Miniscript computes the bounds on the size of a witness for arbitrary scripts and performs static analysis to identify any resource limitations that might interfere with spending ability. Currently, there are two implementations of Miniscript: a C++ version and a Rust library. While still a work in progress, the developers have conducted large-scale randomized tests to ensure compatibility with existing consensus and standardness rules. Importantly, Miniscript is designed for Bitcoin as it stands today, primarily utilizing P2WSH, and does not require any consensus changes. However, the developers plan to extend the design to support future script changes that may be included in Bitcoin.The adoption of Miniscript would have significant benefits for the Bitcoin ecosystem. It would reduce the barrier for new application writers by providing tools for analyzing code and mitigating the risk of user funds being lost. Developers could utilize Miniscript to assure themselves and others that their code maintains the desired outcome of no loss of coins, aside from transaction fees. While Miniscript may not identify specific transaction types, such as CoinJoin, it can verify that the final result is the same as the initial holdings. In essence, Miniscript would provide a valuable tool for ensuring the integrity and security of Bitcoin transactions.</summary>
  </entry>
</feed>
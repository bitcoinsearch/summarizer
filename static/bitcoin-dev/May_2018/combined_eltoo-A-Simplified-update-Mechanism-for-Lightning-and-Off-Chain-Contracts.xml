<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
  <updated>2025-09-25T23:08:58.156548+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/June_2018/016148_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015958_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015928_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015921_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015918_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015920_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015916_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015915_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015914_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015913_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015912_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2018/015911_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015910_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2018/015907_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016148.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
    <updated>2025-09-25T23:08:58.156657+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-June/016148.html" rel="alternate"/>
    <published>2018-06-22T00:32:01+00:00</published>
    <summary>The discussions surrounding the Lightning Network cover several topics. One of the concerns is the potential for attacks and the need for mitigations. Another topic is the impact of symmetric state and eltoo on HTLC (Hashed Timelock Contract) timeouts. The accumulation of timeout delays is also discussed, along with the use of a fixed offset versus an increased delta at each hop in the network. Additionally, there are concerns raised about the terminology used in a research paper, specifically regarding the terms &quot;input script&quot; and &quot;output script.&quot; These conversations contribute to the ongoing development and improvement of the Lightning Network protocol.The Lightning Network implementation teams have introduced a new update mechanism called eltoo. This mechanism addresses some of the challenges faced in specifying and implementing the Lightning Network, and it can be used as a generic update mechanism for off-chain contracts with multiple participants. However, before implementing eltoo, a minor change to Bitcoin is required: the introduction of the SIGHASH_NOINPUT flag for signatures.Currently, the penalty-based invalidation mechanism used in the Lightning specification results in lost funds when an old state is published. Eltoo, on the other hand, is not penalty-based, meaning that publishing an old state does not result in lost funds. Instead, it operates similarly to the duplex micropayment channel construction, where all participants share an identical set of transactions. Eltoo ensures that the last agreed-upon state is settled on-chain, with tradeoffs similar to the current Lightning Network.One advantage of eltoo is its ability to attach fees when settling and even bump fees using CPFP (Child-Pays-For-Parent) or RBF (Replace-By-Fee). It also simplifies outsourcing since old states becoming public no longer pose a threat. Furthermore, eltoo eliminates the need to estimate fees ahead of time and can be utilized for other protocols such as channel factories. When combined with Schnorr signatures, eltoo facilitates the creation of large off-chain contracts with minimal on-chain footprint.However, implementing eltoo would require an increase in the safe CLTV (CheckLockTimeVerify) delta requirements. Currently, HTLCs can be timed out immediately on the settlement transaction. With eltoo, when a downstream channel is closed on-chain, it must wait for the CSV (CheckSequenceVerify) timeout on the update transaction before locking in the timed-out HTLC. This means that the CLTV delta needs to be greater than the CSV timeout, plus some extra time. However, it is believed that the new eltoo Decker-Russell-Osuntokun CSV timeouts can be shorter.Overall, eltoo presents a promising update mechanism for off-chain protocols like the Lightning Network. It offers improvements in terms of simplicity, flexibility in fee management, and potential use in various applications beyond Lightning. More details about the eltoo proposal can be found in the paper linked at [2].</summary>
  </entry>
</feed>
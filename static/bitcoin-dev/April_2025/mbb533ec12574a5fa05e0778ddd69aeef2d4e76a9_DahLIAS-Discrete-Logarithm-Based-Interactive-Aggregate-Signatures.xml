<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>DahLIAS: Discrete Logarithm-Based Interactive Aggregate Signatures</title>
  <updated>2025-05-01T02:55:23.763335+00:00</updated>
  <author>
    <name>Jonas Nick 2025-04-30 07:59:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>DahLIAS: Discrete Logarithm-Based Interactive Aggregate Signatures</title>
    <updated>2025-05-01T02:55:23.763364+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/be3813bf-467d-4880-9383-2a0b0223e7e5@gmail.com/T/#mbb533ec12574a5fa05e0778ddd69aeef2d4e76a9" rel="alternate"/>
    <summary>The discussion opens with an inquiry about the appropriateness of including a proof to demonstrate the zero-knowledge property of a particular scheme, rather than solely its soundness. The query hinges on the assertion that the structure of partial signatures, exemplified by the equation \(s_k = r_{k1} + br_{k2} + c_k x_k\), mirrors the baseline Schnorr signatures closely enough to consider their zero-knowledgeness as trivial. This leads to a broader examination of the security foundations for DahLIAS, emphasizing that any potential leakage of information regarding the secret key \(x_k\) would enable adversaries to exploit the scheme's unforgeability claim. Specifically, this vulnerability would manifest if an adversary could either solve the Discrete Logarithm (DL) problem or identify a collision in the hash function \(H_{non}\), thus compromising the scheme.

Further discourse explores the possibility of delineating explicit strategies for optimizing the scheme for single-party cases, although it's acknowledged that such considerations might extend beyond the current paper's scope. A hypothetical scenario is presented where a single-party signer, possessing multiple secret keys \(xi, .., xn\) corresponding to public keys \(X1, .., Xn\), could significantly streamline the signing process. By randomly selecting \(r\), computing \(R := r*G\), and subsequently calculating \(s := r + c1*x1 + .. + cn*xn\), the need for multiple group multiplications is circumvented, thereby simplifying the operation to require just one.

Furthermore, the conversation shifts to address concerns regarding "proof of knowledge of R" as a countermeasure against key subtraction attacks, only to recognize its ineffectiveness against nonce grinding in the context of Wagner-type attacks. An elaboration on these vulnerabilities is found in Appendix B, which clarifies that schemes allowing an adversary to influence the signer into generating partial signatures with variable challenges (\(c \neq c'\)) are inherently susceptible. The theoretical model posited involves an adversary manipulating the signing process to utilize identical effective nonces across distinct challenges, thereby revealing a critical flaw in the proposed "proof of knowledge of R" defense mechanism.</summary>
    <published>2025-04-30T07:59:00+00:00</published>
  </entry>
</feed>

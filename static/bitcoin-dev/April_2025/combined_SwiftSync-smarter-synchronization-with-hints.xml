<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - SwiftSync - smarter synchronization with hints</title>
  <updated>2025-05-04T02:57:22.125702+00:00</updated>
  <author>
    <name>Ruben Somsen 2025-05-03 16:24:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-03 15:54:00+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2025-05-03 14:55:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-03 14:36:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-03 13:57:00+00:00</name>
  </author>
  <author>
    <name>Weikeng Chen 2025-05-03 13:53:00+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2025-05-03 13:42:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-03 12:02:00+00:00</name>
  </author>
  <author>
    <name>Sanket Kanjalkar 2025-05-02 20:23:00+00:00</name>
  </author>
  <author>
    <name>Saint Wenhao 2025-05-02 19:15:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-02 16:07:00+00:00</name>
  </author>
  <author>
    <name>Saint Wenhao 2025-05-02 13:38:00+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2025-05-02 10:59:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-02 06:47:00+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2025-04-09 10:10:00+00:00</name>
  </author>
  <link href="bitcoin-dev/May_2025/md8c50e756e68e0d9e6ba027c8ae24c623bf709e1_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m4726dbce3a5bda28d20996372ec94fc19d3f5e0f_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m75215d5605c0ef147418289e5b2f0d1dcfac025f_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/mc31811b9faa50946a6c8737694ef2b20abf34ac4_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m9ad6780774cf9e86a20ab8de594f9c481d137f05_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/me83a44f584b1ac0e5f7c14a5ceaf44fb1fbc4ca5_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m42c4a511e2ef912b9d19860e83cc2823b0c92e27_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m17d65a7553ac468aba5bfb8d983c7e102bab647e_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m2f8804b6f42f2bcbb9682f5da90a5ba970c1e43f_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/mc016570875cc27ca1e9818a33d21de4313795f1c_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m0f11791d994af3adb5a70c9733f06410f52bc109_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m7df2c1e5c9bf238cdecb4b17c19b2748c661c33d_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m50555ae81a28fe83bbb36885202d29da92c91fe1_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/mef1818d6816c73519a32f975acb9d09fc0d773ce_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2025/mc66763934f25b65ce5006f0a4dd19cd359a8b452_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - SwiftSync - smarter synchronization with hints</title>
    <updated>2025-05-04T02:57:22.125855+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAPv7TjaM0tfbcBTRa0_713Bk6Y9jr+ShOC1KZi2V3V2zooTXyg@mail.gmail.com/T/#u#mc66763934f25b65ce5006f0a4dd19cd359a8b452" rel="alternate"/>
    <summary>In recent discussions on the Bitcoin Development Mailing List, participants explored various aspects of blockchain efficiency and security, particularly focusing on SwiftSync and hash function optimizations. The dialogue delved into the potential for enhancing SwiftSync without compromising its benefits, despite challenges such as the necessity for ordered block processing and minimal anticipated space savings from proposed adjustments. There was a consensus on the untapped optimization potential that could be realized through efforts aimed at enabling parallel validation. The discussion also ventured into alternatives to SHA-256, considering whether shorter hashes could suffice without significantly increasing the risk of accepting an invalid chain. Speculation about the viability of even 4-byte hashes raised philosophical concerns regarding the reliance on probability for consensus, emphasizing the need for a hash function that ensures uniqueness and unpredictability to deter attackers.

Greg Maxwell's contributions highlighted the nuanced application of salt in hash functions for creating tagged hashes, suggesting a simpler alternative might be to directly manipulate SHA-256's output. He pointed out the ease of generating matching hashes due to the low computational effort required, which could lead to slowdowns but not necessarily compromise system integrity. Maxwell underscored the importance of using hash sizes resistant to both collision and preimage attacks to prevent attackers from balancing the hash sum equation falsely.

The conversation further examined the efficiencies and challenges associated with SwiftSync. Saint Wenhao and Greg Maxwell discussed the 'assumevalid' feature's efficiency in streamlining the validation process and the flexibility it offers users. They also touched upon midstate reuse in transaction outputs and the practicality issues in implementing additional optimizations without undermining SwiftSync's core advantages. The potential for further optimization through hash aggregate improvements and the exploration of alternatives to SHA-256 was also discussed.

Ruben Somsen introduced an innovative approach that maintains security properties akin to the assume valid mechanism while offering performance and optimization opportunities. This scheme allows for flexibility and updates without permanent commitments, benefiting from the handling of hashes, particularly if a Merkle-Damg√•rd style hash function like SHA-256 is used. Somsen advised minimizing compression function runs to enhance efficiency further and suggested strategies for managing false positives to optimize memory and read efficiency.

SwiftSync was presented as a novel method for near-stateless and fully parallelizable validation of the Bitcoin blockchain. This technique uses hints about unspent outputs to streamline the validation process, requiring less than 100MB for these hints. The protocol operates by assigning boolean hints to each output, indicating its status within the UTXO set post-validation. Outputs predicted to remain are written to disk in an append-only manner, while UTXO data for outputs expected to be spent are hashed and added to an aggregate. This process enables order-independent operations and significantly reduces the bandwidth requirements and processing speed, especially on devices with limited RAM or multiple CPU cores. Preliminary benchmarks have indicated a potential for significant speed-up, underscoring SwiftSync's potential to redefine blockchain validation processes. Further details on SwiftSync's mechanics and its implications for blockchain technology were made available in RubenSomsen's comprehensive analysis, inviting feedback to identify any overlooked areas or potential issues.</summary>
    <published>2025-05-03T16:24:00+00:00</published>
  </entry>
</feed>

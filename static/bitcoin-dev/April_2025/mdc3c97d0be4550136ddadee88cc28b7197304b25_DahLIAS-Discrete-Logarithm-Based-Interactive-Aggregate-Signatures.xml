<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>DahLIAS: Discrete Logarithm-Based Interactive Aggregate Signatures</title>
  <updated>2025-04-27T02:47:20.336975+00:00</updated>
  <author>
    <name>waxwing/ AdamISZ 2025-04-26 15:30:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>DahLIAS: Discrete Logarithm-Based Interactive Aggregate Signatures</title>
    <updated>2025-04-27T02:47:20.337026+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/be3813bf-467d-4880-9383-2a0b0223e7e5@gmail.com/T/#mdc3c97d0be4550136ddadee88cc28b7197304b25" rel="alternate"/>
    <summary>The discussion initiated by AdamISZ/waxwing revolves around the intricate details of a proposed cryptographic algorithm, which, although not exclusively designed for Bitcoin, is analyzed through its application within the Bitcoin framework. The focal point of this dialogue is the CISA (Compact Identities Schnorr Aggregation) algorithm, aimed at enhancing transaction efficiency without imposing linear costs on the blockchain's verification processes or significantly increasing the signature size relative to the number of signers.

One pivotal aspect of the CISA algorithm is its structure, specifically designed to aggregate signatures in a way that circumvents the linear cost dilemma associated with blockchain transactions involving multiple signers. This is achieved by publishing a combined (R, s) structure rather than individual components for each signer. The approach facilitates a more efficient verification process by aggregating the R-values and s-values, while keeping public keys separate, leveraging their implicit availability from existing blockchain records, as seen with taproot technology. This method avoids the complexities associated with key aggregation, opting instead for a sum of individual challenge hashes tied to each public key, a strategy aimed at maintaining performance without compromising security.

Concerns regarding potential performance issues due to verifier requirements to iterate through an extensive list of public keys are addressed by comparing the proposed method to batch verifying individual signatures, revealing a twofold increase in speed. Furthermore, to mitigate risks such as trivial key subtraction attacks or Wagner/ROS grinding, the nonce is divided into two components with an additional challenge hash, drawing parallels to MuSig2â€™s methodology but with explicit hashing of comprehensive context including individual public keys and messages, alongside the nonce's subcomponents.

This conversation also delves into client-side validation concepts, suggesting a shift towards complex calculations during the coordination phase before any on-chain actions, thus ensuring the use of a single, secure "R" value. Additionally, the discourse touches on the security of single-signer scenarios, questioning the inclusion of zero-knowledge proofs to affirm both the soundness and privacy of the final signature.

Further explorations include contemplating optimizations for single-party cases, acknowledging the need to consider potential party corruption, and discussing multi-component nonce techniques, specifically the feasibility of incorporating proofs of knowledge within the coordination step to simplify security proofs without imposing undue burdens on constrained devices.

Lastly, the discussion acknowledges unaddressed complexities related to ensuring keys and messages are uniquely represented in the context of multisig-to-aggregated-sig transformations, hinting at deeper challenges yet to be explored.</summary>
    <published>2025-04-26T15:30:00+00:00</published>
  </entry>
</feed>

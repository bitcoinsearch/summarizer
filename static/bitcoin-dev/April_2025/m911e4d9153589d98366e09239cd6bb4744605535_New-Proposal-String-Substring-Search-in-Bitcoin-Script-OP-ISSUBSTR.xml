<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New Proposal：String Substring Search in Bitcoin Script - OP_ISSUBSTR</title>
  <updated>2025-04-02T02:44:19.782308+00:00</updated>
  <author>
    <name>Martin Habovštiak 2025-04-01 15:35:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New Proposal：String Substring Search in Bitcoin Script - OP_ISSUBSTR</title>
    <updated>2025-04-02T02:44:19.782339+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/e1c28747-ccc9-4d14-a93f-77dbe08a0ba9n@googlegroups.com/T/#m911e4d9153589d98366e09239cd6bb4744605535" rel="alternate"/>
    <summary>In a recent discussion among programmers, an innovative approach was presented regarding the handling of substrings in programming, specifically addressing concerns related to the OP_CAT operation and its potential for misuse due to the lack of an arbitrary limit on item size. The proposed methodology involves a structural adjustment where stack elements are stored on the heap within a specific structure that includes reference count, length, and data array. This structure allows for the implementation of substring operations by merely duplicating pointers with adjusted positions and lengths, effectively preventing the stack from being overwhelmed by excessive operations.

This strategy draws inspiration from practices within the Rust programming community, notably the `bytes` crate, which employs a similar mechanism for managing data. By adopting this method, substring operations become more efficient and secure, as they no longer contribute to stack overflow risks through duplication. Moreover, this technique also offers a way to refine the OP_DUP operation, making it more memory-efficient by ensuring that duplicating large objects only adds a constant amount of memory usage.

Although the preference for avoiding arbitrary limits on item sizes is acknowledged, the existing constraints may render this concern moot. However, the conversation suggests that this approach could be beneficial, especially if future modifications to the system inadvertently allow for larger items. This dialogue underscores the importance of continuous exploration and adaptation in programming practices to enhance security and efficiency.</summary>
    <published>2025-04-01T15:35:00+00:00</published>
  </entry>
</feed>

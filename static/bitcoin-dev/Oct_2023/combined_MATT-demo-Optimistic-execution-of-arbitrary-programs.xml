<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - MATT: [demo] Optimistic execution of arbitrary programs</title>
  <updated>2025-10-12T00:56:59.256641+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m3e4d427da4bf2cb14e4cc419f9bbe6a2741d5d7e">
      <author>[bitcoin-dev] MATT: [demo] Optimistic execution of arbitrary programs Johan Torås Halseth</author>
      <timestamp>2023-09-29T13:14:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] MATT: [demo] Optimistic execution of arbitrary programs Johan Torås Halseth" parent_id="mailing-list-2023-10-m3e4d427da4bf2cb14e4cc419f9bbe6a2741d5d7e" anchor="mb2ef45260d15d0f7ec8af774792df33d5c9dd881">
      <author>Anthony Towns</author>
      <timestamp>2023-10-02T15:10:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Anthony Towns" parent_id="mailing-list-2023-10-mb2ef45260d15d0f7ec8af774792df33d5c9dd881" anchor="m4e4f929fc7d496796b8899f2bcca4a61d5e3812a">
      <author>Johan Torås Halseth</author>
      <timestamp>2023-10-03T07:53:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Oct_2023/021977_MATT-demo-Optimistic-execution-of-arbitrary-programs.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2023/021976_MATT-demo-Optimistic-execution-of-arbitrary-programs.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2023/021974_MATT-demo-Optimistic-execution-of-arbitrary-programs.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021977.html" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021977.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - MATT: [demo] Optimistic execution of arbitrary programs</title>
    <updated>2025-10-12T00:56:59.257181+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021977.html" rel="alternate"/>
    <published>2023-10-03T07:53:08+00:00</published>
    <summary>The email discusses the complexity notation of &quot;O(n log n)&quot; and suggests that it may be incorrect. The sender proposes that it should be denoted as &quot;O(P + log(N))&quot; where P represents the size of the program and N represents the number of steps (rounded up to a power of 2). However, the recipient disagrees with this suggestion and explains that it is necessary to directly know the values of h(sub_node1) and h(sub_node2) in order to compare them to the results obtained from running the computation. Without this direct knowledge, there is a 50/50 chance of choosing the incorrect subnode, making it difficult to prove a mistake with odds of only 1/2**N.The sender suggests an alternative representation of the nodes and leaves in the program, which would make it 32B longer but would eliminate the need for h() calculations. The proposed representation includes the start_pc, start_i, start_x, end_pc, end_i, end_x, h(sub_node1), and h(sub_node2) for nodes, and start_pc, start_i, start_x, end_pc, end_i, end_x, and null for leaves.The sender also raises a concern regarding the requirement for a balanced state tree. They argue that if a balanced tree is not mandatory, then there could be multiple possible trees for the same execution trace, making it easy to hide errors where the challenger cannot find them. To address this concern, the sender suggests adding a &quot;start_stepcount&quot; and &quot;end_stepcount&quot; to enforce a balanced state tree.Additionally, the recipient points out an error in a diagram illustrating the concept of state transitions. They clarify that the second node in the diagram should read &quot;0|0|2 -&gt; 0|1|4&quot; instead of &quot;0|0|2 -&gt; 1|0|2&quot;, matching its left child.Lastly, the sender mentions that it is presumed that the counterparty verifies their knowledge of the program, i.e., all the leaves in the contract taptree, before agreeing to the contract. The recipient agrees with this assumption and concludes the email with a casual farewell.This email provides an introduction to the implementation of the original MATT challenge protocol. It includes a link to a write-up that provides a detailed description of how to transform a &quot;high-level arbitrary program&quot; into something that can be verified on-chain in Bitcoin Script. The write-up also contains instructions on running the code and inspecting the transactions using a local block explorer.The implementation utilizes the proposed opcode OP_CHECKCONTRACTVERIFY and OP_CAT. These opcodes are used to trace the execution of a program called `multiply`. The goal is to challenge the computation of this program in O(n logn) on-chain transactions.Unfortunately, the email does not provide any further details about the implementation or the specific challenges faced during the process. It mainly serves as an introduction to the topic and directs readers to the write-up for more information.[0] - Link to the original MATT challenge protocol: [insert link][1] - Link to the code for the `multiply` program: [insert link]</summary>
  </entry>
</feed>
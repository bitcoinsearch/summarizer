<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Publishing text of 2017-era proposed Bitcoin opcode OP_FFS (Fold Function Stream)</title>
  <updated>2024-09-10T02:17:23.291087+00:00</updated>
  <author>
    <name>Ethan Heilman 2024-09-09 12:40:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Publishing text of 2017-era proposed Bitcoin opcode OP_FFS (Fold Function Stream)</title>
    <updated>2024-09-10T02:17:23.291126+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAEM=y+Whf31baRXNe5M+31wn98Csb17QO90zP1UP+YkuKjimqg@mail.gmail.com/T/#u#m3a9b6575676e9a6607e4606ecba697d66b52a4ea" rel="alternate"/>
    <summary>The Bitcoin Improvement Proposal (BIP) discussed introduces a new opcode, FOLDFUNCTIONSTREAM, which is a modification of the existing NOP4 opcode within the Bitcoin scripting system. This opcode aims to efficiently perform functional folds across data, addressing issues related to computational expense and safety in script execution. The proposal outlines conditions for the script interpreter to terminate with an error, mainly focusing on stack requirements and the validity of data types and fold functions specified.

This BIP was motivated by the need for more complex script operations in Bitcoin, such as concatenation followed by hashing, without risking unbounded memory growth. The implementation of FOLDFUNCTIONSTREAM, particularly with a SHA256 argument, enables hashing over arbitrary length concatenated strings efficiently, circumventing the potential for exponential memory expansion. This approach reflects a solution to long-standing challenges within Bitcoin's scripting capabilities, enhancing both its functionality and security.

Fold Functions are central to this proposal, with several defined including SHA256 for hashing, FACTORS for arithmetic calculations, MAST for computing hashes of sorted concatenations, among others. Each function is tailored to specific computational tasks, expanding the scripting language's capability to handle a variety of operations efficiently.

The reference implementation and deployment details are also provided, indicating that this BIP is to be activated via the "versionbits" BIP9 method, specifying timelines for both mainnet and testnet environments. This structured approach to deployment ensures a tested and phased introduction of the new opcode, mitigating potential risks associated with its adoption.

In addition to technical specifications, the proposal briefly discusses concerns and considerations regarding argument order and undefined behavior handling within scripts, highlighting the ongoing deliberation around optimizing the opcode's design for security and practicality. The discussion encapsulates not only the technical innovation aimed at enhancing Bitcoin's scripting language but also the careful consideration given to ensuring its safe and effective implementation.

For further information and technical details, the proposal directs readers to a [GitHub pull request](https://github.com/bitcoin/bitcoin/pull/XXX) containing the reference implementation, and references discussions from the bitcoin-dev mailing list in 2019 and recent mentions on Twitter in 2024, demonstrating the proposal's relevance and the community's interest in its development.</summary>
    <published>2024-09-09T12:40:00+00:00</published>
  </entry>
</feed>

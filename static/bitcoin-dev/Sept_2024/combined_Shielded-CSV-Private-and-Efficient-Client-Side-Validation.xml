<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Shielded CSV: Private and Efficient Client-Side Validation</title>
  <updated>2024-09-26T03:15:18.744338+00:00</updated>
  <author>
    <name>Antoine Riard 2024-09-25 12:23:00+00:00</name>
  </author>
  <author>
    <name>Jonas Nick 2024-09-24 13:24:00+00:00</name>
  </author>
  <link href="bitcoin-dev/Sept_2024/md160147d94d727e1744edebf9a3c9f22105be043_Shielded-CSV-Private-and-Efficient-Client-Side-Validation.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2024/m0b780978f60b0306ee832c797d902b3648b08d16_Shielded-CSV-Private-and-Efficient-Client-Side-Validation.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Shielded CSV: Private and Efficient Client-Side Validation</title>
    <updated>2024-09-26T03:15:18.744390+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/b0afc5f2-4dcc-469d-b952-03eeac6e7d1b@gmail.com/T/#md160147d94d727e1744edebf9a3c9f22105be043" rel="alternate"/>
    <summary>The Shielded CSV whitepaper introduces a groundbreaking approach in the realm of client-side validation (CSV) protocols for cryptocurrencies, focusing on enhancing both privacy and efficiency during transactions. This innovative method, termed "Proof-Carrying Data," allows for a significant departure from traditional transaction verification methods that require broadcasting each transaction across the network. By employing techniques such as recursive zkSNARKs or folding schemes, Shielded CSV is capable of concealing the transaction graph, ensuring that the verification time and coin proofs remain unaffected by the transaction history. A notable feature of this protocol is its efficiency in data usage, necessitating only 64 bytes of blockchain space for each transaction, which drastically reduces the on-chain cost due to the minimal data footprint and constant overhead.

The inception of Bitcoin revolutionized the way transactions are conducted over the internet, facilitating exchanges between parties without the need for a central authority but at the cost of user privacy and scalability. While cryptocurrencies like Zcash and Monero have attempted to address these privacy issues, they come with their own set of challenges, including increased demands on communication, computation, and storage resources. Client-Side Validation offers a solution by relocating the transaction validation process away from the blockchain consensus mechanism, significantly reducing the resources needed for transaction processing. Traditional CSV implementations on Bitcoin, however, have not fully leveraged this efficiency, often necessitating the publication of ordinary Bitcoin transactions and generating coin proofs that grow with the transaction history.

Shielded CSV marks a substantial advancement by ensuring private transactions while requiring only a minimal amount of data to be recorded on the blockchain, known as a "nullifier." This approach not only diminishes the amount of data written to the blockchain but also streamlines the verification process for both users and non-users. The protocol promises an impressive increase in transaction privacy and scalability, potentially accommodating up to 100 transactions per second on Bitcoin with the appropriate infrastructure in place. The paper delves into the technical underpinnings of Shielded CSV through the Proof Carrying Data abstraction and explores practical implementation avenues, including Folding Schemes and Recursive STARKs. It concludes with a discussion on future extensions, highlighting the protocol's potential for further enhancements and applications within the CSV domain. The whitepaper is available for those interested in exploring this innovative framework further and can be accessed [here](https://github.com/ShieldedCSV/ShieldedCSV/releases/latest/download/shieldedcsv.pdf).</summary>
    <published>2024-09-25T12:23:00+00:00</published>
  </entry>
</feed>

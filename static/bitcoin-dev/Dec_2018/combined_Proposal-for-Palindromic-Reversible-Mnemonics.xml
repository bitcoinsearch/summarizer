<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal for Palindromic (Reversible) Mnemonics</title>
  <updated>2025-09-26T15:59:10.883406+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m64b5c775db5d16519124209541604ab27cce6e46">
      <author>[bitcoin-dev] Proposal for Palindromic (Reversible) Mnemonics Steven Hatzakis</author>
      <timestamp>2018-12-03T18:27:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Proposal for Palindromic (Reversible) Mnemonics Steven Hatzakis" parent_id="mailing-list-2018-12-m64b5c775db5d16519124209541604ab27cce6e46" anchor="mdd28841c5ce06e8cc84f24edce54aa249fb3ac6b">
      <author>Joseph Gleason ⑈</author>
      <timestamp>2018-12-03T20:54:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Joseph Gleason ⑈" parent_id="mailing-list-2018-12-mdd28841c5ce06e8cc84f24edce54aa249fb3ac6b" anchor="mf12f8a98bd339ad61772d173813ebd49712ca5f3">
      <author>James MacWhyte</author>
      <timestamp>2018-12-04T12:16:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="3" position="3" reply_to="James MacWhyte" parent_id="mailing-list-2018-12-mf12f8a98bd339ad61772d173813ebd49712ca5f3" anchor="mec15f744a34cdef926b969574aa8b928b06c154b">
      <author>Steven Hatzakis</author>
      <timestamp>2018-12-04T12:42:00.000Z</timestamp>
    </message>
    <message id="msg_5" depth="5" position="4" anchor="m09eded902d8c66c7e716d52c9971dc9cfa391047">
      <author>Steven Hatzakis</author>
      <timestamp>2018-12-04T21:39:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Dec_2018/016533_Proposal-for-Palindromic-Reversible-Mnemonics.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016532_Proposal-for-Palindromic-Reversible-Mnemonics.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016531_Proposal-for-Palindromic-Reversible-Mnemonics.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016528_Proposal-for-Palindromic-Reversible-Mnemonics.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2018/016527_Proposal-for-Palindromic-Reversible-Mnemonics.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016527.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal for Palindromic (Reversible) Mnemonics</title>
    <updated>2025-09-26T15:59:10.884117+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016527.html" rel="alternate"/>
    <published>2018-12-04T21:39:17+00:00</published>
    <summary>Steven Hatzakis has developed a method to check if a mnemonic is also valid when the words are put into reverse order, where a given 12 or 24-word mnemonic could be valid both in little endian and big endian format. These are called &quot;Palindromic Mnemonics.&quot; A checksum-valid reversible mnemonic allows two separate vaults to be connected to the same mnemonic string of words, where all a users must do is enter the words in reverse order to access the secondary (reversed words) vault.This utility could provide multiple use-cases, including related to combinations with passphrases and plausible deniability, as well as conveniences for those wishing to use a separate vault tied to the same string of words. For any randomly generated 12-word mnemonic (128-bits of security) the chances of it also being reversible are 1/16. For a 24-word mnemonic, those values increase to 8 bits which need to match 8 bits from the reversed string, leading to about 1 in every 256 mnemonics also being reversible.While the message space of valid reversible mnemonics should be 2^124 for 12 words, that search must still be conducted over a field of 2 ^128, as the hash-derived checksum values otherwise prevent a way to deterministically find valid reversible mnemonics without first going through invalid reversible ones to check. Some users suggest that if someone is concerned about plausible deniability, then it might make sense to just have the single mnemonic seed lead to a single xprv key (as usual) and then do a private key derivation from that based on a password string. A simple reverse scheme like this would just be another thing a person would know to check if given some seed so they don't see it as providing much value.While others found it interesting, they don't believe there is any security loss, in terms of entropy bits (assuming the initial 128 bits were generated securely). Steven Hatzakis believes that having a mnemonic that is also reversible could be useful for other reasons - convenience related perhaps. He notes that plausible deniability was not the motive but just an example use-case, there are perhaps other use-cases that would be on the user to decide.Steven Hatzakis has already written the code that can be used for testing (on GitHub user @hatgit), and when run from terminal/command prompt it is pretty fast to find a valid reversible mnemonic. However, on IDLE in Python on a 32-bit and 64-bit machine, it could take a few seconds for 12 words and sometimes 10 minutes to find a valid 24-word reversible mnemonic. Steven Hatzakis has two questions: 1) How useful could this be for users/devs/service providers etc.? and 2) Is any security loss occurring and whether it is negligible or not?</summary>
  </entry>
</feed>
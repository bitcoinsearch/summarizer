<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - To prevent arbitrary data storage in txouts — The Ultimate Solution</title>
  <updated>2025-10-18T02:27:06.502810+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/April_2013/002403_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002402_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002399_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002398_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002397_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002396_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002395_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002394_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002393_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2013/002392_To-prevent-arbitrary-data-storage-in-txouts-The-Ultimate-Solution.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - To prevent arbitrary data storage in txouts — The Ultimate Solution</title>
    <updated>2025-10-18T02:27:06.502931+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-April/002392.html" rel="alternate"/>
    <published>2013-04-11T11:27:08+00:00</published>
    <summary>On April 10, 2013, Peter Todd proposed changing the transaction hash algorithm to extend the Merkle tree into the transaction outputs/inputs. This change would allow for pruning transactions bit by bit and still serving nodes requesting proof of their unspent transaction output (UTXO) without causing difficulties for spending old UTXOs. Jorge Timón expressed agreement with the proposal but questioned potential opposition. Todd himself raised concerns about the technical risks involved in implementing UTXO fraud proofs.In an email conversation between Gregory Maxwell and Peter Todd, they discussed the difficulty of paying additional funds to a random transaction output seen on the blockchain. Todd noted that this could create a strange situation, but Maxwell saw it as a positive property. Todd warned against getting too hopeful, as he expected blockchain.info to keep a publicly accessible database that could still allow payments to random transaction outputs.Another email exchange from 2013, involving Peter Todd and an unknown individual, discussed the odd side-effect of making it difficult to pay further funds to a random transaction output. Both parties agreed that while strange, it was not necessarily a bad thing. The unknown individual mentioned previously lamenting the lack of knowledge on how to achieve this property.In a discussion between Peter Todd and Gregory Maxwell, they explored the possibility of using P2SH addresses to provide the full 256 bits. They suggested keeping the address length at 160 bits and proposed a new scriptPubKey. They concluded that there was no need to change the address type if new software could be written to check for both forms of transaction output. However, this approach could make it challenging to pay further funds to a random transaction output.In an email conversation involving Robert Backhaus and others, they discussed the use of P2SH addresses in Bitcoin. Backhaus inquired about storing P2SH addresses and expressed appreciation for the ability to create date stamps without storing data in the blockchain. It was confirmed that P2SH addresses did not prevent value commitment but only prevented data storage. It was also noted that storing data in values incurred exponential computational costs.On the Bitcoin-development mailing list, Gregory Maxwell proposed a change to the Bitcoin protocol involving a new address type called P2SH^2. This new address type would be a hash of a P2SH address, and its inclusion would eliminate non-prunable locations for users to store data in the blockchain. Maxwell suggested implementing a relay rule and introducing a block discouragement rule to ensure proper usage of P2SH^2 addresses. This proposal allowed for interesting uses such as creating date stamps while preventing data storage.In an email conversation between Peter Todd and Gregory Maxwell, they discussed the topic of data stuffing in Bitcoin. Maxwell proposed using Hash160 for P2SH addresses and introducing a new address type, P2SH^2, to restrict data stuffing to brute forcing hash collisions. They also discussed changing the transaction hash algorithm to extend the Merkle tree into the transaction outputs/inputs through a hard fork. This change would enable pruning transactions bit by bit while still serving nodes requesting proof of their UTXO.Gregory Maxwell sent an email to the Bitcoin-development mailing list discussing a possible solution to data stuffing. He proposed creating a new address type, P2SH^2, which would be a hash of a P2SH address. This approach would limit data stuffing to brute forcing hash collisions. Maxwell suggested defining P2SH^2 addresses and implementing a relay rule to verify the inner P2SH address. If miners mined P2SH^2 addresses without relaying the P2SH address, a block discouragement rule could be introduced. This change would eliminate non-prunable locations for data storage in the blockchain.In summary, various email exchanges and discussions from 2013 explored proposals and solutions related to the Bitcoin protocol. These included changing the transaction hash algorithm, using P2SH addresses, introducing a new address type (P2SH^2), and addressing the issue of data stuffing. The goal was to improve transaction pruning, prevent data storage in non-prunable locations, and enable interesting use cases while ensuring proper usage of addresses.</summary>
  </entry>
</feed>
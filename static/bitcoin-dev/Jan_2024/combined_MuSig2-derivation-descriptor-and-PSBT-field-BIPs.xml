<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - MuSig2 derivation, descriptor, and PSBT field BIPs</title>
  <updated>2024-01-24T02:10:57.359215+00:00</updated>
  <author>
    <name>Michael Folkson 2024-01-23 12:12:35+00:00</name>
  </author>
  <author>
    <name>Christopher Allen 2024-01-16 08:18:26+00:00</name>
  </author>
  <author>
    <name>Ava Chow 2024-01-15 23:29:46+00:00</name>
  </author>
  <link href="bitcoin-dev/Jan_2024/022307_MuSig2-derivation-descriptor-and-PSBT-field-BIPs.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2024/022283_MuSig2-derivation-descriptor-and-PSBT-field-BIPs.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2024/022282_MuSig2-derivation-descriptor-and-PSBT-field-BIPs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - MuSig2 derivation, descriptor, and PSBT field BIPs</title>
    <updated>2024-01-24T02:10:57.359261+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2024-January/022282.html" rel="alternate"/>
    <summary>Tim Ruffing, a notable figure in the Bitcoin development community, has shed light on the complications associated with using x-only public keys in advanced cryptographic operations like MuSig2 and other multisignature schemes. During an online meetup of the London Bitcoin Devs in 2022, he addressed the engineering challenges posed by these keys. X-only pubkeys are efficient in that they save space by including only the x-coordinate of a public key, but this efficiency comes at a cost. When it comes to tweaking keys—a common practice in various cryptographic protocols including Taproot and MuSig2—the absence of the y-coordinate necessitates additional considerations during the engineering phase. These complexities can make specifications cumbersome and although not explicitly a security concern, they add a level of annoyance for developers. This leads to a retrospective debate over whether the trade-off between space savings and increased engineering complexity is justified.

Additionally, the Bitcoin Improvement Proposals (BIPs) related to MuSig2 have seen significant updates since their initial release in October. A new BIP dedicated to synthetic extended public keys was introduced due to its relevance beyond descriptors to PSBT fields. The Descriptors BIP itself has been relatively stable, with ongoing discussions about the potential removal of ranged derivation within expressions while keeping it for the overall aggregate public key. A major revision in the PSBT fields BIP is the representation of the aggregate public key as a plain public key rather than an 'xonly' key. This change facilitates the identification of derived keys in a PSBT by embedding the evenness bit into the serialized fingerprint.

The changes and their detailed explanations are available through GitHub links, inviting those with relevant expertise to review and contribute to the evolving landscape of Bitcoin's multisignature protocol specifications. Interested parties can find the Derivation BIP [here](https://github.com/achow101/bips/blob/musig2/bip-musig2-derivation.mediawiki), the Descriptors BIP [here](https://github.com/achow101/bips/blob/musig2/bip-musig2-descriptors.mediawiki), and the PSBT fields BIP [here](https://github.com/achow101/bips/blob/musig2/bip-musig2-psbt.mediawiki). These developments underscore the importance of collaborative effort and peer review in the continuous improvement of cryptographic standards within the Bitcoin ecosystem.</summary>
    <published>2024-01-23T12:12:35+00:00</published>
  </entry>
</feed>

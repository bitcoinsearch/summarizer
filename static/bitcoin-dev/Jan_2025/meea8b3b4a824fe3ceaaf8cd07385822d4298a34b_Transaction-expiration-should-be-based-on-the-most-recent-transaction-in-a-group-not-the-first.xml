<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Transaction expiration should be based on the most recent transaction in a group, not the first</title>
  <updated>2025-02-01T02:27:20.082755+00:00</updated>
  <author>
    <name>ArmchairCryptologist 2025-01-31 12:02:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Transaction expiration should be based on the most recent transaction in a group, not the first</title>
    <updated>2025-02-01T02:27:20.082815+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/rqLkuDekAhYC8mO9BMrqXGQjv-Oq1a1jA2EDLdiohq9kHIQpE-MpzqFjqY15Cc5flU_GUrE7NoSxB_4wgkQg8Mv8IQdtzlXLtuxK76n7YRQ=@protonmail.com/T/#meea8b3b4a824fe3ceaaf8cd07385822d4298a34b" rel="alternate"/>
    <summary>The discussion initiated by ArmchairCryptologist revolves around the current relevance of expiration-based mempool eviction within the Bitcoin network. The concern raised is based on observations that unconfirmed transactions, some lingering for months, are eventually being processed without any apparent attempts at exploitation. This scenario leads to questioning the necessity and desirability of continuing with a mechanism that seemingly only adds to the computational and bandwidth overhead by evicting and later re-accepting these transactions.

The writer points out that reliance on the disappearance of unconfirmed transactions has always been flawed due to the inability to prevent them from being rebroadcast unless one of the inputs is double-spent. Furthermore, the introduction of full Replace-By-Fee (RBF) policies undermines any theoretical basis for expecting unconfirmed transactions to vanish permanently. Given that the size of the mempool inherently limits its capacity, the argument suggests that the existing practice of expiration-based eviction might be redundant or even counterproductive.

One potential downside mentioned is the current limitation of the `abandontransaction` function, which cannot operate on transactions residing within the mempool. However, this issue is proposed to be addressable by enhancing the function to allow for the eviction of specific transactions from a node's local mempool as needed. This suggestion implies a preference for targeted intervention over a blanket eviction policy, hinting at a more nuanced approach to managing mempool dynamics in light of evolving network behaviors and capabilities.</summary>
    <published>2025-01-31T12:02:00+00:00</published>
  </entry>
</feed>

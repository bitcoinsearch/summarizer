<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [BIP] Normalized Transaction IDs</title>
  <updated>2025-10-16T02:37:01.293816+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/May_2015/008202_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008199_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008198_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008196_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008183_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008181_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008179_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008178_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008177_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008175_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008174_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008163_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008161_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008160_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008159_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008157_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008156_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008155_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008154_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008153_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008151_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008150_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008149_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008147_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008145_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008142_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/008141_-BIP-Normalized-Transaction-IDs.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - [BIP] Normalized Transaction IDs</title>
    <updated>2025-10-16T02:37:01.293923+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/008141.html" rel="alternate"/>
    <published>2015-05-19T12:48:20+00:00</published>
    <summary>The discussion revolves around the proposal to include the height in transactions without adding an extra field. It is suggested that for non-coinbase transactions, the height used is zero, while for coinbase transactions, the height specified in the scriptSig is copied into the locktime of the transaction before computing the normalized transaction ID.However, it is argued that there's no need to replace lock times or any other part of the transaction. Instead, the height can be serialized right before serializing the transaction, and 0 can be pre-serialized for non-coinbase transactions. The normalization process for non-coinbase transactions involves replacing prevout hash with normalized hash and clearing the scriptSig. Finally, the transaction is serialized using CHashWriter.Christian Decker raises concerns about addressing BIP 34 and avoiding hashed transactions in different ways. Tier Nolan responds by suggesting that the normalized TXID should not depend on the height for non-coinbase transactions, as it would cause mutation when added to the chain. For coinbase transactions, they want the height to be included. The height is proposed to be included in the scriptSig for all transactions, with a height of zero for non-coinbase transactions. Adding an extra field to include the height is not necessary. A rule can be implemented where the height specified in the scriptSig in coinbase transactions is copied into the locktime of the transaction before computing the normalized transaction ID. Nolan suggests that the normalized txid could add the height to the txids of all inputs, while non-coinbase transactions would have heights of zero. The scriptSig in the coinbase is intended to be &quot;random&quot; bytes/extra nonce, so putting a restriction on it was guaranteed to be backward compatible.In an email exchange from May 19, 2015, Christian Decker proposes two proposals to address BIP 34. He suggests including the height in the scriptSig for all transactions, with non-coinbase transactions using a height of zero. The normalized txid function could incorporate the height without any specific inclusion method. The previous txid for coinbases is required to be all zeros, so the normalized txid could add the height to the txids of all inputs. Decker assumes that the scriptSig in the coinbase is intended to be random and therefore backward compatible.Christian Decker proposed a BIP to normalize transaction IDs to address transaction malleability and simplify higher-level protocols. The normalized transaction ID is calculated by removing the scriptSig before computing the hash, ensuring that only data guaranteed by the signatures influences the hash. This guarantees that any change to the normalized ID will invalidate the signature. Validating clients supporting this BIP would use both the normalized tx ID and the legacy tx ID when validating transactions. Template transactions can now be used to build sequences of transactions before signing them. The proposal requires a hardfork but suggests that hardforks should not be feared. The details of how the hardfork is to be done were left out, as it does not matter, and a good mechanism may exist to apply multiple hardforks concurrently in the future.Stephen raises concerns about how BIP34 affects normalized transaction ids in a discussion about implementing a new block height rule. He suggests that normalized txids should strip scriptSigs of all transactions except for coinbase transactions to prevent replay attacks. Another contributor agrees and proposes replacing the scriptSig for coinbases with the height expressed as a varint, which would give all coinbases a unique normalized txid while still preventing spendable duplicates.In an email exchange, s7r discusses the issue of scriptSig and txid being stripped for safety against replays. However, this method is not safe enough as it does not account for multiple scriptPubKeys per transaction. Instead, Luke proposes a scriptPubKey-only sighash type that would provide strong safety in all malleability situations. This would enable advanced wallet software to take advantage of it in the future while strictly enforcing no-reuse on its own wallet to avoid known replays.In response to s7r's question about how a certain process can be safe against malleability of the parent transaction and replays, it is explained that the signature signs everything except itself and the normalized txid doesn't include the signature, so mutations of the signature won't change the normalized txid. If the refund transaction refers to the parent using the normalized txid, then it doesn't matter if the parent has a mutated signature, as the normalized transaction ignores such changes. If there are two transactions that are mutations of each other, only one can be added to the blockchain since the other is a double spend. The normalized txid refers to all of them rather than a specific transaction. Mutation is only a problem if it occurs after signing. If both the scriptSig of the parent and the txid are stripped, nothing can be mutated any longer, but this isn't safe enough as it does not account for multiple scriptPub</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Announcing Bitcoin BOSD: Standardized Withdrawal Output Specification for L2s</title>
  <updated>2025-02-17T02:22:58.558481+00:00</updated>
  <author>
    <name>Jose Storopoli 2025-02-15 11:37:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Announcing Bitcoin BOSD: Standardized Withdrawal Output Specification for L2s</title>
    <updated>2025-02-17T02:22:58.558508+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/94ac8f66-1627-4526-bb34-095361a30fb4n@googlegroups.com/T/#u#mfe81791c5159867a73965164ac552f23d76dbd5c" rel="alternate"/>
    <summary>The Bitcoin Output Script Descriptor (BOSD) is introduced as a novel specification alongside an open-source Rust implementation aimed at enhancing the process of on-chain withdrawals for Bitcoin Layer 2 (L2) solutions. This initiative primarily focuses on ensuring that withdrawal outputs adhere to standardness-by-construction, thereby eliminating the need for L2 solutions to implement ad-hoc rules for standard transaction compliance. With BOSD, the goal is to provide a compact representation of withdrawal outputs that are correct by design according to the standardness rules set by the Bitcoin network, streamlining the validation logic required for processing these transactions.

A significant issue that BOSD addresses is the risk L2 operators face when users request non-standard transactions, such as those with oversized OP_RETURN outputs. By abstracting the complex validation logic into a more manageable format, BOSD aids in avoiding these potential pitfalls, making it a crucial tool for maintaining the integrity and reliability of Bitcoin’s Layer 2 infrastructure. The implementation is readily available on [crates.io](https://crates.io/crates/bitcoin-bosd), encouraging developers and interested parties to explore its functionalities.

For those seeking to delve deeper into the specifics of BOSD, comprehensive details including the motivation behind its development, technical specifications, and the rationale for its creation can be found within the [SPECIFICATION.md document](https://github.com/alpenlabs/bitcoin-bosd/blob/main/SPECIFICATION.md) hosted on GitHub. The repository, also located on GitHub, invites community feedback through issues and discussions, fostering an open environment for collaboration and improvement of the BOSD standard.

Developed out of necessity by the creators at Alpen Labs, specifically mentioned are the contributions of Trey Del Bonis, BOSD emerged from the challenges encountered while building validation logic for Strata—described as a Bitcoin-native BitVM-based bridge to a ZK-rollup. By providing a standardized approach to handling on-chain withdrawals, BOSD aims to minimize ecosystem fragmentation and enhance interoperability among various Bitcoin Layer 2 solutions. Notably, the specification is licensed under CC0 public domain, whereas the Rust implementation is under MIT/Apache-2.0 licenses, reflecting a commitment to open access and utilization.

The technical structure of BOSD includes a 1-byte tag representing a type ID followed by an arbitrary-length cryptographic payload, which is practically limited to ensure compactness. The descriptor supports various types of outputs, including `OP_RETURN` payloads, pubkey hashes, script hashes, and SegWit versions 0 and 1 hashes, each associated with specific mainnet address prefixes. Despite its emphasis on compactness and efficiency, it is worth noting that BOSD does not incorporate checksums or native error correction mechanisms, underscoring its streamlined focus.</summary>
    <published>2025-02-15T11:37:00+00:00</published>
  </entry>
</feed>

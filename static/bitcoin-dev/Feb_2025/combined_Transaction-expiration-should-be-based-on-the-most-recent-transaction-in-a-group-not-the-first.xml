<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Transaction expiration should be based on the most recent transaction in a group, not the first</title>
  <updated>2025-09-25T23:11:18.841638+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Feb_2025/m24b3fd0d68571884169e00a8a7234dc31877b7bb_Transaction-expiration-should-be-based-on-the-most-recent-transaction-in-a-group-not-the-first.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2025/meea8b3b4a824fe3ceaaf8cd07385822d4298a34b_Transaction-expiration-should-be-based-on-the-most-recent-transaction-in-a-group-not-the-first.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2025/maaf3d756187d28fe49d34346cc7104146abfa923_Transaction-expiration-should-be-based-on-the-most-recent-transaction-in-a-group-not-the-first.xml" rel="alternate"/>
  <link href="https://gnusha.org/pi/bitcoindev/Z5lZc28t9-tCxdHN@petertodd.org/T/#u#maaf3d756187d28fe49d34346cc7104146abfa923" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Transaction expiration should be based on the most recent transaction in a group, not the first</title>
    <updated>2025-09-25T23:11:18.841727+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Z5lZc28t9-tCxdHN@petertodd.org/T/#u#maaf3d756187d28fe49d34346cc7104146abfa923" rel="alternate"/>
    <published>2025-02-04T21:39:00+00:00</published>
    <summary>The debate centers on the question of whether expiration-based mempool eviction is still relevant or beneficial within the Bitcoin network, highlighting a series of technical and philosophical concerns. Observations indicate that despite transactions lingering unconfirmed for extended periods, they are eventually processed without being exploited, prompting a reevaluation of the need for a mechanism that adds to computational and bandwidth overhead by repeatedly evicting and then re-accepting these transactions. The discussion points out the flawed reliance on unconfirmed transaction disappearance, exacerbated by the full implementation of Replace-By-Fee (RBF) policies, which contradicts any expectation of unconfirmed transactions vanishing permanently. The argument suggests that the practice might be redundant or counterproductive due to the mempool's limited capacity and proposes enhancing the `abandontransaction` function to allow targeted eviction from a node's local mempool.
Further critique is directed at Bitcoin Core's current approach to transaction expiration within the mempool, which involves removing transactions after a specified duration without considering their descendant transactions. This method is criticized for its inefficiency, particularly in scenarios involving Child Pays For Parent (CPFP), where users are willing to pay extra to prioritize an old transaction. Additionally, this approach poses potential vulnerabilities, such as facilitating free-relay Denial of Service (DoS) attacks and enabling transaction cycling attacks, which exploit the transaction expiration mechanism for network abuse. Despite these issues, the rationale behind transaction expiration focuses on mitigating risks associated with accepting non-mineable transactions due to soft-fork complications or other anomalies. However, the effectiveness of this rationale is questioned, considering that even months-old transactions are eventually mined, challenging the necessity of expiring them from the mempool.
The discussion extends to the broader implications of mempool management strategies on network efficiency, security vulnerabilities, and transaction longevity, emphasizing a need for a nuanced approach to managing mempool dynamics in light of evolving network behaviors and capabilities. Contributors like Peter Todd offer valuable insights into the complexities of blockchain technology and network management, providing a deeper understanding of the ongoing debates within the Bitcoin development community ([Peter Todd](https://petertodd.org)).</summary>
  </entry>
</feed>
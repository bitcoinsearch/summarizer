<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CoinPools based on m-of-n Schnorr aggregated signatures</title>
  <updated>2025-09-26T15:57:26.531352+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m85e749ac97d40bbac4f3d30aa9ded8889a4f0483">
      <author>[bitcoin-dev] CoinPools based on m-of-n Schnorr aggregated signatures Sridhar G</author>
      <timestamp>2020-11-15T22:18:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] CoinPools based on m-of-n Schnorr aggregated signatures Sridhar G" parent_id="mailing-list-2020-11-m85e749ac97d40bbac4f3d30aa9ded8889a4f0483" anchor="m437d67ec8dc9ed5b608e6347276c32665ab12aaf">
      <author>ZmnSCPxj</author>
      <timestamp>2020-11-16T01:32:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Nov_2020/018273_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2020/018272_CoinPools-based-on-m-of-n-Schnorr-aggregated-signatures.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-November/018272.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - CoinPools based on m-of-n Schnorr aggregated signatures</title>
    <updated>2025-09-26T15:57:26.531825+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-November/018272.html" rel="alternate"/>
    <published>2020-11-16T01:32:11+00:00</published>
    <summary>The author presents a model for m-of-n multisig transactions using Schnorr aggregate signatures to facilitate CoinPools for off-chain scalability. The model involves the creation of a pool containing all N public keys, with a specified threshold M. Deposits can be made to this pool using an OP_LOAD_POOL_AGG_PUB_KEY OP_CHECKSIG script. The redeem script requires an aggregated signature from all signers and a bitmap of signers. To support this scheme, the author proposes two new opcodes: OP_POOL and OP_LOAD_POOL_AGG_PUB_KEY.The OP_POOL opcode allows the creation of a new coin pool, while the OP_LOAD_POOL_AGG_PUB_KEY opcode loads the pool, checks if there are at least 'm' signers, aggregates the public key of the signers, and verifies the SIGNERS_BITMAP. This bitmap is a 32-byte value that represents which public keys from the pool have signed the transaction.By utilizing a large pool of signers, the proposed scheme enables scalability of m-of-n multisig transactions and provides trust-minimized off-chain scalability solutions. However, a drawback of this approach is that it requires exposing the public keys of the pool members. In addition, the author discusses the possibility of generating an m-of-n aggregated pubkey, which would involve an interactive setup and extra data storage. The current plan is to implement an OP_CHECKSIGADD, where the script would be: OP_CHECKSIGADD OP_CHECKSIGADD OP_CHECKSIGADD OP_EQUAL. However, OP_POOL would have a single m-of-m signature.Overall, the proposal seeks feedback on whether this scheme is suitable for enabling CoinPool for the Bitcoin network, considering the potential exposure of public keys.</summary>
  </entry>
</feed>
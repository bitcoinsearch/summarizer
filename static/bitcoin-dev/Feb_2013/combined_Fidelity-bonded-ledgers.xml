<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fidelity-bonded ledgers</title>
  <updated>2025-10-11T02:31:54.457674+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Feb_2013/002190_Fidelity-bonded-ledgers.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2013/002189_Fidelity-bonded-ledgers.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-February/002189.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Fidelity-bonded ledgers</title>
    <updated>2025-10-11T02:31:54.457758+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-February/002189.html" rel="alternate"/>
    <published>2013-02-26T02:49:10+00:00</published>
    <summary>In a post by Peter Todd, he discusses the idea of simplifying Bitcoin's transaction/scripting system by removing everything except for the transaction/scripting itself. He credits Gregory Maxwell for his ideas on incorporating unspent-chaum-token redemption op-codes into Bitcoin, which led him to develop the concept of the Fidelity-Bonded Ledger.Todd explains that while Bitcoin's transaction/scripting system can prove that a set of public keys authorized the movement of coins, it is flawed as a currency due to the double spend problem. To address this issue, Todd suggests implementing a new opcode and scriptPubKey that can provide proof of double-spend fraud to others. Individuals who can provide proof of a double-spend attempt in the blockchain would be eligible for a reward.Todd proposes that transactions should follow the same scripting system used in Bitcoin, utilizing scriptPubKeys and scriptSigs, while reusing the existing validation machinery. The optional inclusion of a block hash would further link a block into a system that detects double-spend fraud. Withdrawals from the ledger to the blockchain would involve the ledger providing the transaction, and the transaction owner spending it to an address chosen by the ledger.The detection of double-spend is not defined within the Bitcoin validation machinery. Todd presents a simplistic scriptPubKey that allows the ledger to create its own fraud proof and access the funds. However, there is a need to constrain the destination of these spent funds. Token creation and redemption can be audited by tracking the total value of all tokens issued. These tokens are essentially public keys that authorize their own redemption. Clients can demonstrate that their redemption requests have not been honored or that the value of outstanding tokens does not match up.To enforce redemptions, a special unspent txout can be introduced, which can only be spent through the creation of the requested txout, thus transferring the funds to the rightful owner. By adding a small number of opcodes to the existing scripting language, a ledger built on top of Bitcoin can be created. The honesty and performance of this ledger would be incentivized by the potential loss of value.To read the full post by Peter Todd and for further information, please refer to the following link: [link](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-February/002430.html)</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>On (in)ability to embed data into Schnorr</title>
  <updated>2025-10-09T02:30:26.170934+00:00</updated>
  <author>
    <name>waxwing/ AdamISZ 2025-10-08 12:55:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>On (in)ability to embed data into Schnorr</title>
    <updated>2025-10-09T02:30:26.170970+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/323c2d13-e90f-49c5-bfe0-f161b8b8dbb4n@googlegroups.com/T/#ma1720490885162c1d68f09541fb47183865597f3" rel="alternate"/>
    <summary>The discussion revolves around the intricacies of embedding data within Bitcoin transactions, specifically emphasizing the balance between programmability and data embeddability. The initial point highlights a technical constraint where four variables—s, r, p, and m—are reduced in their degrees of freedom due to various factors such as verification equations and inherent system design, ultimately affecting the potential for data embedding within the system.

Further elaboration touches upon the implications of these constraints for Bitcoin's utxo (unspent transaction output) set, suggesting a deliberate strategy to bloat this dataset could be motivated by making the embedded data more marketable, leveraging its permanence within Bitcoin nodes. This approach, however, is critiqued as being potentially detrimental to Bitcoin's efficiency and broader utility.

The conversation also explores alternative designs for payment systems inspired by Bitcoin's structure but aimed at specific functionalities like replacing traditional financial messaging systems without enabling complex features like vaults or lightning networks. Such systems could incorporate elements of know-your-customer (KYC) and central bank digital currencies (CBDC) through specific signature schemes.

A significant portion of the discussion is dedicated to the concept of programmability within these systems. It introduces the idea of using graftroot for delegation, allowing for programmability and the creation of zero-knowledge proof of knowledge (ZkPOK) outputs, even within the Bitcoin framework. This part of the conversation acknowledges the theoretical nature of these ideas but underscores their value in expanding the understanding of Bitcoin's current and potential capabilities.

Lastly, the debate touches on the trade-offs between embedding data in a way that is efficient yet not easily identifiable, which has implications for the overall resource allocation within the Bitcoin network. The mention of "standardness constraints" hints at the strategic considerations for making transactions that embed data indistinguishable from typical transactions to evade censorship or filtering. This reflects a nuanced understanding of Bitcoin's architecture and the ongoing efforts to optimize its functionality while exploring the possibilities of data embeddability.</summary>
    <published>2025-10-08T12:55:00+00:00</published>
  </entry>
</feed>

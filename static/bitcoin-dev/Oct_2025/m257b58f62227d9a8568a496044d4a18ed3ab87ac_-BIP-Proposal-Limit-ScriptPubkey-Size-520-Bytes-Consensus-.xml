<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP Proposal] Limit ScriptPubkey Size &gt;= 520 Bytes Consensus.</title>
  <updated>2025-10-22T02:46:39.569927+00:00</updated>
  <author>
    <name>Garlo Nicon 2025-10-21 19:05:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP Proposal] Limit ScriptPubkey Size &gt;= 520 Bytes Consensus.</title>
    <updated>2025-10-22T02:46:39.569961+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALeFGL0PDjtRt2rfbY4gTkoc+5oNQ0mn_obraE7PrtHuNYFpQw@mail.gmail.com/T/#m257b58f62227d9a8568a496044d4a18ed3ab87ac" rel="alternate"/>
    <summary>The email discussion revolves around a technical exploration into the feasibility of creating a 1-of-460 multisig script within the Bitcoin protocol, which involves a sophisticated use of hashing and stack manipulation commands to accommodate an unusually large number of signatories. The proposed script methodology suggests hashing all public keys involved in the multisig arrangement, which would significantly compress the data needed for each key to a manageable 21 bytes. When applied across 460 keys, the total byte requirement for pushing these hashes onto the stack reaches 9660 bytes. 

To streamline this process further, the script includes the use of OP_2DROP operations, calculated to require an additional 230 bytes to remove unnecessary elements from the stack, alongside a singular OP_DROP command. This stack management approach ensures that the system remains efficient and clean, minimizing the overhead associated with handling such a large array of signatures.

The execution flow of the script is meticulously outlined, beginning with the input stack containing a signature, a public key, and a number. It then proceeds through various stages including duplication of items on the stack, hash calculations, and verification steps, culminating in a checksig operation that validates the transaction. The total byte count for the operation is estimated to be 9890 bytes for the script itself, with an additional allowance for the signature and public key, bringing the cumulative size to a feasible threshold for implementation.

This discussion provides a clear insight into the innovative approaches being considered within the Bitcoin development community to enhance the flexibility and scalability of multisig transactions. By leveraging advanced scripting techniques, developers aim to expand the utility of Bitcoin's scripting language to support more complex and secure transaction types.</summary>
    <published>2025-10-21T19:05:00+00:00</published>
  </entry>
</feed>

<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - A proposal for Full RBF to not exclude Zero Conf use case</title>
  <updated>2025-10-12T02:33:31.863054+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Feb_2023/021440_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2023/021426_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021354_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021353_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021349_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021346_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2023/021342_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021292_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021290_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021291_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021289_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021287_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021286_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021283_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021282_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021280_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021279_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021278_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021274_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021272_A-proposal-for-Full-RBF-to-not-exclude-Zero-Conf-use-case.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021440.html" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021440.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - A proposal for Full RBF to not exclude Zero Conf use case</title>
    <updated>2025-10-12T02:33:31.863155+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021440.html" rel="alternate"/>
    <published>2023-02-06T12:08:40+00:00</published>
    <summary>In an email exchange between Peter Todd and Daniel Lipshitz, it was revealed that GAP600, a service provider, does not have access to KYC/AML information or telephone numbers of its clients who use bitcoin for deposit. They only receive public bitcoin information such as transaction hash and output address shared via API.Lipshitz explained that their company services merchants, payment processors, and non-custodial liquidity providers by enabling them to accept 0-conf transactions. He also provided figures on the queried unique Bitcoin addresses and USD value for November and December 2022.There is ongoing debate about the need for full RBF (replace-by-fee), with Todd arguing that implementing full RBF would stop the collection of data on real-world entities paying for GAP600's service. However, Lipshitz maintained that their service is purely an analysis of the Bitcoin network and does not involve AML/KYC.Todd suggested adding a swap limitation to mitigate risks, but this was challenged as it would negate the use case of multi-party transactions. Lipshitz emphasized that 0-conf on Bitcoin is a significant use case that should not be ignored.GAP600 did not provide specific names of companies using their service but referred to Max CEO from Coinspaid, who may share further information on the merchants they support. The email exchange also discussed the centralization of transaction processing and the privacy concerns associated with collecting client data.In a discussion on the bitcoin-dev mailing list, Daniel Lipshitz suggested the use of first-seen-safe replace-by-fee (FSS-RBF) as an alternative to full replace-by-fee (FullRBF). This would retain the significant 0-conf use case while balancing the associated risks. John Carvalho expressed concerns about the side-effects of FullRBF and supported the discussion of the FSS-RBF feature.Peter Todd explained in an email exchange with Daniel Lipshitz the issues with his first-seen-safe proposal. He noted that it was only proposed as a political compromise and that full-RBF behavior is necessary for multi-party transactions such as coinjoins and multi-party lightning channels. Todd suggested Antoine Riard's spent-nVersion signaling proposal as a possible compromise option, but it has negative privacy implications. He advised service providers to either adopt scalable instant payment tech like Lightning or expand their business with other chains like BSV.Some wallets, including Electrum, may be affected by FullRBF as they use RBF to batch transactions. Daniel Lipshitz suggested that FSS-RBF could be a suitable option to balance FullRBF and retain the 0-conf use case. John Carvalho also supported the discussion of FSS-RBF.In a separate email exchange, Lipshitz responded to Carvalho's query about why FSS-RBF wasn't implemented earlier and whether there were design problems. Lipshitz acknowledged the suitability of FSS-RBF and found no technical issues with its implementation. He pointed out that the reasons against adopting Full-RBF listed on the Bitcoin Core website do not apply in this case since OptinRBF already exists as an option and FSS-RBF offers additional benefits.The speaker expressed their approval of Peter Todd's suggestion to use the &quot;first-seen-safe replace-by-fee&quot; method, which would balance FullRBF while retaining the use cases for zero-conf transactions. They believe this could be a good way forward.It is understood that the current use case of 0-Conf acceptance of transactions is significant, and merchants are aware of the associated risks. However, full RBF adoption would likely make 0-conf not possible and limit this use case. To address this, the primary use case of full RBF (increasing fees) can be enabled while keeping the outputs of TRX1 to be included within TRX2. This would require the addition of at least one input to increase the fee. OptinRBF and FullRBF (with this limitation) would give actors the option to increase fees while still allowing the 0-conf use case. The risks associated with 0-conf are well understood, and it can continue to exist with the ongoing choices available to actors.</summary>
  </entry>
</feed>
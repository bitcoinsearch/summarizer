<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Unlimited covenants, was Re: CHECKSIGFROMSTACK/{Verify} BIP for Bitcoin</title>
  <updated>2025-10-12T02:19:47.505155+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <author>
    <name>Billy Tetrud 2021-07-04 20:50:43 2021-07-04T20:50:43+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2021-07-05 01:02:25 2021-07-05T01:02:25+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2021-07-05 02:10:17 2021-07-05T02:10:17+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-07-05 02:39:08 2021-07-05T02:39:08+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2021-07-05 05:04:21 2021-07-05T05:04:21+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2021-07-05 13:46:21 2021-07-05T13:46:21+00:00</name>
  </author>
  <author>
    <name>Greg Sanders 2021-07-05 13:51:25 2021-07-05T13:51:25+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2021-07-05 17:20:22 2021-07-05T17:20:22+00:00</name>
  </author>
  <author>
    <name>Billy Tetrud 2021-07-06 06:25:48 2021-07-06T06:25:48+00:00</name>
  </author>
  <author>
    <name>Sanket Kanjalkar 2021-07-06 10:20:53 2021-07-06T10:20:53+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2021-07-06 11:26:28 2021-07-06T11:26:28+00:00</name>
  </author>
  <author>
    <name>Jeremy 2021-07-06 18:36:31 2021-07-06T18:36:31+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-07-07 04:26:31 2021-07-07T04:26:31+00:00</name>
  </author>
  <author>
    <name>Billy Tetrud 2021-07-07 06:12:24 2021-07-07T06:12:24+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2021-07-07 13:12:58 2021-07-07T13:12:58+00:00</name>
  </author>
  <author>
    <name>Russell O'Connor 2021-07-07 14:24:17 2021-07-07T14:24:17+00:00</name>
  </author>
  <author>
    <name>Jeremy 2021-07-07 17:26:38 2021-07-07T17:26:38+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2022-02-03 06:17:14 2022-02-03T06:17:14+00:00</name>
  </author>
  <link href="bitcoin-dev/Feb_2022/019857_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019239_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019238_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019237_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019235_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019232_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019229_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019225_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019224_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019223_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019213_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019211_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019210_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019209_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019208_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019207_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019206_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019204_Unlimited-covenants-was-Re-CHECKSIGFROMSTACK-Verify-BIP-for-Bitcoin.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019857.html" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019857.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Unlimited covenants, was Re: CHECKSIGFROMSTACK/{Verify} BIP for Bitcoin</title>
    <updated>2025-10-12T02:19:47.505323+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019857.html" rel="alternate"/>
    <published>2022-02-03T06:17:14+00:00</published>
    <summary>In a recent discussion on the bitcoin-dev mailing list, the topic of enabling covenants in Bitcoin Script was explored. One suggestion involved using the &quot;2 2 CHECKMULTISIG&quot; multisig approach to enforce KYC by requiring funds to be deposited and signed with a government key. The idea of using recursive covenants to create non-terminating computations was also discussed. This concept was originally mentioned in a tweet by Ethan Heilman and later elaborated on in a post by Andrew Poelstra.The discussion also delved into the question of whether Turing completeness should be banned in Bitcoin Script. ZmnSCPxj argued for allowing total Turing-completeness but banning partial Turing-completeness. However, it was acknowledged that banning non-terminating computation for cross-transaction computations would be infeasible. Recursive covenants were identified as a way to write universal computations, and banning source code manipulation would essentially mean banning the manipulation of strings of bytes, which is fundamental to Bitcoin Script.ZmnSCPxj further explained the concept of substructural recursion rules and copattern matching in total functional languages, which ensure termination of recursion. They compared recursive covenants in Bitcoin to codata types in total functional languages, emphasizing the need for Bitcoin SCRIPT to be provably terminating.Jeremy Rubin raised concerns about the potential dangers of evil multisig covenants and the possibility of mining centralization leading to censorship. The discussion also touched on the usefulness of the CSFS opcode and the relationship between OP_CAT and covenants. It was suggested that more direct approaches like OP_TWEAK or UPDATETAPLEAF could be better for implementing covenants.The conversation also addressed the need for separate programs to operate ants and the encoding of state in other parts of the transaction. The idea of adding OP_TWEAK and convenience opcodes for building Taproot Merkle trees was proposed.The discussion on enabling covenants highlighted concerns about transaction and block validation for nodes, ensuring bounded resource requirements and clear evaluation costs. It was noted that while enabling covenants could allow for complex machines that manipulate funds on the blockchain, simple Script programs can be validated and scrutinized to mitigate potential risks. The addition of OP_CHECKSIGFROMSTACK opcode and upper bounds on recursions were suggested as possible solutions.Overall, the discussion emphasized the need for careful consideration of enabling covenants, balancing functionality with validation costs and ensuring the safety and integrity of the Bitcoin network.The ongoing discussion on enabling covenants in Bitcoin has seen arguments against them losing weight as more research is conducted. Multisig wallets alone can enable recursive covenants, such as when a government requires funds to be deposited into a multisig that can only be spent if certain conditions are met. This approach is already being used in permissioned systems like Liquid. While there are ways to escape from recursive covenants, they are not fundamentally different from consensus-enforced covenants. Therefore, multisig-based covenants should be considered in the ongoing discussions about enabling covenants in Bitcoin.Recent research has reduced the weight of arguments against covenants, as AJ's point has further weakened anti-covenant arguments. Multisig alone can enable recursive covenants, as a government can deposit funds into a multisig wallet that requires certain conditions to be met for spending. This process is more efficient than explicit covenants and is already being used in systems like Liquid. The difference between escaping from recursive covenants and consensus-enforced covenants seems to be in procedure and difficulty rather than a fundamental difference.The discussion around enabling covenants is centered on whether OP_CAT should be allowed or not. Multisig wallets can enable recursive covenants, as a government can require funds to be deposited into a multisig that follows certain rules. This approach is already used by Liquid and BTC-on-Ethereum tokens. Escaping from this type of recursive covenant would require a change in signing policy. However, escaping any consensus-enforced covenant would require a hard fork. This difference seems to be more procedural and difficulty-based.Russell O'Connor raised concerns about recursive covenants and the implications of enabling OP_CAT. He initially suggested that such worries should be left for OP_TWEAK, but later acknowledged that recursive covenants could still be created by sneaking state into UTXO amounts or sibling outputs accessed via txid. This highlights the importance of avoiding giving too much power. However, altcoins already exist and some are worse, making full EVM support possible.In an email thread, Russell O'Connor discussed the topic of enabling covenants, specifically recursive covenants that require OP_TWEAK. He expressed concern about simulating this operation with CHECKSIG(FROMSTACK), but later noted that recursive covenants could still be created using a fixed scriptpubkey by sneaking state into UTXO amounts or sibling outputs accessed via txid</summary>
  </entry>
</feed>
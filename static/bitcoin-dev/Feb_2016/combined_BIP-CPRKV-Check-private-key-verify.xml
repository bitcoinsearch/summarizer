<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP CPRKV: Check private key verify</title>
  <updated>2025-11-01T02:58:22.421204+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/April_2016/012609_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012481_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012479_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012440_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012439_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012437_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012438_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2016/012436_BIP-CPRKV-Check-private-key-verify.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP CPRKV: Check private key verify</title>
    <updated>2025-11-01T02:58:22.421304+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012436.html" rel="alternate"/>
    <published>2016-04-18T19:03:07+00:00</published>
    <summary>In a recent proposal on the bitcoin-dev mailing list, there was a suggestion to remove the OP_CHECKPRIVPUBPAIR opcode and replace it with OP_CAT and OP_CHECKSIGVERIFY. This proposal involves two parties, Bob and Alice, agreeing upon a random secret nonce, k, and calculating r in the same way as signing a transaction. The script consists of various operations such as SIZE, ADD, SWAP, CAT, CECHKSIGVERIFY, and CHECKSIG. This proposal is deemed useful for the lightning network. It is mentioned that a patch to the reference client may be coded up, but segregated witness is likely to take priority for soft-fork slot usage.On February 29th, 2016, Mats Jerratsch shared a link to a discussion on the bitcoin-dev mailing list from November 2015 regarding a Bitcoin Improvement Proposal (BIP) for Schnorr signatures. Jerratsch noted that this proposal is relevant to the Lightning Network and asked if there was a demand for coding up a patch to the reference client. However, it is also mentioned that segregated witness might be taking up any potential soft-fork slot.Another discussion on the bitcoin-dev mailing list revolves around the usefulness of a certain feature for the Lightning Network. This feature involves the creation of a non-standard script to execute a payment in an altcoin without requiring a new opcode. However, it is noted that this method will only work for coins that allow non-standard scripts, as it violates the standard output script assumption. There was initial focus on maintaining standard scripts on the altcoin, but the non-standard script approach is considered an improvement over the cut and choose method.In a previous email conversation on February 12, 2016, the possibility of creating a new opcode for an altcoin was discussed. However, it was later determined that the altcoin would only accept standard output scripts. As a result, the suggestion of paying to a non-standard script instead was considered an improvement over the previous method of cut and choose. It is mentioned that this approach would only work for coins that allow non-standard scripts. The focus then shifted to maintaining standard scripts on the altcoin.A new BIP draft proposed by Tier Nolan via the bitcoin-dev mailing list discusses using CLTV for cross-chain transfers. Many altcoins do not support CLTV, making the transfer insecure. Therefore, the proposed protocol doesn't require any new opcode and uses cut and choose to allow commitments to publish private keys. However, it is acknowledged that this protocol is clunky and not entirely secure. The proposed protocol involves four steps where Bob trades bitcoins for altcoins with Alice. The BIP CPRKV, Check Private Key Verify, allows outputs to be locked until a private key is published that matches a given public key. The BIP CPRKV is available on GitHub, and the email sender ensured the safety of their computer.The email conversation also explores the possibility of increasing the sigop count for a NOP without using segwit. It is determined that this would be a soft fork, as it makes previously allowed actions disallowed. The increased sigop count would be valid under both old and new rules, without requiring specific support on the altcoin. This allows the Bitcoin network to act as a trusted third party for safe use of channels on the altcoin, despite its malleability issues and lack of OP_CHECKLOCKTIMEVERIFY. In regards to seg-witness, the ideal scenario would be repurposing OP_NOP3 to work in both old and new scripts.Overall, these discussions among Bitcoin developers highlight various proposals and considerations regarding the use of CLTV for cross-chain transfers, the introduction of new opcodes, the improvement of scripting for the lightning network, and the potential impact on soft-fork slot usage.</summary>
  </entry>
</feed>
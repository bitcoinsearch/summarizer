<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Relative CHECKLOCKTIMEVERIFY (was CLTV proposal)</title>
  <updated>2025-10-14T02:31:18.312881+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/May_2015/007868_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/007867_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/007866_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/007865_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/007862_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/007861_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2015/007858_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2015/007838_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2015/007836_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2015/007823_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2015/007822_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2015/007804_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007719_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2015/007714_Relative-CHECKLOCKTIMEVERIFY-was-CLTV-proposal-.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/007868.html" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/007868.html" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/007868.html" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/007868.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Relative CHECKLOCKTIMEVERIFY (was CLTV proposal)</title>
    <updated>2025-10-14T02:31:18.312945+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-May/007868.html" rel="alternate"/>
    <published>2015-05-06T22:09:59+00:00</published>
    <summary>Several proposals and ideas were discussed by Bitcoin developers regarding the implementation of new opcodes and changes to the Bitcoin scripting system. One proposal was the addition of CHECKLOCKTIMEVERIFY (CLTV), which would make a transaction output unspendable until a certain point in the future. Another proposal suggested increasing the transaction version to achieve a similar outcome. Developers expressed concerns about changing the semantics of nSequence and the potential impact on previously valid transactions. Mark Friedenbach proposed an nSequence-based RCLTV proposal that was already reorg safe. Peter Todd and Matt Corallo discussed the idea of adding OP_RELATIVECHECKLOCKTIMEVERIFY (RCLTV) opcode, acknowledging its drawbacks but highlighting its usefulness for certain protocols. The conversations also touched on time-based locks and the potential incentive issues with mining. Tim√≥n proposed a new softfork rule to enforce setting the nHeight of CTxIn to the correct height. Discussions also revolved around implementing RCLTV and OP_MATURITY for more secure transactions against reorganization. In March 2015, Matt Corallo proposed requiring locktime to be at least N plus the input's height. Zooko preferred relative CHECKLOCKTIMEVERIFY over absolute CHECKLOCKTIMEVERIFY due to concerns about &quot;race conditions.&quot;The article discusses the use of the CHECKLOCKTIMEVERIFY opcode in Bitcoin scripts and its applications. Despite challenges such as exposing script information and enforcing mempool invariants during reorganizations, CHECKLOCKTIMEVERIFY can be used in non-interactive time-locked refunds, two-factor wallets, and micropayment channels. Two-factor wallets utilize 2-of-2 multisig scriptPubKeys, allowing users to spend funds without the cooperation of the service by waiting for the expiry time. The article also addresses vulnerabilities in Bitcoin protocols and suggests solutions. It analyzes micropayment channels and proposes using the same scriptPubKey as the two-factor wallet example to solve issues with refund transactions. The PayPub protocol for trustless payments for information is discussed, highlighting a flaw in the existing implementation that can be addressed with scriptPubKeys. The challenge of proving sacrifices of coins to mining fees is mentioned, and CHECKLOCKTIMEVERIFY is suggested as a solution to discourage mining centralization. Finally, the article suggests replacing the nLockTime field entirely with a per-signature capability that would serve as proof of spendability. Detailed specifications and references are provided for these proposed solutions.</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>"Recursive covenant" with CTV and CSFS</title>
  <updated>2025-03-05T02:26:48.395042+00:00</updated>
  <author>
    <name>Anthony Towns 2025-03-05 00:01:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>"Recursive covenant" with CTV and CSFS</title>
    <updated>2025-03-05T02:26:48.395075+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Z8eUQCfCWjdivIzn@erisian.com.au/T/#u#m4979b674dd06ff3cbff550fd152a931de75cec6b" rel="alternate"/>
    <summary>Recent discussions on Twitter have highlighted proposals for the near-term activation of CheckTemplateVerify (CTV) and CheckSigFromStack (CSFS), as indicated by BIP 119 and BIP 348 respectively. Various individuals, including Jeremy Rubin and Jameson Lopp, have shared their thoughts through links to their tweets, suggesting a significant interest in these Bitcoin Improvement Proposals. These proposals aim to introduce new functionalities to the Bitcoin protocol, with CTV focusing on covenants and CSFS enabling more flexible verification methods.

A notable point of contention is whether the combination of CSFS and CTV could inadvertently allow for the creation of recursive covenants, despite BIP 119's goal to prevent such structures. A practical demonstration provided via a link to MutinyNet showcases how these recursive covenants can be constructed using a combination of tapscript and specific hash calculations. This example raises questions about the readiness of the ecosystem for such changes, especially considering the technical challenges involved in implementing these features.

Critics argue that BIP 119's motivation, which is centered around avoiding recursive covenants, might be misguided. The definition of covenants used within BIP 119, the focus on preventing unbounded recursion rather than recursion per se, and the claim that covenants are widely considered unfit for Bitcoin without substantial evidence are points of debate. These criticisms suggest that an update to BIP 119's motivation section could improve its alignment with practical implications and community perspectives.

Furthermore, the conversation extends into the potential applications of these proposals beyond theoretical concerns. For instance, the use of CTV and CSFS in facilitating "blind-merged-mining" for spacechains highlights a practical application where these features could provide tangible benefits. Such uses demonstrate the broader implications of these BIPs for Bitcoinâ€™s functionality and the innovative possibilities they may unlock.

In terms of technical implementation, alternatives like bllsh propose providing similar functionalities through different mechanisms, such as custom transaction message hashing for SIGHASH flags. This approach suggests a broader consideration of how to achieve desired outcomes in Bitcoin's script capabilities without being confined to specific BIP implementations.

The discussion encapsulates a broader debate within the Bitcoin development community regarding the pace of innovation, the necessity of certain features, and the best paths forward for protocol enhancements. While some advocate for cautious, incremental improvements, others see value in exploring and implementing more radical changes that could expand Bitcoin's utility and operational paradigms.</summary>
    <published>2025-03-05T00:01:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Hashed keys are actually fully quantum secure</title>
  <updated>2025-03-19T02:31:10.834997+00:00</updated>
  <author>
    <name>Erik Aronesty 2025-03-18 16:48:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Hashed keys are actually fully quantum secure</title>
    <updated>2025-03-19T02:31:10.835035+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALkkCJZ3TBEfRYBHVv_NON18mqbsQixgUEtgGThau4D=W6gdGg@mail.gmail.com/T/#mceac77c133dddc2c08b815b63deea2a517cd9503" rel="alternate"/>
    <summary>The discussion revolves around the security vulnerabilities associated with transactions in the Bitcoin protocol, particularly focusing on the scenario where an attacker is able to deduce the private key from a public key. When a user attempts to conduct a transaction that involves spending an old output alongside their own QR output, there's a highlighted risk that an attacker could exploit this by generating their own QR output and using Replace-By-Fee (RBF) to override the legitimate transaction. This indicates a lack of protection for users under the current system.

Furthermore, the conversation touches upon the implications of introducing rules that mandate outputs to be spent together, noting that such a change would necessitate a hard fork in the blockchain. This is a significant alteration to the network's protocol that would only be justified if QR-based transactions become critically important to the ecosystem. However, it's mentioned that there's still limited evidence to suggest that QR transactions will rise to such prominence within the Bitcoin community.

This analysis stems from discussions within the Bitcoin Development Mailing List, a forum for developers and enthusiasts to explore and address technical aspects of Bitcoin and its underlying technologies.</summary>
    <published>2025-03-18T16:48:00+00:00</published>
  </entry>
</feed>

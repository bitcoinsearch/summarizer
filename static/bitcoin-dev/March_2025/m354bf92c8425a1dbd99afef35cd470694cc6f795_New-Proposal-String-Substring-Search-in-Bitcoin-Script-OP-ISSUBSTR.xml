<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New Proposal：String Substring Search in Bitcoin Script - OP_ISSUBSTR</title>
  <updated>2025-03-18T02:36:40.125454+00:00</updated>
  <author>
    <name>Peter Todd 2025-03-17 16:54:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New Proposal：String Substring Search in Bitcoin Script - OP_ISSUBSTR</title>
    <updated>2025-03-18T02:36:40.125484+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Z9hTu2TjMlLr5-Eg@petertodd.org/T/#m354bf92c8425a1dbd99afef35cd470694cc6f795" rel="alternate"/>
    <summary>Bitcoin scripts primarily focus on validation rather than computation, illustrating a significant aspect of their functionality. This distinction is highlighted by the equivalence between substring search operations and concatenation processes within these scripts. For instance, validating whether a certain substring is part of a larger string can be alternatively approached by concatenating the substring in question with the anticipated remaining section of the larger string, and then verifying if the resulting combination matches the original string in its entirety. To put this into perspective, a basic example is provided where checking if 'foo' is a substring of 'foobar' through a standard substring search method is shown to be fundamentally similar to concatenating 'foo' and 'bar' and then comparing the outcome to 'foobar' to confirm equality.

The explanation aims to simplify the understanding of Bitcoin script operations for those unfamiliar with the intricate mechanics, using straightforward examples to elucidate how such validations are conducted. For more detailed insights, references are made to further resources available at [Peter Todd's website](https://petertodd.org), allowing interested individuals to explore the topic more deeply. The communication underscores the significance of conceptual clarity in grasping the operational dynamics of Bitcoin scripts, emphasizing the practical implications of these validation mechanisms in real-world applications. This approach not only demystifies the technical nuances of Bitcoin scripting but also encourages a broader comprehension of its validation-centric nature, which stands in contrast to more computation-heavy paradigms seen in other scripting or programming contexts.</summary>
    <published>2025-03-17T16:54:00+00:00</published>
  </entry>
</feed>

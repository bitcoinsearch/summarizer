<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-22T13:08:16.429412+00:00</updated>
  <author>
    <name>Sjors Provoost 2025-03-18 12:48:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-22T13:08:16.429445+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m2b4a5ff4df310ec08f0cf15ba7ba1b03722b1bb0" rel="alternate"/>
    <summary>The discussion revolves around the complexities and considerations involved in deploying a Post-Quantum Cryptography (PQC) scheme within the Bitcoin network, specifically through a soft fork that introduces a PQC tap leaf mechanism. The primary challenge lies in the decision between burning certain types of outputs (like no `pk()`, `bare multisig`, `pkh()`, and others) versus allowing a free-for-all approach. It's suggested that extensive research and testing on signets should precede any deployment to address these concerns effectively. 

A proposed solution involves activating a PQC tap leaf scheme via a soft fork, enabling wallets to generate addresses that include a PQC tap leaf to safeguard against quantum attacks. However, this approach introduces significant complexity to wallet operations, extends descriptor backups, and might see minimal adoption due to its intricate nature and the inability to gauge adoption levels accurately since users are unlikely to spend from the PQC path.

Furthermore, the activation of a PQC tap leaf soft fork by itself wouldn't suffice for a permanent migration of coins in a scenario where quantum capabilities can compromise key paths. An alternative might involve using a Nothing-Up-My-Sleeve (NUMS) point for the key path or developing a new version of Taproot without key path support. These solutions, while technically feasible, may only attract a minor user base interested in very long-term storage due to the higher costs and complexities compared to pre-quantum mechanisms.

The email also touches upon the issue of which script outputs to burn in the face of quantum threats, suggesting that certain outputs (`pkh()`, `sh()`, and `wsh()`) should not be frozen as they might either be brute-force guessable or could potentially contain quantum-resistant scripts despite appearing standard.

This entire discussion underscores the challenges of preparing Bitcoin's infrastructure for post-quantum threats, highlighting the need for careful consideration of user adoption, technical complexity, and the overall effectiveness of proposed solutions. The likelihood of activating soft forks that introduce significant changes with low immediate utility is questioned, suggesting a cautious approach to implementing such forward-looking security measures. Further information can be referenced from the Bitcoin Improvement Proposals (BIPs), specifically an appendix in [BIP380](https://github.com/bitcoin/bips/blob/master/bip-0380.mediawikiappendix-b-index-of-script-expressions).</summary>
    <published>2025-03-18T12:48:00+00:00</published>
  </entry>
</feed>

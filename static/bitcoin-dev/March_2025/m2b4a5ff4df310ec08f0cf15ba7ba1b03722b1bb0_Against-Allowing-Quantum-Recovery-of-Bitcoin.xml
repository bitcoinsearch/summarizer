<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-23T15:41:53.770489+00:00</updated>
  <author>
    <name>Sjors Provoost 2025-03-18 12:48:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-23T15:41:53.770522+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m2b4a5ff4df310ec08f0cf15ba7ba1b03722b1bb0" rel="alternate"/>
    <summary>The discussion highlights the complexities and challenges associated with deploying Post-Quantum Cryptography (PQC) schemes within Bitcoin's framework, particularly relating to consensus rules on burn versus a free-for-all approach. The suggestion posits that before implementing a PQC tap leaf scheme via a soft fork, thorough research and testing on a signet are crucial. This approach would involve creating a consensus rule where certain outputs, like no `pk()`, bare multisig, `pkh()`, `wpkhk()` output, and any `tr()` key path, cannot be spent. However, this introduces significant complexity to wallet management and backup processes, potentially leading to minimal adoption rates.

Moreover, the effectiveness of a PQC tap leaf soft fork is questioned due to its insufficiency in permanently migrating coins in the face of quantum attacks. The suggested solution involves utilizing a Nothing-Up-My-Sleeve (NUMS) point for the key path or developing a new Taproot version that omits key path support, as outlined in potential proposals like BIP360. These measures aim to make addresses suitable for long-term storage by avoiding the vulnerabilities exposed by quantum computing. Nonetheless, the practicality and desirability of these solutions are debated, given the added wallet complexity and the uncertainty regarding which address type to use for cold storage.

The correspondence also touches on the specifics of which script outputs should be included in the burn consensus rule, advocating for a method that does not necessitate an intricate inspection of the script. Notably, certain scripts that could potentially be brute force guessed due to public key reuse are highlighted for inclusion in the burn, whereas others, like `sh()` and `wsh()`, might not be frozen due to the possibility of designing quantum-proof scripts, albeit inefficient ones.

For further details on notation and specific script expressions referenced in this discussion, [appendix B of BIP380](https://github.com/bitcoin/bips/blob/master/bip-0380.mediawikiappendix-b-index-of-script-expressions) provides comprehensive insights. This appendix is instrumental in understanding the technical delineations proposed for enhancing Bitcoin's resilience against quantum computing threats.</summary>
    <published>2025-03-18T12:48:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-23T14:38:08.499811+00:00</updated>
  <author>
    <name>Sjors Provoost 2025-03-18 12:48:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-23T14:38:08.499844+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m2b4a5ff4df310ec08f0cf15ba7ba1b03722b1bb0" rel="alternate"/>
    <summary>The discussion revolves around the challenges and considerations in implementing a Post-quantum cryptography (PQC) scheme within Bitcoin's infrastructure, specifically through the deployment of tapleaf constructs as part of a soft fork. The primary concern is the decision between implementing a burn mechanism versus opting for a free-for-all approach when it comes to the spendability of certain outputs under a quantum threat scenario. It is proposed that extensive research and testing on these concepts should be conducted in advance, utilizing signet to better understand their implications.

A detailed proposal suggests that no pk(), bare multisig, pkh(), wpkh(), or tr() key path outputs should be spendable, with the idea of incorporating a PQC tap leaf scheme via a BIP (Bitcoin Improvement Proposal) that could be activated in a soft-fork. This would allow wallets to generate addresses that include this tap leaf for enhanced security against quantum attacks. However, this introduces significant complexities in wallet management, such as elongated descriptor backups, which could deter widespread adoption. Moreover, there's an acknowledgment that without any real use of the PQC path due to its complexity and lack of incentives, measuring its adoption and effectiveness would be challenging.

Further complicating matters, the activation of a PQC tapleaf soft fork by itself is not seen as a comprehensive solution to the potential risks posed by quantum computing. In the event of a quantum attack, alternatives like using a NUMS point for the key path or developing a new version of Taproot without key path support are mentioned. These solutions, while technically feasible, cater to a very niche segment primarily concerned with long-term storage due to the increased costs and operational intricacies involved in a pre-quantum environment.

The prospect of introducing soft forks that add complexity but have minimal user engagement is met with skepticism. The argument is made that soft forks, which do not promise significant utility or adoption, are unlikely to gain the necessary consensus for activation. Additionally, the conversation touches upon the specifics of which types of scripts and keys, such as pkh() underlying public keys and various scriptPubKey formats, should be included in the burn process to mitigate the risk of brute force attacks by quantum computers. The aim is to establish freeze rules that avoid exhaustive script inspections while accommodating the possibility of quantum-resistant scripts being designed, albeit imperfectly.

For further details, the appendix B of BIP380 provides notation and additional context regarding the discussed script expressions, accessible here: [BIP380 Appendix B](https://github.com/bitcoin/bips/blob/master/bip-0380.mediawikiappendix-b-index-of-script-expressions). This highlights the nuanced considerations required in evolving Bitcoin's protocol to counter the emergent threat of quantum computing, balancing between security enhancements and practical usability for users.</summary>
    <published>2025-03-18T12:48:00+00:00</published>
  </entry>
</feed>

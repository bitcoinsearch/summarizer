<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-22T13:52:10.069444+00:00</updated>
  <author>
    <name>Sjors Provoost 2025-03-18 12:48:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-22T13:52:10.069470+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m2b4a5ff4df310ec08f0cf15ba7ba1b03722b1bb0" rel="alternate"/>
    <summary>The discussion revolves around the challenges and considerations in deploying a Post-Quantum Cryptography (PQC) scheme within the Bitcoin network, particularly focusing on how to address potential quantum attacks without significantly complicating wallet design or usage. The conversation begins with an acknowledgment of the complexities involved in implementing a PQC tap leaf scheme as part of a Bitcoin Improvement Proposal (BIP) and activating it through a soft fork. This approach would allow wallets to generate addresses that include a PQC tap leaf for enhanced security against quantum attacks. However, this method introduces additional complexity to wallets, extends the length of descriptor backups, and may lead to minimal adoption due to its complexity and the uncertainty regarding its practical benefits.

Further elaboration is made on the necessity of choosing between burning certain types of outputs and allowing a free-for-all in the context of a quantum attack scenario. It's noted that in such a scenario, relying solely on a PQC tap leaf scheme might be insufficient. A quantum attacker could simply spend from the key path, suggesting a need for alternative strategies like utilizing a Nothing-Up-My-Sleeve (NUMS) point for the key path or developing a new Taproot version that lacks key path support, referenced as BIP360. These solutions aim to offer secure long-term storage options but come with their own set of drawbacks, including increased transaction costs in a pre-quantum world and added complexity that could deter widespread adoption.

Moreover, the message highlights concerns regarding the activation of soft forks that introduce features which may not see significant use. This skepticism stems from the added wallet complexity and the dilemma users face in deciding whether to use the PQC tapleaf or a Taproot version without key path support for cold storage. The email also references an appendix from BIP380 for notation purposes and discusses the rationale behind including or excluding certain scriptPubKey types from being frozen in response to quantum threats. Specifically, it argues for the inclusion of pk(), pkh(), and other specified outputs in the burn consensus rule, while suggesting that scripts not conforming to standard templates could be exempt due to the possibility of them being designed to be quantum proof, albeit potentially inefficiently.

For further details on the script expressions mentioned, readers are directed to consult appendix B of BIP380, available at [https://github.com/bitcoin/bips/blob/master/bip-0380.mediawikiappendix-b-index-of-script-expressions](https://github.com/bitcoin/bips/blob/master/bip-0380.mediawikiappendix-b-index-of-script-expressions). This reference provides insight into the technical aspects of the proposed changes and their implications for Bitcoin's security in the face of quantum computing advancements.</summary>
    <published>2025-03-18T12:48:00+00:00</published>
  </entry>
</feed>

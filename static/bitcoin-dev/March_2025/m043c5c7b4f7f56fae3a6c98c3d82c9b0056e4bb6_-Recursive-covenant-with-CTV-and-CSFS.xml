<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>"Recursive covenant" with CTV and CSFS</title>
  <updated>2025-03-09T02:09:13.764866+00:00</updated>
  <author>
    <name>James OBeirne 2025-03-08 15:55:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>"Recursive covenant" with CTV and CSFS</title>
    <updated>2025-03-09T02:09:13.764892+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Z8tiNcjdsRKvekp4@erisian.com.au/T/#m043c5c7b4f7f56fae3a6c98c3d82c9b0056e4bb6" rel="alternate"/>
    <summary>The discussion begins with the potentiality of creating an unbounded state machine within Bitcoin's framework by retaining the CSFS private key. This approach would enable the swapping of hashes or signatures in the future, thereby allowing for the addition of new states by a master key. The conversation points out that such capabilities already exist to some extent within Bitcoin, where one could create an "unbounded state machine" through the continuous exchange of the same UTXO, albeit at the cost of transaction fees and within the constraints posed by the UTXO model and block cadence. The discourse then shifts to highlight that advanced introspection opcodes, capable of synthesizing CTV (CheckTemplateVerify), have been operational on the Liquid network for nearly four years, as evidenced by the documentation and pull requests found on GitHub ([ElementsProject pull request #1427](https://github.com/ElementsProject/elements/pull/1427), [new opcodes for additional functionality](https://github.com/ElementsProject/elements/blob/master/doc/tapscript_opcodes.mdnew-opcodes-for-additional-functionality)).

Further, the conversation delves into the political dimensions of consensus changes within the Bitcoin ecosystem, emphasizing that soliciting widespread agreement from a diverse set of participants with varying technical proficiencies is inherently a political process. The use of the term "Overton window" is defended as appropriate for discussing the feasibility and acceptance of significant modifications to Bitcoin's protocol. It is argued that substantial changes require considerable time for the technical community to thoroughly evaluate their implications, including tooling and safety considerations. This argument is made in the context of introducing a new script interpreter based on Lisp or combinator calculus, which is considered far outside the current scope of acceptable modifications, highlighting the need for careful consideration of the utility of features enabled by both small and large changes.

Lastly, the dialogue addresses a critique regarding the evaluation of changes based on lines of code (LoC) within the script interpreter, asserting that while LoC may offer a rough gauge of marginal risk, it is not a perfect measure. The focus on LoC within the specific context of the script interpreter is acknowledged as a valid heuristic for assessing risk, notwithstanding its limitations.</summary>
    <published>2025-03-08T15:55:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>"Recursive covenant" with CTV and CSFS</title>
  <updated>2025-03-11T02:29:47.675336+00:00</updated>
  <author>
    <name>Nadav Ivgi 2025-03-10 05:14:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>"Recursive covenant" with CTV and CSFS</title>
    <updated>2025-03-11T02:29:47.675378+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAGXD5f3EGyUVBc=bDoNi_nXcKmW7M_-mUZ7LOeyCCab5Nqt69Q@mail.gmail.com/T/#m2c4ec9dfacef8f60427539f3c2fe20b401ba5d51" rel="alternate"/>
    <summary>In a recent discussion on the Bitcoin Development Mailing List, interesting points were raised regarding the evolution of certain Bitcoin scripting capabilities, specifically focusing on CTV (CHECKTEMPLATEVERIFY) and APO (Anyprevout). It was noted that CTV initially included a constexpr requirement, which mandated that the hash for the CTV had to be from a literal push preceding the opcode. This constraint was designed to prevent dynamic computation or pre-verification of the CTV hash and its derivation from the witness. However, this requirement was eventually discarded to streamline the implementation process, highlighting a shift towards simplifying Bitcoin's scripting mechanisms.

Further exploration into the practical applications of these scripting enhancements was shared through examples utilizing Minsc, a scripting language designed to facilitate more complex Bitcoin scripts. The conversation showcased the creation of 0-fee transactions within the context of a BMM Spacechain setup, utilizing either APO for recursive signature operations or CTV for templated transactions. Despite the innovative approach, it was acknowledged that such transactions would require additional mechanisms, like anchor outputs or modified CTV templates, to include extra fees as the current method lacks this capability.

The discussion also touched upon the ongoing development efforts to improve the usability of Minsc for various Bitcoin scripting scenarios. With support for features like Taproot, PSBT (Partially Signed Bitcoin Transactions), Descriptors, Miniscript, raw Script, and BIP32, Minsc is positioned as a versatile tool for developers. However, it was mentioned that much of Minsc's potential remains undocumented, with the official website not fully reflecting the latest capabilities. To bridge this gap, several examples were shared, including simple CTV hash calculations, advanced CTV vault implementations, key delegation techniques, and decaying multisig setups, demonstrating the broad applicability of Minsc in enhancing Bitcoin's scripting landscape.

For those interested in exploring these examples further, links were provided to detailed implementations and demonstrations hosted on the Minsc platform ([Minsc example](https://min.sc/v0.3/gist=3aa538b384d3aaf4282d1acaf943f608), [Example transaction](https://mutinynet.com/tx/9c941dc9c0068eb817b2d18416b174468203c6ad090d8d5735cc9b3732959e39), [CTV simple example](https://min.sc/v0.3/github=examples/ctv-simple.minsc), [CTV vault example](https://min.sc/v0.3/github=examples/ctv-vault.minsc), [Key delegation example](https://min.sc/v0.3/gist=82d92568c2fcba62203157f8df11354e), [Decaying multisig example](https://min.sc/v0.3/github=examples/3of3-into-2of3.minsc)). These resources serve not only as a testament to the evolving sophistication of Bitcoin scripting but also as valuable tools for developers looking to harness these advancements in their projects.</summary>
    <published>2025-03-10T05:14:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>"Recursive covenant" with CTV and CSFS</title>
  <updated>2025-03-18T02:32:43.642270+00:00</updated>
  <author>
    <name>Antoine Riard 2025-03-11 01:06:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>"Recursive covenant" with CTV and CSFS</title>
    <updated>2025-03-18T02:32:43.642304+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Z9OgbC3Zvg1vfrlc@erisian.com.au/T/#md7bfe26c4f9939934774eefa03ca92cc3640d390" rel="alternate"/>
    <summary>The email delves into the complexities and potential implications of extending Bitcoin's scripting capabilities, particularly focusing on how such extensions could impact the Unspent Transaction Output (UTXO) model. By enabling cross-inspection of outpoint statuses, there is a concern that transaction-withholding risks in Bitcoin contracting protocols, like vaults, might be amplified. This is especially pertinent with the introduction of new opcodes that allow for advanced introspection, as seen in projects like Elements. However, it's noted that live deployments utilizing these opcodes are not as widespread, with Liquid Bitcoin (L-BTC) having less coin locked in comparison to the Lightning Network (LN) based on publicly available data.

The author expresses skepticism towards the practical application and security implications of utilizing L-BTC along with these introspection opcodes, questioning whether developers have thoroughly explored potential misuse. Additionally, the email addresses a broader issue concerning the process of achieving consensus within the Bitcoin community, highlighting a disconnect between technical merits and social/political dynamics. The writer criticizes the tendency to prioritize social popularity and control over GitHub repositories above objective benefits to Bitcoin and necessary consensus changes for its long-term health.

On a more technical note, the email revisits discussions around covenant proposals, specifically CheckTemplateVerify (CTV), from a previous Bitcoin Core proposal discussion. Despite acknowledging rudeness in communication, the writer maintains their stance on the cautious approach needed in designing contracting primitives. They remain open to reviewing and testing CTV-based vaults, emphasizing the importance of real-world operational testing beyond proof-of-concept stages. The author appreciates CTV's potential to bring transaction immutability into chains of transactions, which could significantly benefit cold wallet or vault constructions by mitigating risks associated with UTXO signing key leaks once a funding UTXO is confirmed.

However, a sense of caution is advised against adopting new scripting interpreters without first addressing underlying issues affecting Bitcoinâ€™s contracting protocols and second-layer solutions, like dynamic fee challenges. The writer suggests an interesting approach for smart contract toolchain development, proposing the creation of a Lisp interpreter tailored to compile towards supported Bitcoin opcodes, potentially offering formal verification benefits even if only a subset of functionalities can be utilized.

In conclusion, while recognizing the heuristic value of Lines of Code (LoC) in assessing marginal risk, the email underscores the need for careful consideration and thorough testing of any proposed changes to Bitcoin's scripting environment to ensure they do not inadvertently introduce vulnerabilities or undermine the network's foundational principles.</summary>
    <published>2025-03-11T01:06:00+00:00</published>
  </entry>
</feed>

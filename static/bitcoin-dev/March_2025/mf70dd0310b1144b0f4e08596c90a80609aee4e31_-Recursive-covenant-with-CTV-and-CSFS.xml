<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>"Recursive covenant" with CTV and CSFS</title>
  <updated>2025-03-06T02:26:42.893116+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2025-03-05 06:14:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>"Recursive covenant" with CTV and CSFS</title>
    <updated>2025-03-06T02:26:42.893147+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/6a9d4eea-51bd-45d8-b839-4ac3cefdbb7en@googlegroups.com/T/#mf70dd0310b1144b0f4e08596c90a80609aee4e31" rel="alternate"/>
    <summary>The discussion begins with a clarification regarding the interpretation of BIP 119, emphasizing the significance of its non-recursive nature while highlighting the overlooked aspects of being "fully-enumerated" and devoid of "dynamic state." The critique presented against BIP 119 is acknowledged, yet it's noted that the example provided to challenge BIP 119 adheres to its criteria by maintaining a fully enumerated state without introducing dynamic elements. This raises questions about the development tools used for creating taproot script path spends, suggesting that the difficulty encountered may reflect more on the individual's development environment rather than on the broader ecosystem's readiness for such implementations.

Further analysis delves into the viability of using private key deletion as a method to emulate CheckTemplateVerify (CTV) functionalities, albeit with limitations in creating self-referential loops. This part of the conversation segues into an appraisal of two projects: Simplicity and bllsh. Simplicity is recognized for its potential, hindered by a protracted developmental phase without producing significant applications despite the involvement of talented developers. On the other hand, bllsh is identified as a promising but very new initiative with limited development engagement, suggesting it might be premature to consider it a long-term solution.

The conversation also contrasts these projects against existing covenant proposals, pointing out that both Simplicity and bllsh would necessitate a comprehensive overhaul of Script, implicating a broad spectrum of ecosystem changes. This is juxtaposed with the preference within the current discourse for more modest proposals that aim to foster permissionless innovation on Bitcoin without demanding extensive modifications. This perspective aligns with a cautious approach towards ecosystem evolution, favoring incremental innovation while keeping the door open for more ambitious future overhauls.</summary>
    <published>2025-03-05T06:14:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>ESSPI: ECDSA/Schnorr Signed Program Input for BitVMX</title>
  <updated>2025-03-06T02:27:12.720210+00:00</updated>
  <author>
    <name>Sergio Demian Lerner 2025-03-05 03:22:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>ESSPI: ECDSA/Schnorr Signed Program Input for BitVMX</title>
    <updated>2025-03-06T02:27:12.720241+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/3e49d257-7d44-4c19-a157-eb479ca0a4b9n@googlegroups.com/T/#u#meb3183c35639834ca5f9202c0fca80f98f7d1212" rel="alternate"/>
    <summary>The BitVM and BitVMX protocols, traditionally reliant on one-time signature (OTS) schemes like Lamport and Winternitz for program input signing, face significant storage overhead challenges that limit their practical use. In a groundbreaking improvement to these protocols, a new paper introduces the ESSPI method, which utilizes ECDSA/Schnorr signatures for BitVMX program input signing. This method marks a substantial advancement by achieving an optimal 1:1 data expansion ratio, a stark contrast to the previously best-known ratio of 1:200 based on Winternitz signatures. 

To enable this leap in efficiency, four major innovations have been introduced within the BitVMX protocol. First, there's a modification to the BitVMX CPU that incorporates a challengeable hashing core. This addition is pivotal for the second innovation: a new partition-based search approach designed to detect fraud during hashing. The third innovation is the development of an enhanced transaction Directed Acyclic Graph (DAG), which includes data-carrying transactions supported by a fraud-verifying smart contract. Lastly, a novel timelock-based mechanism has been crafted for proving data availability to Bitcoin smart contracts, ensuring the verification of uncompressed inputs such as SPV proofs, NiPoPoWs, or elongated computation integrity proofs like STARKs without necessitating soft forks.

This suite of advancements not only addresses the inefficiencies posed by previous OTS schemes but also significantly broadens the scope of applications and functionalities achievable through the BitVMX protocol. For further details, the full paper can be accessed at [this link](https://bitvmx.org/files/esspi-ecdsa-input-bitvmx.pdf).</summary>
    <published>2025-03-05T03:22:00+00:00</published>
  </entry>
</feed>

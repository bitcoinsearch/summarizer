<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>New Proposal：String Substring Search in Bitcoin Script - OP_ISSUBSTR</title>
  <updated>2025-03-19T02:32:24.416132+00:00</updated>
  <author>
    <name>weichu deng 2025-03-18 15:32:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>New Proposal：String Substring Search in Bitcoin Script - OP_ISSUBSTR</title>
    <updated>2025-03-19T02:32:24.416168+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/e1c28747-ccc9-4d14-a93f-77dbe08a0ba9n@googlegroups.com/T/#md3d5a0271e4d74f835c46008b88e79138a44f126" rel="alternate"/>
    <summary>In an insightful exchange regarding Bitcoin scripts, Erik Aronesty and Peter Todd delve into the complexities of script operations, specifically focusing on string search, concatenation, and the proposal of a new operation, OP_ISSUBSTR. The discussion opens with Peter Todd's assertion that Bitcoin scripts primarily concern validation rather than computation, suggesting that operations for substring search and concatenation can essentially serve the same purpose within scripts. Todd exemplifies this by comparing the processes of validating a substring through direct search versus concatenating the substring with another string and validating their equality.

Erik Aronesty counters Todd's perspective by highlighting the necessity of introducing a separate operation, OP_ISSUBSTR, for specific cases where existing operations like CAT (concatenate) fall short. Aronesty argues that converting non-deterministic signatures to deterministic ones and identifying substrings located in the middle of a string cannot be efficiently managed by CAT due to two main issues. Firstly, the security implications associated with CAT are contentious, as it may lead to the generation of overly long strings that risk causing stack overflows. This concern is amplified by ongoing debates around the potential restoration of OP_CAT. Secondly, the effectiveness of CAT is limited by the prerequisite that the other substring involved in the operation must be pre-known, which isn't always feasible.

The dialogue between these experts underscores the evolving nature of Bitcoin scripting language and the continuous effort to balance operational efficiency with security considerations. This conversation not only reflects the depth of technical expertise among participants in the Bitcoin Development Mailing List but also demonstrates the collaborative approach taken by the community to refine and enhance the scripting capabilities within Bitcoin's framework. The inclusion of a link to further details on Peter Todd's argument showcases the open and accessible nature of these discussions, inviting broader participation and scrutiny from the wider community ([Peter Todd](https://petertodd.org)).</summary>
    <published>2025-03-18T15:32:00+00:00</published>
  </entry>
</feed>

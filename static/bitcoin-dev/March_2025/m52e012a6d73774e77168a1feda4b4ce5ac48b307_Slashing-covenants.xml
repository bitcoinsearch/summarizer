<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Slashing covenants</title>
  <updated>2025-03-25T02:33:27.323616+00:00</updated>
  <author>
    <name>Ethan Heilman 2025-03-24 21:51:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Slashing covenants</title>
    <updated>2025-03-25T02:33:27.323657+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAEM=y+V_jUoupVRBPqwzOQaUVNdJj5uJy3LK9JjD7ixuCYEt-A@mail.gmail.com/T/#u#m52e012a6d73774e77168a1feda4b4ce5ac48b307" rel="alternate"/>
    <summary>In the exploration of enhancing BitVM's capabilities, a notable suggestion has arisen regarding the integration of covenants without the necessity for OP_CAT, an element that is currently operable. This proposal delineates a method utilizing SHA256, which interestingly requires merely 211kb for a single compression function call, contrasting with the potential expectation of needing more. The discussion extends into the feasibility of merklizing part of the computation through tapleaf, although this approach might still culminate in a substantial data size, possibly in the range of a few hundred kilobytes.

Furthermore, the conversation sheds light on an innovative perspective regarding transaction sizes, particularly in the context of covenant spends and their enforcement mechanisms. A significant point made is the characterization of large transaction sizes not as a drawback but as a strategic feature. This design choice aims to ensure that stakes are irretrievably burned in scenarios where a party fails to honor the covenant spend, thereby deterring dishonesty and enhancing the system's integrity. This mechanism stands out as a proactive measure to safeguard against misuse while promoting transparency and accountability within the network's operations.</summary>
    <published>2025-03-24T21:51:00+00:00</published>
  </entry>
</feed>

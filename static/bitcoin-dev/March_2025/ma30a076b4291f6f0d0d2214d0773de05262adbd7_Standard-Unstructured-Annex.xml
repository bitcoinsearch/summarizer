<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Standard Unstructured Annex</title>
  <updated>2025-03-25T02:36:49.170757+00:00</updated>
  <author>
    <name>Antoine Riard 2025-03-20 22:47:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Standard Unstructured Annex</title>
    <updated>2025-03-25T02:36:49.170788+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Z9tg-NbTNnYciSOh@petertodd.org/T/#ma30a076b4291f6f0d0d2214d0773de05262adbd7" rel="alternate"/>
    <summary>Antoine addresses a potential update concerning taproot annex support, referencing a proposal found at [GitHub](https://github.com/bitcoin/bips/pull/1381). The suggestion involves initiating all inputs with an annex, starting with a 1-byte format that combines a zero byte (0x00) with a payload of random data. This approach is recommended to circumvent issues such as the inflation of annex size, which could potentially lower the fee rate of multi-party transactions and lead to congestion in network mempools by making coinjoin transactions difficult to process.

Moreover, Antoine raises a concern about the absence of a policy or rule to cap the maximum size of the annex. Without such a limitation, the same problems of transaction delay and network clogging could persist, given that the annex, being a non-standard taproot data field, currently does not have a maximum size limit. This insight suggests a need for further review and possibly the implementation of transaction-relay policies that would enforce a maximum annex size to mitigate these risks.</summary>
    <published>2025-03-20T22:47:00+00:00</published>
  </entry>
</feed>

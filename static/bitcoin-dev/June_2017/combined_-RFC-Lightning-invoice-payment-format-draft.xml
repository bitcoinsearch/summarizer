<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [RFC] Lightning invoice/payment format draft</title>
  <updated>2025-09-26T15:56:32.919351+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="mdf39fabe8d77327800b78f6859a1b590eba7b596">
      <author>[bitcoin-dev] [RFC] Lightning invoice/payment format draft Rusty Russell</author>
      <timestamp>2017-06-01T01:28:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] [RFC] Lightning invoice/payment format draft Rusty Russell" parent_id="mailing-list-2017-06-mdf39fabe8d77327800b78f6859a1b590eba7b596" anchor="m685650fc9ac2145ecdf3d0d7579189d2a0c85fa5">
      <author>[bitcoin-dev] [Lightning-dev] &quot; ZmnSCPxj</author>
      <timestamp>2017-06-01T03:42:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="[bitcoin-dev] [Lightning-dev] &quot; ZmnSCPxj" parent_id="mailing-list-2017-06-m685650fc9ac2145ecdf3d0d7579189d2a0c85fa5" anchor="mf66f985a07d77db0fdbcfc284e38f8a6c9bcd62d">
      <author>ZmnSCPxj</author>
      <timestamp>2017-06-01T03:48:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="1" position="3" reply_to="[bitcoin-dev] [RFC] Lightning invoice/payment format draft Rusty Russell" parent_id="mailing-list-2017-06-mdf39fabe8d77327800b78f6859a1b590eba7b596" anchor="m388caf11b0bc918ff54ec1692b213d548008d26e">
      <author>[bitcoin-dev] &quot; Andreas Schildbach</author>
      <timestamp>2017-06-01T05:54:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/June_2017/014472_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014471_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014470_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2017/014468_-RFC-Lightning-invoice-payment-format-draft.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014472.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - [RFC] Lightning invoice/payment format draft</title>
    <updated>2025-09-26T15:56:32.919988+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014472.html" rel="alternate"/>
    <published>2017-06-01T05:54:37+00:00</published>
    <summary>Rusty Russell has submitted a pull request on GitHub for review of a lightning payment format. The format is bech32 encoded and includes optional parts tagged with a URI scheme, similar to the existing &quot;bitcoin:&quot; scheme. This proposed format also includes a MIME type for usage in NFC NDEF messages or emails. The author has provided an example payment in the pull request, demonstrating how to send 2500 microbitcoin using a specific payment hash to a specific recipient within a specific time frame. Rusty has requested wider review on the pull request.ZmnSCPxj corrects their understanding of the bech32 specification in a message. They clarify that the character &quot;1&quot; is not allowed in the data part, as previously thought. The last &quot;1&quot; digit in the bech32 string serves as a separator between the human-readable and data parts. ZmnSCPxj apologizes for any confusion caused by their previous statement.Rusty and ZmnSCPxj discuss potential issues with parsing optional amounts in bech32 in an email exchange. They note that the separator character between the human-readable and data parts is the character &quot;1&quot;, which may cause problems when upgrading versions. Currently, version 0 translates to the character &quot;q&quot; appearing after &quot;1&quot;, indicating that 1q is not an amount and starts the data part. However, if version 1 is available, a payment starting with lnbc1p could indicate a 1 pico-bitcoin payment or an arbitrary payment to a version-1 data part. ZmnSCPxj questions the necessity of limiting the use of the character &quot;1&quot; for the amount and suggests fixing the first 5 bits to be 0 as an unambiguous separator. They also discuss the assertion that lightning invoices are less prone to human error compared to QR reader errors due to their length.In summary, Rusty Russell has made a pull request for review of a lightning payment format that is bech32 encoded with optional parts tagged. ZmnSCPxj corrects their understanding of the bech32 specification, clarifying that the character &quot;1&quot; is not allowed in the data part. Rusty and ZmnSCPxj discuss potential issues with parsing optional amounts in bech32, including the use of the character &quot;1&quot; as a separator between human-readable and data parts. The author has requested wider review on the pull request, which includes an example payment.</summary>
  </entry>
</feed>
<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Bitcoin script opcode counts</title>
  <updated>2025-10-11T21:50:38.909461+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <author>
    <name>Gregory Maxwell 2012-07-26 12:50:14+00:00</name>
  </author>
  <author>
    <name>Mike Hearn 2012-07-26 11:27:30+00:00</name>
  </author>
  <author>
    <name>Jeff Garzik 2012-07-26 05:55:18+00:00</name>
  </author>
  <author>
    <name>Jeff Garzik 2012-07-26 05:50:08+00:00</name>
  </author>
  <link href="bitcoin-dev/July_2012/001742_Bitcoin-script-opcode-counts.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2012/001741_Bitcoin-script-opcode-counts.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2012/001739_Bitcoin-script-opcode-counts.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2012/001740_Bitcoin-script-opcode-counts.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-July/001740.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Bitcoin script opcode counts</title>
    <updated>2025-10-11T21:50:38.909617+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-July/001740.html" rel="alternate"/>
    <published>2012-07-26T12:50:14+00:00</published>
    <summary>In a discussion thread from 2012, Mike Hearn expressed his curiosity about the use of OP_DEPTH and OP_CODESEPARATOR in Bitcoin scripts. Specifically, he wanted to see transaction IDs that were utilizing these opcodes. However, it was later discovered that all instances of OP_DEPTH were actually errors in P2Pool blocks. This was due to a bug in the software, which had been making small payments to scriptpubkey &quot;script&quot; unknowingly. The reason this went unnoticed for some time was because it was initially assumed to be an intentional action by a user utilizing p2sh.To fulfill the requestor's curiosity, Jeff Garzik, an American software developer associated with exMULTI, Inc., conducted a comprehensive query over the entire blockchain to inspect script opcode usage. This analysis has been made publicly available on GitHub. The query counted the number of times each opcode was used, providing data for both the main blockchain and testnet3.The data shared on GitHub by Jeff Garzik provides a detailed breakdown of how many times each opcode was used in the blockchain. The information is presented in an organized chart that lists all opcodes and their corresponding count numbers. Overall, there were 26 different opcodes used in the blockchain. The opcode with the highest frequency of use was OP_CHECKSIG, which had a count of 12,188,693. OP_DUP followed closely behind with a count of 11,699,991. While some opcodes like OP_4 and OP_NOP1 had minimal use, others like OP_PUSHDATA had a relatively high count of 32,350,369.In addition to sharing the data, Jeff Garzik also mentions his association with exMULTI, Inc. and provides his email address for further communication.</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP Draft: "ChillDKG: Distributed Key Generation for FROST"</title>
  <updated>2024-12-20T02:24:03.939080+00:00</updated>
  <author>
    <name>Tim Ruffing 2024-12-19 10:56:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP Draft: "ChillDKG: Distributed Key Generation for FROST"</title>
    <updated>2024-12-20T02:24:03.939112+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/17fc9514030108a99c14b66f2e5ef2d28f970593.camel@timruffing.de/T/#mc9a565f5ad6bb9a23d8d5bf48459786796fb2446" rel="alternate"/>
    <summary>Significant revisions and enhancements have been made to the BIP draft since its initial announcement, as outlined in a recent update. The changelog for version 0.2.0, dated December 19, 2024, highlights several critical improvements. These include fixing a security vulnerability where the CertEq signature did not previously cover the entire message, adding blame functionality with an investigation phase to identify faulty parties, ensuring that the threshold public key is Taproot-compatible by default, and allowing participants to encrypt their secret shares for themselves. This encryption approach uses symmetric encryption to minimize the overhead associated with ECDH computations. The updated BIP draft is accessible through the following [GitHub link](https://github.com/BlockstreamResearch/bip-frost-dkg).

The team continues to seek feedback across various aspects, particularly from potential users and applications such as wallets. They aim to understand how well their design decisions and API meet the needs of potential applications or what improvements are necessary to enhance compatibility. Ongoing tasks include specifying the wire format and adding test vectors. Collaboration with siv2r, the author of a BIP draft for FROST signing ([FROST signing BIP draft](https://github.com/siv2r/bip-frost-signing)), is underway to ensure both proposals remain synchronized and compatible.

A specific issue raised concerns the protocol specification's reliance on Python code and the "secp256k1proto" package, which provides prototype operations essential for the protocol but is not formally part of the BIP. Plans to make this package available via the Python Package Index (PyPI) are in motion, though questions remain regarding how to best integrate this dependency into the BIPs repository. Three options were considered: maintaining a "git-subtree" of secp256k1proto within the BIPs repo, using a "git submodule" for the same purpose, or merely referencing an external package. The preference leans towards the first option, emphasizing the importance of keeping the BIPs repository self-contained and serving as a comprehensive archive, despite recognizing that each option has its trade-offs regarding repository cleanliness and archival integrity.</summary>
    <published>2024-12-19T10:56:00+00:00</published>
  </entry>
</feed>

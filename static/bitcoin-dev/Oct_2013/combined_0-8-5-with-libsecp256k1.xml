<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 0.8.5 with libsecp256k1</title>
  <updated>2025-10-12T02:33:18.107331+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Oct_2013/003350_0-8-5-with-libsecp256k1.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003345_0-8-5-with-libsecp256k1.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003344_0-8-5-with-libsecp256k1.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2013/003343_0-8-5-with-libsecp256k1.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-October/003343.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-October/003343.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - 0.8.5 with libsecp256k1</title>
    <updated>2025-10-12T02:33:18.107422+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-October/003343.html" rel="alternate"/>
    <published>2013-10-11T11:41:41+00:00</published>
    <summary>On October 10, 2013, Mike Hearn expressed his interest in making a library usable behind a command line flag or config setting. The current plan is to provide a compile-time flag that enables the library while disabling the wallet and mining RPCs. This would create a safe state for test builds. The main concern at the time was malleability issues, but it was suggested that OpenSSL could be used to parse the signature into components while libsecp256k1 verifies them. It is worth noting that libsecp256k1 supports every signature that OpenSSL supports. Another potential issue could arise if a majority of the hash power ran on it. However, with recent relaying nodes enforcing canonical encodings, a softfork could be scheduled to require them inside blocks.Apart from malleability issues, there might be exploitable mistakes in the crypto code. While there are unit tests, errors are more likely to occur in edge cases that are not covered by randomized tests. Reviewing the code would be the best way to catch these errors. Pieter, in particular, welcomed people to look at the code for comments and suggestions.Warren Togami Jr. announced on the same day that a branch of Bitcoin 0.8.5 with sipa's secp256k1 had been created. Litecoin had already been using secp256k1 for several months. The purpose of this branch was to make it work with the old 0.8 makefiles, although there were no plans for merging it into production code. Cfields was working on autotoolizing it as a prerequisite before inclusion into bitcoin master, where it would be an option disabled by default. An untested win32 gitian build was available but not recommended for production wallet or mining uses.In response to this announcement, someone in #bitcoin-dev requested Bitcoin 0.8.5 with sipa's secp256k1. The library was optimized for elliptic curve digital signature algorithm (ECDSA) and significantly faster than OpenSSL. The main concern at the time was still the malleability issues. It was suggested that OpenSSL could be used to parse the signature into components, which libsecp256k1 would then verify.Lastly, Warren Togami Jr. shared a link to sipa's secp256k1 on the Bitcoin-dev mailing list. He highlighted that Litecoin had been using secp256k1 for several months already. Meanwhile, October webinars were announced, offering free Intel webinars to help accelerate application performance. These webinars covered topics such as MPI, OpenMP, advanced profiling, and more, with an emphasis on getting the most from the latest Intel processors and coprocessors.</summary>
  </entry>
</feed>
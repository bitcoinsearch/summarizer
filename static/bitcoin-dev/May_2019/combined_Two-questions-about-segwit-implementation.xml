<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Two questions about segwit implementation</title>
  <updated>2025-10-12T01:21:36.005298+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m1e261b72429dfb6a7004f29d8c0508c1f4bd3efc">
      <author>[bitcoin-dev] Two questions about segwit implementation Aymeric Vitte</author>
      <timestamp>2019-05-25T23:56:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Two questions about segwit implementation Aymeric Vitte" parent_id="mailing-list-2019-05-m1e261b72429dfb6a7004f29d8c0508c1f4bd3efc" anchor="m9aa4a7d0426c5dd8e569e62ae335330b2fc8c29c">
      <author>Johnson Lau</author>
      <timestamp>2019-05-26T14:33:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Johnson Lau" parent_id="mailing-list-2019-05-m9aa4a7d0426c5dd8e569e62ae335330b2fc8c29c" anchor="m2d583b489ed5b557c9aa5240ba81d299857832ae">
      <author>Aymeric Vitte</author>
      <timestamp>2019-05-26T16:18:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="3" position="3" reply_to="Aymeric Vitte" parent_id="mailing-list-2019-05-m2d583b489ed5b557c9aa5240ba81d299857832ae" anchor="mfc8670e4923a539a603427be13f4d05a9f195400">
      <author>Johnson Lau</author>
      <timestamp>2019-05-26T16:28:00.000Z</timestamp>
    </message>
    <message id="msg_5" depth="4" position="4" reply_to="Johnson Lau" parent_id="mailing-list-2019-05-mfc8670e4923a539a603427be13f4d05a9f195400" anchor="med63e7a1fd1f3e2da42badaa791e76f6124f5999">
      <author>Aymeric Vitte</author>
      <timestamp>2019-05-26T17:09:00.000Z</timestamp>
    </message>
    <message id="msg_6" depth="5" position="5" reply_to="Aymeric Vitte" parent_id="mailing-list-2019-05-med63e7a1fd1f3e2da42badaa791e76f6124f5999" anchor="mdbd0eef365893dcb56d941586c7929a17187f92d">
      <author>Johnson Lau</author>
      <timestamp>2019-05-26T17:24:00.000Z</timestamp>
    </message>
    <message id="msg_7" depth="1" position="6" reply_to="[bitcoin-dev] Two questions about segwit implementation Aymeric Vitte" parent_id="mailing-list-2019-05-m1e261b72429dfb6a7004f29d8c0508c1f4bd3efc" anchor="m072c27558959ca7091a6a6dfe207f03607952f3a">
      <author>Pieter Wuille</author>
      <timestamp>2019-05-26T17:54:00.000Z</timestamp>
    </message>
    <message id="msg_8" depth="1" position="7" reply_to="[bitcoin-dev] Two questions about segwit implementation Aymeric Vitte" parent_id="mailing-list-2019-05-m1e261b72429dfb6a7004f29d8c0508c1f4bd3efc" anchor="m0b827c6758a3a336c000ac37e75e2250b9bca580">
      <author>Thomas Kerin</author>
      <timestamp>2019-05-26T19:34:00.000Z</timestamp>
    </message>
    <message id="msg_9" depth="6" position="8" reply_to="Johnson Lau" parent_id="mailing-list-2019-05-mdbd0eef365893dcb56d941586c7929a17187f92d" anchor="m744eb573cd3d8c2d45087c673b01c54049028e51">
      <author>Aymeric Vitte</author>
      <timestamp>2019-05-26T21:17:00.000Z</timestamp>
    </message>
    <message id="msg_10" depth="1" position="9" reply_to="[bitcoin-dev] Two questions about segwit implementation Aymeric Vitte" parent_id="mailing-list-2019-05-m1e261b72429dfb6a7004f29d8c0508c1f4bd3efc" anchor="m3d26d6e8ef176b11e1d386bdb26f8d2907487cc3">
      <author>Kostas Karasavvas</author>
      <timestamp>2019-05-27T07:26:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/May_2019/016993_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016992_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016991_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016989_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016987_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016990_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016986_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016988_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016985_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2019/016982_Two-questions-about-segwit-implementation.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016982.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016982.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Two questions about segwit implementation</title>
    <updated>2025-10-12T01:21:36.006555+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016982.html" rel="alternate"/>
    <published>2019-05-27T07:26:21+00:00</published>
    <summary>Recently, Aymeric Vitte discovered that his implementation of segwit was incorrect due to a misinterpretation of the specifications. He mistakenly believed that scriptsig would be included in the witness data as it is, but he learned that op_pushdata is replaced by varlen. This realization led Vitte to question why OP_0 is represented as 00 in witness data instead of 0100 and whether this applies to other op_codes.The reason behind OP_0 being represented as 00 in witness data lies in the fact that op_pushdata allows for unsigned integers. The extra byte of 00 is used to specify that the value is zero. This clarification was provided in response to Vitte's question.Vitte also questioned the presence of a 00 length in segwit data for non-segwit inputs. It was explained that the witness data length is assumed to be the same as the inputs length. For non-segwit inputs, the 00 is needed to indicate that the witness data is empty. This information is necessary because validators have no way of knowing which inputs are segwit-enabled until they look up the UTXO set. Hence, there needs to be a way to inform the validator that the witness for a particular input is empty, and the 00 serves this purpose.The discussion on the Bitcoin development mailing list further delved into the topic of empty scriptPubKey or OP_1 being a use case. It was clarified that an empty scriptSig does not necessarily imply a segwit input. If the previous scriptPubKey is OP_1 and does not allow witness, it can still be spent with an empty scriptSig. Similarly, a scriptSig resembling a spend of P2SH-segwit also does not imply a segwit input. These points were raised and addressed by Johnson Lau in the discussion.One concern highlighted during the discussion was the lack of clear documentation on this topic. The participants noted the need for more comprehensive and precise specifications to avoid misunderstandings and incorrect implementations.The Bitcoin scriptSig, which populates the stack for opcodes to operate on, was also discussed. It was explained that witnesses are similar to the script stack and are passed in as the script stack. OP_0 pushes a zero length value onto the stack, while OP_1 pushes 0x01, serialized as 0101. The witness structure can be considered as vector&lt;stack&gt;, and its length must match the number of inputs.In summary, Aymeric Vitte discovered errors in his segwit implementation and raised questions about the representation of OP_0 in witness data and the presence of a 00 length in segwit data for non-segwit inputs. The discussion clarified that OP_0 is represented as 00 to indicate zero length and that the 00 length is necessary to inform validators that the witness for a specific input is empty. The conversation also addressed the use cases of empty scriptPubKey and OP_1. The need for clearer documentation on this topic was emphasized, and the functioning of Bitcoin scriptSig and witness structures was explained.</summary>
  </entry>
</feed>
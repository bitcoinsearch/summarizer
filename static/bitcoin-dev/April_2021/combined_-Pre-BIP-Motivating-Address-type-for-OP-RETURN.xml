<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [Pre-BIP] Motivating Address type for OP_RETURN</title>
  <updated>2025-10-11T02:28:25.659456+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/April_2021/018857_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018856_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018855_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018854_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018853_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018845_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2021/018822_-Pre-BIP-Motivating-Address-type-for-OP-RETURN.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018822.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - [Pre-BIP] Motivating Address type for OP_RETURN</title>
    <updated>2025-10-11T02:28:25.659565+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018822.html" rel="alternate"/>
    <published>2021-04-25T00:25:30+00:00</published>
    <summary>In a discussion on the bitcoin-dev mailing list, the topic of introducing a non-transaction data structure that allows for storing data on-chain while maximizing payload size versus on-chain size was explored. The proposal aims to ensure that using this data structure is almost as expensive in use per payload-byte as the next-cheapest alternative, which currently is using OP_RETURN with weight units. Concerns were raised regarding the 10,000-byte limit when EvalScript is run and the potential abuse of bech32m addressed outputs. The benefits of using OP_RETURN include allowing more data in scriptSig, exemption from the dust limit, and potential future use for metadata like stealth addresses. However, there are also concerns about block chain graffiti. A demonstration was provided showing the creation of an 11,000 byte OP_RETURN on regtest.The discussion further delved into the use of OP_RETURN addresses in Bitcoin. While some participants expressed annoyance with having to program around them, they acknowledged their historical significance and advantages over other address types in terms of allowing more data in scriptSig and being exempt from the dust limit. The conversation also touched on the structure of PSBTs and the possibility of creating a standard OP_RETURN address format. It was emphasized that the motivation behind such a standard and its potential impact on block chain graffiti should be further considered.In an email conversation, Dave discussed with Jeremy the concept of script commitments and the max size of a scriptsig/scriptpubkey. Jeremy inquired about the possibility of making inappropriate messages using bech32m addressed outputs. Dave explained that people have done it in the past with base58check, but an IsStandard OP_RETURN attempts to minimize this abuse by being cheaper. The conversation also touched on the PSBT interface and the convenience of having a uniform handling for strongly typed RPC bindings. Dave expressed interest in the idea of an address format for OP_RETURN as long as it is not underwhelmingly motivated or leads to block chain graffiti.The bitcoin-dev mailing list discussion focused on the use of OP_RETURN outputs. Concerns were raised about the wide range of possibilities that can be represented by script and the potential for offensive or illegal text in OP_RETURN data. Suggestions were made to default to meaningless representations of OP_RETURN data, such as displaying it in hex, to discourage inappropriate usage. The discussion also explored whether the OP_RETURN output should have a fixed length or support arbitrary length strings, and whether it should be possible to pay into such an OP_RETURN or categorize them as non-payable addresses. It was argued that including arbitrary data in the blockchain is not currently useful for typical end-users, but applications can already call create(psbt|rawtransaction) with the 'data' field. The increasing transaction fees were noted to push uses of OP_RETURN off the network or into more efficient constructions, so optimizing its use may not be necessary. However, some uses like stealth addresses or open timestamps may still warrant a standard address type.Jeremy Rubin suggested the need for an address type for OP_RETURN. He highlighted the challenge of handling common classes of user transactions generically while dealing with OP_RETURN. He argued that OP_RETURN should be represented by an Address type to simplify types for programs. The counterargument was that OP_RETURN, being unspendable and usually proprietary in purpose, should not have an address. Jeremy countered by stating that Addresses should represent things commonly created outputs for, and OP_RETURN is one such thing. He proposed design constraints for the proposed OP_RETURN address type and questioned whether it should be human-readable and checksummed or encoded, have a fixed length or support arbitrary length strings, and be payable or non-payable.Overall, the discussions revolved around the use of OP_RETURN addresses in Bitcoin, addressing concerns such as the potential for abuse, block chain graffiti, and the need for a standard address format. Different perspectives were presented, highlighting potential benefits and drawbacks of implementing an address type for OP_RETURN.</summary>
  </entry>
</feed>
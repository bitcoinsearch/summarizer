<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Possible Solution To SM Attack</title>
  <updated>2025-10-17T02:32:47.438150+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Nov_2013/003592_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003591_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003590_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003589_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003588_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003587_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003585_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003584_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2013/003583_Possible-Solution-To-SM-Attack.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Possible Solution To SM Attack</title>
    <updated>2025-10-17T02:32:47.438272+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-November/003583.html" rel="alternate"/>
    <published>2013-11-06T00:37:49+00:00</published>
    <summary>In the context presented, Alice and Bob are miners in the Bitcoin network. Alice secretly mines on a different block (A2) while withholding this information from other miners. Bob broadcasts his block (A1) assuming that Alice will send her previously mined block to all other miners. However, by the time Bob's block reaches other miners, most of them have already received Block A1, making Bob's block likely to be orphaned. To gain an advantage, Alice waits until another miner finds a block before releasing her previously mined block. This allows her to mine longer on a valid block. One potential solution suggested is to consider either the total transactions or fees for block acceptance. It is unclear if there is a problem that needs fixing.The conversation also discusses the issue of choosing the block with the lowest hash when mining in Bitcoin. Quinn Harris argues that this may not be the best option as both good and bad miners have an equal probability of finding a lower hash. Drak suggests making it unpredictable by choosing based on a hash of the blockhash and selecting the lowest result. This way, Alice can calculate the hash of her blockhash and determine the probability of Bob's block being used. The complexity does not change the decision-making process, as Alice should mine the next block if hers is more than 50% likely to be used. Otherwise, she should work to find a better current block.Gavin Andresen expresses his desire to be convinced of a real-world problem existing before considering potential solutions. He requests further analysis of the proposed selfish-mining algorithm at a specific share-of-network and gamma=0. He struggles to reproduce the findings in the paper, especially when considering the &quot;opportunity cost&quot; of working on more blocks in the private chain that might be orphaned. Gavin admits that he may be missing something obvious.In another conversation, Gregory Maxwell and Drak discuss the issue of fair block selection. Drak suggests choosing the block with the lower target if two blocks are broadcast within a certain period. Gregory points out a flaw in this logic, stating that it incentivizes miners to hurry up and release their blocks if they have an unusually low number. Gregory proposes a two-step solution: first, deciding whether high or low wins based on the leading bytes from hash(alice)+hash(bob), and second, choosing the winner based on the higher or lower hash value of Alice and Bob's hashes. This eliminates the incentive to release a block with an unusually low hash value.A proposal is made to randomly choose the winning block in the case of two blocks being broadcast within a certain period. This is considered fair and simple. However, concerns are raised about the incentive for miners to quickly release blocks with unusually low values. Non-first-block-heard strategies could lead to significant increases in large reorganizations and perverse incentives. The author mentions negative results from simulating these strategies in the past.Quinn Harris criticizes the idea of choosing the block with the lowest hash as the best option in blockchain. Both good and bad miners have an equal probability of finding a lower hash. However, after Alice finds a block, she can determine the probability of someone else finding a lower value hash that meets the difficulty requirement. Drak suggests adding another factor by deciding the rules of whether higher or lower wins based on hashing both competing blockhashes.On November 5, 2013, a proposed solution suggests randomly choosing the winning block when multiple blocks are received within a certain time frame. This ensures randomness and fairness, and it makes it harder for an attacker to manipulate the outcome by propagating blocks first and ensuring the smallest hash.Alice has an advantage in the Bitcoin network as she can hear of a block before other miners do. She uses this advantage to gain an unfair advantage by withholding her blocks and only revealing them when it benefits her. To counter this, a possible solution is to mine on the block with the lowest hash if a certain number of blocks built from the same previous block are received within a specific time frame. Alice must also ensure that her blocks have the smallest hash, but decreasing her target to achieve this would take longer to find a valid block, negating her time advantage.</summary>
  </entry>
</feed>
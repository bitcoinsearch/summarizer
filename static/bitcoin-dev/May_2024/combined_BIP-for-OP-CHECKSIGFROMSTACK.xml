<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP for OP_CHECKSIGFROMSTACK</title>
  <updated>2025-09-26T09:48:22.982284+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m4d3d102ece8e6e86938d8482193f132f2e345a9c">
      <author>BIP for OP_CHECKSIGFROMSTACK Brandon Black</author>
      <timestamp>2024-04-25T05:12:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="BIP for OP_CHECKSIGFROMSTACK Brandon Black" parent_id="mailing-list-2024-04-m4d3d102ece8e6e86938d8482193f132f2e345a9c" anchor="mfd0d3cd1c351cf61e87288f3e752562f89a84132">
      <author>Andrew Poelstra</author>
      <timestamp>2024-04-25T11:44:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="1" position="2" reply_to="BIP for OP_CHECKSIGFROMSTACK Brandon Black" parent_id="mailing-list-2024-05-m4d3d102ece8e6e86938d8482193f132f2e345a9c" anchor="mba6f68ecb46020b6c83700d5dc1f7c4b885c6afc">
      <author>Brandon Black</author>
      <timestamp>2024-05-14T21:55:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/May_2024/mba6f68ecb46020b6c83700d5dc1f7c4b885c6afc_BIP-for-OP-CHECKSIGFROMSTACK.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2024/mfd0d3cd1c351cf61e87288f3e752562f89a84132_BIP-for-OP-CHECKSIGFROMSTACK.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2024/m4d3d102ece8e6e86938d8482193f132f2e345a9c_BIP-for-OP-CHECKSIGFROMSTACK.xml" rel="alternate"/>
  <link href="https://gnusha.org/pi/bitcoindev/ZipCKAcV49-xPhSs@camus/T/#m4d3d102ece8e6e86938d8482193f132f2e345a9c" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP for OP_CHECKSIGFROMSTACK</title>
    <updated>2025-09-26T09:48:22.982850+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/ZipCKAcV49-xPhSs@camus/T/#m4d3d102ece8e6e86938d8482193f132f2e345a9c" rel="alternate"/>
    <published>2024-05-14T21:55:00+00:00</published>
    <summary>The email from Andrew Poelstra, Director of Research at Blockstream, sheds light on considerations regarding the Bitcoin Improvement Proposal (BIP) focusing on enhancements in bitcoin script capabilities through the introduction of new opcodes related to cryptographic signature verification. These discussions are pivotal for understanding the proposal's implications on batch verification and the CHECKSIG FROM STACK (CSFS) functionalities. Specifically, Poelstra highlights the potential inclusion of a new opcode, CHECKSIGFROMSTACKADD (CSFSA), inspired by advanced miniscript applications presented by Rob Hamilton. The consideration for CSFSA stems from its anticipated common use and feasibility of implementation. Additionally, there's a debate on making CHECKSIGFROMSTACKVERIFY exclusively available to tapscript to align with BIP119 and CTV's objectives within legacy scripts.
Poelstra articulates concerns about maintaining consistency between the sets of public keys recognized by CSFS and those accepted by CHECKSIG operations. He suggests that diverging the types of public keys used by these functions could complicate future soft forks and development trajectories. Emphasizing uniformity, Poelstra argues against the necessity of differentiating public key sets for these operations, given the initial proposal's reliance on a single set for both functionalities. This stance underscores a broader reflection on the proposal's architectural decisions and their long-term implications on bitcoin's scripting language and operational integrity.
The proposal introduces OP_CHECKSIGFROMSTACK and OP_CHECKSIGFROMSTACKVERIFY opcodes, aiming to extend bitcoin's script utility by allowing cryptographic checks against arbitrary data. This initiative represents a significant shift towards enhancing script functionalities beyond traditional transaction verification methods. The proposed opcodes, designed to conform with BIP 340 standards for Schnorr signatures, bring nuanced changes to bitcoin's scripting environment. They emphasize compatibility across script types, including legacy and segwitv0, through a soft-fork deployment strategy. The technical details underline strict adherence to public key size limitations and signature validation processes, reflecting a meticulous approach to integrating these opcodes without disrupting the existing ecosystem.
Further discussions in the proposal articulate the rationale behind distinct design choices, such as leveraging NOP5 for OP_CHECKSIGFROMSTACKVERIFY to ensure broad script compatibility and avoiding pre-hash message modifications in line with BIP 340 verification practices. The document also explores potential applications of the new opcodes, like improving Lightning Network symmetry and facilitating script-based delegation, highlighting their contribution to bitcoin's flexibility and functional depth. A reference implementation available on GitHub ([bitcoin/bitcoin29270](https://github.com/bitcoin/bitcoin/pull/29270)) offers a practical foundation for assessing the proposal's technical viability and alignment with bitcoin's developmental ethos.
In essence, the proposal for introducing OP_CHECKSIGFROMSTACK and OP_CHECKSIGFROMSTACKVERIFY opcodes encapsulates a forward-looking enhancement to bitcoin's scripting capabilities. It carefully balances innovation with respect for the cryptocurrency's foundational principles, providing a detailed blueprint for augmenting bitcoin's transaction verification mechanisms and overall utility.</summary>
  </entry>
</feed>
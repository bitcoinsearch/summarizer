<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP OP_CHECKTEMPLATEVERIFY</title>
  <updated>2025-09-26T15:33:21.900667+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="7" position="0" anchor="m48cdb494ae33ff00bdeedbae0e33c020b78d8844">
      <author>Dmitry Petukhov</author>
      <timestamp>2020-02-14T11:18:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="8" position="1" reply_to="Dmitry Petukhov" parent_id="mailing-list-2020-02-m48cdb494ae33ff00bdeedbae0e33c020b78d8844" anchor="m2a59506ecf1699f6adddfe9967e2dc18fc5f8825">
      <author>Jeremy</author>
      <timestamp>2020-02-14T19:16:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="8" position="2" reply_to="Dmitry Petukhov" parent_id="mailing-list-2020-02-m48cdb494ae33ff00bdeedbae0e33c020b78d8844" anchor="m1ad038d262a35babe108c80c74989d085001de53">
      <author>ZmnSCPxj</author>
      <timestamp>2020-02-15T00:24:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="1" position="3" reply_to="[bitcoin-dev] BIP OP_CHECKTEMPLATEVERIFY Jeremy" parent_id="mailing-list-2020-06-m6d54421e5d622f7e6ed8821a4d640916c3dbcb3a" anchor="m4f84298c254ea621152657706237a13091b8dffb">
      <author>Joachim Strömbergson</author>
      <timestamp>2020-06-07T16:51:00.000Z</timestamp>
    </message>
    <message id="msg_5" depth="2" position="4" reply_to="Joachim Strömbergson" parent_id="mailing-list-2020-06-m4f84298c254ea621152657706237a13091b8dffb" anchor="m5194eb1d214fbfa547c6249a06dda72b34375578">
      <author>Jeremy</author>
      <timestamp>2020-06-07T22:45:00.000Z</timestamp>
    </message>
    <message id="msg_6" depth="3" position="5" reply_to="Jeremy" parent_id="mailing-list-2020-06-m5194eb1d214fbfa547c6249a06dda72b34375578" anchor="mdbf35f79a60fa1a579c8bcde41fa7f1f1e308017">
      <author>Dmitry Petukhov</author>
      <timestamp>2020-06-08T06:05:00.000Z</timestamp>
    </message>
    <message id="msg_7" depth="4" position="6" reply_to="Dmitry Petukhov" parent_id="mailing-list-2020-06-mdbf35f79a60fa1a579c8bcde41fa7f1f1e308017" anchor="md1d7081e666f2e8db1362c7afcfda3d5c6051f2d">
      <author>[bitcoin-dev] [was BIP OP_CHECKTEMPLATEVERIFY] Fee Bumping Operation Jeremy</author>
      <timestamp>2020-06-08T06:43:00.000Z</timestamp>
    </message>
    <message id="msg_8" depth="5" position="7" reply_to="[bitcoin-dev] [was BIP OP_CHECKTEMPLATEVERIFY] Fee Bumping Operation Jeremy" parent_id="mailing-list-2020-06-md1d7081e666f2e8db1362c7afcfda3d5c6051f2d" anchor="mba158c469fe89358192a62a199766a57ef46df7a">
      <author>Dmitry Petukhov</author>
      <timestamp>2020-06-08T07:15:00.000Z</timestamp>
    </message>
    <message id="msg_9" depth="9" position="8" reply_to="Jeremy" parent_id="mailing-list-2020-09-m2a59506ecf1699f6adddfe9967e2dc18fc5f8825" anchor="m49b8e20b4fee48ebe3c09ba03f89389da8a65bf5">
      <author>Dmitry Petukhov</author>
      <timestamp>2020-09-03T14:42:00.000Z</timestamp>
    </message>
    <message id="msg_10" depth="10" position="9" reply_to="Dmitry Petukhov" parent_id="mailing-list-2020-09-m49b8e20b4fee48ebe3c09ba03f89389da8a65bf5" anchor="md5a75e143944060b9e890ce2b77b74fe1a44d558">
      <author>Jeremy</author>
      <timestamp>2020-09-03T17:34:00.000Z</timestamp>
    </message>
    <message id="msg_11" depth="11" position="10" reply_to="Jeremy" parent_id="mailing-list-2020-09-md5a75e143944060b9e890ce2b77b74fe1a44d558" anchor="mcacf09e5073794e8dd48e8a87092bd46653dbac9">
      <author>Jeremy</author>
      <timestamp>2020-09-03T17:47:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Sept_2020/018156_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2020/018155_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2020/018154_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017939_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017935_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2020/017934_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2020/017631_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2020/017627_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2020/017626_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017527_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017526_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017525_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017498_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017496_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2019/017494_BIP-OP-CHECKTEMPLATEVERIFY.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018156.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP OP_CHECKTEMPLATEVERIFY</title>
    <updated>2025-09-26T15:33:21.901972+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018156.html" rel="alternate"/>
    <published>2020-09-03T17:47:35+00:00</published>
    <summary>In a discussion between Jeremy Rubin and Dmitry Petukhov, the concept of an &quot;inverse timelock&quot; was explored. The idea involves a revocation UTXO becoming anyone-can-spend after a timeout and bearing some non-dust amount. Before the timelock expiration, it can only be spent along with the covenant-locked 'main' UTXO via a signature or mutual covenant. After the revocation UTXO is spent, the covenant path that commits to having it in the inputs becomes unspendable, constituting an &quot;inverse timelock.&quot; CTV does not enable this because it does not commit to the inputs, leading to a hash cycle for predicting the output's TXID. However, setting up this scheme requires an ordering around when the tx intended to be the inverse lock is set up before creating the tx using it.On September 3, 2020, Dmitry Petukhov proposed an idea for an &quot;inverse timelock&quot; that could be made almost-certainly automatic. This would involve a revocation UTXO becoming anyone-can-spend after a timeout and bearing some non-dust amount. Before the timelock expiration, it would only be spendable along with the covenant-locked 'main' UTXO via a signature or mutual covenant. After the timeout expires, a multitude of entities would be incentivized to spend this UTXO because it would be free money for them. It would likely be spent by a miner who could replace the spending transaction with their own and claim the amount. Once the revocation UTXO is spent, the covenant path that commits to having it in the inputs would become unspendable, effectively constituting an &quot;inverse timelock.&quot;However, CTV does not enable this because it does not commit to the inputs. Otherwise, there would be a hash cycle for predicting the output's TXID.The context discusses a proposed feature called &quot;inverse timelock&quot; that incentivizes spending a revocation UTXO after a timeout, making it unspendable. This feature has potential use cases in various covenant schemes like trustless lending and access-revocable vaults. The ability to commit to scriptSig of a non-segwit input could also be used for on-chain control of spending authorization, effectively revoking the ability to spend a certain input via CTV path, and alternate spending paths should be used.The implications of this feature on Bitcoin's behavior during reorgs were discussed, with some arguing that new rules violating certain principles should be introduced cautiously. A draft of changes for CTV was prepared but has not been updated yet, leaving time for further feedback.A member of the bitcoin-dev group, Jeremy, proposed a new way to contribute fees to another transaction chain as an observer. This method can help solve issues related to application-DoS attacks beyond child-pays-for-parent (CTV). He has a design for this idea but is not ready to share it yet. Another member suggested the 'Pay for neighbor' (PFN) transaction, where a transaction that is not directly a child of another transaction can pay fees for other transactions. It would be like a &quot;ghost child&quot; transaction and could only be mined after its &quot;ghost parents&quot; are confirmed. The PFN transaction would require a hard fork, but Anthony Towns suggested making it a soft fork by putting the txids of the ghost parents into taproot annex. If some of the ghost parents are confirmed, the miners can get more fees than necessary, similar to CPFP. The mempool code needs to adjust the relationships between parent/child transactions for this ghost relationship idea. However, there could be complications regarding the transaction package size, which requires further analysis.Recently, there have been some refinements to the BIP draft for OP_CHECKTEMPLATEVERIFY and the name has been changed. The opcode specification has also been changed to use the argument off of the stack with a primitive constexpr/literal tracker rather than script lookahead. It permits future soft-fork updates to loosen or remove &quot;constexpr&quot; restrictions. RPC functions are under preliminary development, to aid in testing and evaluation of OP_CHECKTEMPLATEVERIFY. In terms of today's scenario, exchanges can do this as a CTV txn that is one initial confirmation to a single output, and then that output expands to either all the payments in the batch, or to a histogram of single-layer CTVs based on priority/amount being spent. Exchanges pay reasonable fees for the transactions so it can expect to at least get to the bottom range of the mempool for children, and top of the mempool for the parent. Business wallets (like exchanges) are able to credit deposits from CTV trees without requiring full expansion. For long-dated futures, most likely the desirable radix for a tree is something like 4 or 5 which minimizes the amount of work on an individual basis and mempool broadcast</summary>
  </entry>
</feed>
<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Bip 32 Question</title>
  <updated>2025-10-16T02:34:19.222897+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/June_2015/008605_Bip-32-Question.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2015/008599_Bip-32-Question.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Bip 32 Question</title>
    <updated>2025-10-16T02:34:19.222987+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008599.html" rel="alternate"/>
    <published>2015-06-12T19:42:46+00:00</published>
    <summary>In a discussion about BIP32, James Poole is seeking clarification on the meaning of &quot;n&quot; in the context of an algorithm. Specifically, he is referring to the line in the BIP32 definition that states &quot;The returned child key ki is parse256(IL) + kpar (mod n).&quot; To understand the role of &quot;n,&quot; James has provided a link to the Bitcoin wiki page for Secp256k1, which explains that &quot;n&quot; represents the curve order. This step is essential to ensure that the user stays on the curve. The function secp256k1_ec_privkey_tweak_add from libsecp256k1 automatically handles this process, but for those using OpenSSL or non-EC math libraries, it may need to be done manually. By asking for help, James hopes to gain a clearer understanding of how &quot;n&quot; functions within the algorithm. For further information, you can refer to the provided links.</summary>
  </entry>
</feed>
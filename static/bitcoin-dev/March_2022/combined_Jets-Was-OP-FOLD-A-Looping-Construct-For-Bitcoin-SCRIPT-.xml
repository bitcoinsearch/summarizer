<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Jets (Was: `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT)</title>
  <updated>2025-10-12T02:38:34.527385+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/March_2022/020136_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020132_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020114_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020098_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020100_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2022/020078_Jets-Was-OP-FOLD-A-Looping-Construct-For-Bitcoin-SCRIPT-.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020078.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020078.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Jets (Was: `OP_FOLD`: A Looping Construct For Bitcoin SCRIPT)</title>
    <updated>2025-10-12T02:38:34.527493+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-March/020078.html" rel="alternate"/>
    <published>2022-03-16T15:59:00+00:00</published>
    <summary>The conversation between Billy and ZmnSCPxj revolves around the implementation of a cleanstack rule and the introduction of jets in the Bitcoin network. The cleanstack rule would prevent scripts from validating if more than just a true value is left on the stack, and there is also a stronger cleanstack rule where both the stack and alt stack are completely empty. The minimum critical mass for a jet to be beneficial is when two nodes supporting it are connected, which depends on the size of the script.There are discussions about the implementation of jets without a soft fork and the potential disincentives they may create. It is suggested that individual sections of the network could decide which jets they want to support without requiring a soft fork for each one. Higher-order function ability could also be added to jets without additional soft forks.The conversation also considers the use of a constants table in the SCRIPT puzzle instead of the witness solution. It is proposed that the language could be redesigned so that OP_PUSH is not in the opcode stream, but instead, a separate table of constants is attached to the actual SCRIPT. This would enhance the usefulness of jets.Challenges faced in implementing jets include increasing costs and the risk of hacks. To address these issues, the author suggests replacing most of the &quot;OP_PUSH&quot; opcodes with variants that look up a static table at the start of the executable script body. This would make it easier to incorporate existing jets into new scripts without manipulating the stack in a way that the jet expects. Although this proposal adds complexity, it could potentially reduce overhead costs and make jets more user-friendly.Overall, the conversation explores various aspects of implementing jets in Bitcoin, including their benefits, critical mass, disincentives, higher-order function ability, constant table implementation, and challenges. The goal is to optimize network efficiency, reduce transaction fees, and improve the Bitcoin scripting language.</summary>
  </entry>
</feed>
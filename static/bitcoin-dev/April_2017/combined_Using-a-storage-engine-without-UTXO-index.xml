<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Using a storage engine without UTXO-index</title>
  <updated>2025-10-12T02:36:22.736825+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/April_2017/014135_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014134_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014132_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014128_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014114_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014113_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014112_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014109_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014107_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014106_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014104_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014103_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014102_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014101_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014099_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014087_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014083_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014081_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014079_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014078_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014075_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014074_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014073_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014072_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014071_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014069_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014067_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014064_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014061_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014056_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014054_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014055_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014053_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014051_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2017/014048_Using-a-storage-engine-without-UTXO-index.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014048.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014048.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Using a storage engine without UTXO-index</title>
    <updated>2025-10-12T02:36:22.736932+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-April/014048.html" rel="alternate"/>
    <published>2017-04-11T10:04:01+00:00</published>
    <summary>In a recent email discussion on the bitcoin-dev mailing list, Tom Harding suggested that maintaining a transaction index in a network with multiple nodes could enable light node applications to verify the existence and spentness of transaction outputs (TXOs). However, Gregory Maxwell pointed out that additional commitment structures, such as those proposed by Peter Todd in his stxo/txo commitment designs, would be necessary for this to work effectively. These commitment structures would improve light nodes by detecting invalid transactions before they are mined.Tomas, a developer, stressed the importance of protocol/implementation separation in response to a previous comment. He explained that while UTXO data is always a resource cost for script validation, the ratio of different costs can vary across implementations. In Bitcrust, if the last few blocks contain many inputs, the peak load verification for these blocks is slower compared to Core. Another user suggested limiting the number of 1-in-100-out transactions to prevent UTXO growth and improve efficiency. They also mentioned experimenting with regtest to compare the performance of Bitcrust with Core and asked about the minimum disk and memory usage in Bitcrust compared to Core's pruning mode.The conversation between Gregory Maxwell and Tom Harding focused on transaction indexes and light nodes. Harding suggested that maintaining a transaction index in a network of nodes would allow light node applications to request peers to prove the existence and usage of TXOs. Maxwell added that this would require additional commitment structures proposed by Peter Todd. The email exchange also included a link to Todd's proposal for delayed txo commitments.The discussion between Gregory Maxwell and Tomas revolved around the resource costs and latency-related costs in Bitcoin Core. Tomas noted that Bitcrust has slower peak load verification if the last few blocks contain many inputs, unlike Core. Tomas argued that the minimal disk storage required in Bitcoin cannot be less than all the unspent outputs. He mentioned that improvements like improving locality or keeping spentness in memory do not change the fact that UTXO data remains a significant long-term resource cost. However, during peak load block validation with pre-synced transactions, accessing storage can be minimized. The conversation also touched on the misaligned incentives and the impact of small outputs on long-term costs.The bitcoin-dev mailing list discussion debated whether application-layer caching is necessary or if allowing the operating system to use disk caching or memory map caching would be more effective. It was mentioned that an explicit cache is beneficial on lower memory systems but actually a de-optimization on high RAM systems. Eric Voskuil suggested that reducing the need for paging can be achieved through caching, while another participant argued that sorting data based on frequency of use would beat any application-layer cache. They suggested leaving caching decisions to the operating system based on spatial and temporal locality of reference.The discussion on optimization for lower memory platforms focused on reducing the need for paging through caching. Bram Cohen suggested maximizing memory usage and minimizing disk access, but others disagreed, stating that an application-layer cache only makes sense with a clear distinction between often-used and not often-used data. They emphasized the importance of proper spatial and temporal locality of reference and letting the operating system make caching decisions.The discussion on the long-term resource requirements of proposals with regards to unspent output data questioned whether cramming as much as possible into memory and minimizing disk access is the best approach. Bram Cohen asked if this optimization overlooks considerations such as startup time, warm-up time, shutdown time, fault tolerance, etc. The discussion highlighted the trade-offs and complexities involved in managing these considerations.Tomas introduced Bitcrust, a new Bitcoin implementation that uses a different approach to indexing for verifying the order of transactions. Instead of using an index of unspent outputs, double spends are verified using a spend-tree. Bitcrust has shown excellent performance characteristics, particularly in peak load order validation. The discussion also mentioned the possibility of integrating Bitcrust into Bitcoin Core as a selectable feature.Tomas proposed a solution to address the issue of UTXO growth in the Bitcoin protocol by reversing the costs of outputs and inputs. However, there are concerns about the long-term resource requirements and whether this protocol improvement is worth considering.Overall, the discussions on the bitcoin-dev mailing list covered various topics related to transaction indexes, resource costs, caching, and optimization for lower memory platforms. The conversations provided insights into different perspectives and considerations in Bitcoin development.In another conversation, Tomas explained how Bitcrust separates script validation from order validation and deals with changing validity rules based on block height. Script validation requires a (U)TXO database that consumes around 2GB of outputs. Order validation, on the other hand, requires a spent-index (~200MB) and a spent-tree (~500MB). Tomas mentioned that pruning the 5.7GB full spend tree is not worth it at the moment. When asked about how the spent index rejects a transaction that claims to spend an output that never existed, Tomas did not provide a direct answer.Tomas has</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Revisiting secp256r1 signatures (i.e. P256, mobile HSM support)</title>
  <updated>2025-08-10T03:12:57.889390+00:00</updated>
  <author>
    <name>Josh Doman 2025-08-08 20:48:00+00:00</name>
  </author>
  <author>
    <name>conduition 2025-07-23 15:40:00+00:00</name>
  </author>
  <author>
    <name>Greg Tonoski 2025-07-23 08:49:00+00:00</name>
  </author>
  <author>
    <name>Josh Doman 2025-07-22 21:44:00+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2025/m63df40d4db29bafd8d9322c4b2db226619655f5d_Revisiting-secp256r1-signatures-i-e-P256-mobile-HSM-support-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2025/mb4648d11e6487def3a9204054abf8fe08f23543a_Revisiting-secp256r1-signatures-i-e-P256-mobile-HSM-support-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2025/med2bdf93c794fea987bc354e30f3aa6aa76fc067_Revisiting-secp256r1-signatures-i-e-P256-mobile-HSM-support-.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2025/mca69ad88296255cb304bb3f4c79e85cde6424d81_Revisiting-secp256r1-signatures-i-e-P256-mobile-HSM-support-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Revisiting secp256r1 signatures (i.e. P256, mobile HSM support)</title>
    <updated>2025-08-10T03:12:57.889439+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/8fbe1fe3-425d-4056-8387-993f6ecc1been@googlegroups.com/T/#u#mca69ad88296255cb304bb3f4c79e85cde6424d81" rel="alternate"/>
    <summary>The discourse begins by examining the intricate process and considerable time required to integrate a new signature algorithm, such as P256, into Bitcoin's protocol. This endeavor necessitates widespread community agreement, the creation of a high-quality implementation comparable to the existing libsecp256k1, and the successful execution of a soft fork. These steps are set against the backdrop of ongoing developments in cryptographic technology, including initiatives like BIP360 and discussions on post-quantum cryptography, suggesting a potential shift in focus toward these emerging technologies before P256 could be fully implemented. Moreover, the emergence of quantum computing could potentially undermine the relevance of such efforts if quantum capabilities develop more rapidly than anticipated.

Attention then shifts to the WebAuthn standard and its suitability for future-proofing Bitcoin against advancements in cryptography, especially in the realm of hardware security modules (HSMs) and post-quantum cryptographic standards. The dialogue suggests that aligning WebAuthn's signature mechanisms with Bitcoin's evolving cryptographic requirements might offer a viable path towards enhancing long-term security and functional compatibility. However, concerns are raised about WebAuthn's ability to meet the specific needs of Bitcoin, particularly regarding user autonomy, the provision of deterministic backup solutions, and the management of multiple addresses, highlighting the challenges of adapting a system designed for centralized web authentication to a decentralized and user-centric platform like Bitcoin.

The conversation also revisits the topic of incorporating support for secp256r1 (P256) within Bitcoin, a subject that has not seen significant discussion since 2011 and 2013. Despite the lack of recent discourse, the widespread adoption of P256 across the internet and within mobile device architectures presents a compelling case for reconsideration. Such integration could unlock new possibilities for millions of users to self-custody Bitcoin through secure enclave technologies available on contemporary mobile platforms, which currently do not support Bitcoin's secp256k1 curve. Historical apprehensions regarding the potential for a NIST backdoor in P256 have been overshadowed by the potential benefits of adoption, including improved user onboarding, enhanced wallet security and accessibility, and reduced costs for collaborative multi-signature operations. Additionally, the advent of Tapscript introduces technical pathways for accommodating P256, distinguishing between keys requiring P256 ECDSA signatures and those utilizing Schnorr signatures over secp256k1. Although validation speed for P256 is slower, proposed adjustments to validation weight costs could address this concern, underscoring the feasibility of integrating P256 support into Bitcoin. This reevaluation of P256's role in Bitcoin not only contemplates its direct benefits for user experience and security but also situates these advantages within the broader context of Bitcoin's technological evolution and the industry-wide transition towards more secure cryptographic standards.</summary>
    <published>2025-08-08T20:48:00+00:00</published>
  </entry>
</feed>

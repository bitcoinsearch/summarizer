<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>[BIP Proposal] Add BIP-0093 (Codex32) as application to BIP-0085</title>
  <updated>2025-09-01T02:56:44.141682+00:00</updated>
  <author>
    <name>Ben Westgate 2025-08-31 22:25:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>[BIP Proposal] Add BIP-0093 (Codex32) as application to BIP-0085</title>
    <updated>2025-09-01T02:56:44.141721+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/774faeb9-6c6b-4545-8071-56ec03e78cd0n@googlegroups.com/T/#u#mdf2c201e4c857dde1287e40d90b8cca84e3667be" rel="alternate"/>
    <summary>Ben Westgate, a contributor with a focus on deterministic wallet backups and seed management, has proposed an integration of BIP-0093 (codex32), as detailed in the proposal found at [BIP-0093](https://github.com/bitcoin/bips/blob/master/bip-0093.mediawiki), with BIP-0085, which is aimed at creating deterministic entropy from BIP32 Keychains as seen in [BIP-0085](https://github.com/bitcoin/bips/blob/master/bip-0085.mediawiki). This initiative seeks to utilize BIP-0085 for generating codex32 backups directly from BIP-0032 master keys, thereby expanding the application framework of BIP-0085 beyond its current use case with BIP-39.

Codex32 is introduced under BIP-93 as a method for encoding that includes human-readable formats, checksumming, and share indexing. These features are designed explicitly for Shamir's Secret Sharing (SSS) backups of BIP-0032 seeds. The proposition underscores a systematic approach towards generating codex32 strings through BIP-85, highlighting codex32's advantages such as error correction capabilities, hand verification, identifiers, and secret sharing attributes over BIP-39.

The rationale behind this proposal mirrors the existing application of BIP-85 for BIP-39 enhancements, aiming to standardize the generation of codex32 backups from BIP-85-derived entropy. It accentuates the added value codex32 brings, with test vectors and reference implementations made available in the proposal. Despite the limited adoption of codex32 by wallets at this stage, there's supportive momentum as evidenced by a draft PR 32652 for Bitcoin Core to import codex32 strings, accessible at [PR 32652](https://github.com/bitcoin/bitcoin/pull/32652?utm_source=chatgpt.com).

An alternative path mentioned involves the potential use of BIP-85's dice application by codex32 implementers. However, the direct application as proposed aims to enhance interoperability and ease of use across systems. Feedback from the community is encouraged as part of the ongoing development process.</summary>
    <published>2025-08-31T22:25:00+00:00</published>
  </entry>
</feed>

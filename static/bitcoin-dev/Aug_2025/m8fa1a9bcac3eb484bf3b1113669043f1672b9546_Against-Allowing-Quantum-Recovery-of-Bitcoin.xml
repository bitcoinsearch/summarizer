<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-22T13:02:45.382474+00:00</updated>
  <author>
    <name>conduition 2025-08-09 19:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-22T13:02:45.382512+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m8fa1a9bcac3eb484bf3b1113669043f1672b9546" rel="alternate"/>
    <summary>The discussion focuses on the challenges and solutions related to merging public keys (pubkeys) across all inputs in Bitcoin transactions, highlighting concerns about maintaining the total ordering of commitments. The primary issue identified is that a validator cannot confirm if a commitment opened by a reveal transaction is indeed the earliest. This uncertainty arises because miners could potentially censor a reveal transaction temporarily and insert an alternative one with a different input set, leading to a varied HMAC key.

The concept of "witness hashing" was also examined but deemed ineffective against quantum adversaries. After a reveal transaction has been opened, such adversaries could alter the witness stack by inverting one of the pubkeys and creating a new signature. This action would change the HMAC key intended for an authentic commitment, making it impossible for validators to verify the commitment's sequence. Consequently, the necessity to HMAC sign the TXID on a per-input basis remains to ensure security and integrity.

To address these concerns, it is proposed to merge pubkeys into a single HMAC key for each locking script of a specific reveal transaction input. This approach guarantees that the HMAC key disclosed to open any commitment remains consistent, irrespective of the spender of the revealed input. However, Taproot (P2TR addresses) presents an exception due to its capacity for numerous possible locking scripts with distinct pubkey sets. Nevertheless, it's suggested that a quantum attacker would likely struggle to exploit this without inverting SHA256, enabling the reveal transaction validator to accurately determine the chronological order of past commitments. This method effectively counters potential miner attacks based on the censorship of reveal transactions.</summary>
    <published>2025-08-09T19:53:00+00:00</published>
  </entry>
</feed>

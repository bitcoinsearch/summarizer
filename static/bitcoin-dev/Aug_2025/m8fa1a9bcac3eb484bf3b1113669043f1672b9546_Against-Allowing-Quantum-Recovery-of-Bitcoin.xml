<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-23T15:43:14.045441+00:00</updated>
  <author>
    <name>conduition 2025-08-09 19:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-23T15:43:14.045476+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m8fa1a9bcac3eb484bf3b1113669043f1672b9546" rel="alternate"/>
    <summary>The discussion revolves around the technical intricacies of merging public keys (pubkeys) across all inputs in cryptographic transactions, highlighting the challenges and potential vulnerabilities this approach entails. The primary concern is that such a method could disrupt the total order of commitments, which is crucial for validators to ascertain the earliest commitment accurately. This issue arises because miners have the capacity to censor reveal transactions temporarily, thereby manipulating the sequence of events to favor a different HMAC key generated from an altered set of inputs.

Further analysis reveals that the concept of "witness hashing," initially proposed as a solution, fails to offer immunity against quantum adversaries. These adversaries possess the capability to alter the witness stack post-reveal transaction by modifying one of the public keys and generating a new signature. This action effectively changes the HMAC key intended for use in a legitimate commitment, rendering validators unable to verify the chronological order of commitments. Hence, the necessity to HMAC sign the transaction ID (TXID) on a per-input basis is underscored, ensuring the integrity and order of transactions.

A workaround suggested involves consolidating pubkeys into a singular HMAC key for each locking script within a specific reveal transaction input. This strategy ensures the constancy of the HMAC key used to open any commitment, making it impervious to manipulation attempts regardless of the spender of the revealed input. However, Taproot addresses (P2TR) are noted as exceptions due to their potential for multiple locking scripts containing varied pubkey sets. Despite this, a quantum attacker's ability to exploit such addresses is deemed unlikely without reversing SHA256, hence preserving the feasibility of determining a clean ordering of past commitments by the reveal transaction validator. This approach effectively mitigates risks associated with miner-induced censorship of reveal transactions, thereby safeguarding transaction integrity.

For further details on the technical aspects discussed, maintaining subscription to relevant development mailing lists such as the Bitcoin Development Mailing List is advisable.</summary>
    <published>2025-08-09T19:53:00+00:00</published>
  </entry>
</feed>

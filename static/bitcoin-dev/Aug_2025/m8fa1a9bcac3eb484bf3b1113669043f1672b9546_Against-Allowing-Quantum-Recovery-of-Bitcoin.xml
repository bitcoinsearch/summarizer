<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-23T14:32:09.587346+00:00</updated>
  <author>
    <name>conduition 2025-08-09 19:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-23T14:32:09.587383+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m8fa1a9bcac3eb484bf3b1113669043f1672b9546" rel="alternate"/>
    <summary>The discourse centers around the challenges and solutions pertaining to the security and integrity of transactions within a blockchain framework, particularly focusing on the use of public keys (pubkeys) and Hash-based Message Authentication Codes (HMAC). The initial problem highlighted is the potential vulnerability that arises when merging all public keys across inputs, which could compromise the total ordering on commitments. This situation creates a loophole for miners to manipulate transaction orders by censoring reveal transactions temporarily and introducing an alternative with a disparate set of inputs, thus altering the HMAC key.

Further examination reveals concerns about "witness hashing," a concept rendered ineffective against quantum adversaries. After a reveal transaction is made, a quantum adversary could alter the witness stack by inverting one of the public keys, thereby generating a new signature. This action changes the HMAC key from what would have been used in a genuine commitment, making it impossible for validators to ascertain the correct commitment order. Consequently, the proposal underscores the necessity of HMAC signing the Transaction ID (TXID) on a per-input basis to maintain transaction integrity.

A solution is proposed to counteract the aforementioned vulnerabilities - merging public keys into a single HMAC key for each specific locking script of a reveal transaction's input. This approach ensures the HMAC key revealed to open any commitment remains consistent, irrespective of the spender of the revealed input. However, Taproot addresses (P2TR), known for their multiple possible locking scripts with varying pubkey sets, are identified as exceptions. A quantum attacker is unlikely to exploit this due to the difficulty of inverting SHA256, a foundational cryptographic function. This mechanism promotes a cleaner and more secure ordering of past commitments, effectively mitigating risks associated with miner censorship of reveal transactions.

The dialogue encapsulates a nuanced discussion on enhancing the robustness of blockchain transactions against both classical and quantum computational threats. It emphasizes the importance of meticulous design in cryptographic protocols to safeguard against manipulation and ensure the fidelity of transaction sequences.</summary>
    <published>2025-08-09T19:53:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-08-13T02:57:42.151354+00:00</updated>
  <author>
    <name>conduition 2025-08-09 19:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-08-13T02:57:42.151394+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/dbe7018c-149f-4ead-be39-fa368eca06f0n@googlegroups.com/T/#m8fa1a9bcac3eb484bf3b1113669043f1672b9546" rel="alternate"/>
    <summary>In a recent discussion on the complexities of managing public keys (pubkeys) and transaction commitments in blockchain systems, an innovative approach was considered but identified to have critical vulnerabilities. The initial idea proposed merging all pubkeys across inputs to streamline the process. However, this method encounters a significant challenge in maintaining the total ordering of commitments. The core issue arises when a reveal transaction (TX) is presented for validation; the validator cannot confidently determine if the commitment being opened precedes all others. This uncertainty is due to the potential for miners to delay a reveal TX intentionally and replace it with another that has a different input set, thus altering the HMAC key used for verification.

Further complicating the matter, the concept of "witness hashing" was also explored but ultimately deemed ineffective against quantum adversaries. Such adversaries could manipulate the witness stack after a reveal TX has been made public by altering one of the pubkeys, thereby generating a new signature and changing the HMAC key intended for authentic commitment verification. Consequently, validators would be unable to verify the chronological order of commitments accurately.

To address these challenges, the correspondence suggests a refined strategy that involves HMAC signing the transaction identifier (TXID) on a per-input basis rather than merging pubkeys across all inputs. By doing so, each pubkey within a single locking script of a specific reveal TX input can be merged into a singular HMAC key. This adjustment ensures that the HMAC key disclosed to open any commitment remains constant, irrespective of the spender of the revealed input. An exception noted is Taproot (P2TR addresses), which could present multiple potential locking scripts with varied pubkey sets. However, it's posited that a quantum attacker is unlikely to exploit this without inverting SHA256, allowing validators to establish a clear sequence of past commitments for a given reveal, effectively countering miner-driven censorship attacks. This dialogue underscores the intricate balance between innovation and security in the ongoing development of blockchain technologies.</summary>
    <published>2025-08-09T19:53:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-22T12:21:38.466590+00:00</updated>
  <author>
    <name>conduition 2025-08-09 19:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-22T12:21:38.466629+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m8fa1a9bcac3eb484bf3b1113669043f1672b9546" rel="alternate"/>
    <summary>The discussion revolves around the challenges and solutions regarding the merging of public keys (pubkeys) across all inputs in blockchain transactions, particularly focusing on the integrity and security of transaction commitments. The initial proposal suggested merging all pubkeys to streamline the process, but this approach was identified to have significant flaws, notably in maintaining a total ordering on commitments. This is critical as it ensures that validators can accurately verify the sequence of transactions. A particular vulnerability highlighted was the risk of censorship by miners, who could delay a reveal transaction to manipulate the HMAC key by changing the input set, thus disrupting the integrity of the commitment.

Another concern raised was the susceptibility to quantum attacks, where an adversary could potentially alter the witness stack post-reveal by inverting one of the pubkeys, thereby generating a new signature. This would change the HMAC key from what was originally intended, making it impossible for validators to confirm the chronological order of commitments. Such vulnerabilities underscored the need for a secure method of signing transactions that could withstand such manipulation.

To address these issues, a refined approach was suggested. Instead of merging pubkeys across all inputs, it was proposed to consolidate only those within the same locking script of a specific reveal transaction input. This method ensures that the HMAC key disclosed to open any commitment remains consistent, irrespective of the spender of the revealed input. However, Taproot transactions, which utilize P2TR addresses capable of supporting multiple locking scripts with varying pubkey sets, were noted as an exception. Despite this, it was assessed that a quantum attacker would likely face significant challenges in exploiting this due to the difficulty of inverting SHA256, thereby safeguarding the sequence of transactions from miner censorship and ensuring the validator's ability to determine a clear ordering of past commitments.

This discourse not only highlights the complexities involved in securing blockchain transactions against both classical and quantum threats but also illustrates the ongoing efforts within the Bitcoin development community to enhance security and maintain the integrity of transaction commitments.</summary>
    <published>2025-08-09T19:53:00+00:00</published>
  </entry>
</feed>

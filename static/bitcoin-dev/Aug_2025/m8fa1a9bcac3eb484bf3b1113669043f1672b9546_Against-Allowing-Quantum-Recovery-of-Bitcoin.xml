<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Against Allowing Quantum Recovery of Bitcoin</title>
  <updated>2025-09-22T13:46:24.028954+00:00</updated>
  <author>
    <name>conduition 2025-08-09 19:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Against Allowing Quantum Recovery of Bitcoin</title>
    <updated>2025-09-22T13:46:24.028993+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADL_X_cF=UKVa7CitXReMq8nA_4RadCF==kU4YG+0GYN97P6hQ@mail.gmail.com/T/#m8fa1a9bcac3eb484bf3b1113669043f1672b9546" rel="alternate"/>
    <summary>The discussion revolves around the complexities involved in merging public keys (pubkeys) across all inputs for transactions, highlighting a significant concern with maintaining the integrity of commitment ordering. The initial idea was to amalgamate pubkeys to simplify the process. However, this approach encounters a critical flaw because it undermines the ability to establish a chronological sequence of commitments. A miner could manipulate this by delaying a reveal transaction and substituting it with another, featuring a different set of inputs, thereby altering the HMAC key and disrupting the established order.

Further exploration of the topic reveals an inherent vulnerability to quantum attacks, particularly in the context of "witness hashing." After a reveal transaction is made, a quantum adversary could potentially alter the witness stack by inverting one of the pubkeys and generating a new signature. This manipulation would change the HMAC key that should have been used, making it impossible for validators to ascertain the original commitment sequence. Therefore, the necessity to HMAC sign the transaction ID (TXID) on a per-input basis is underscored to safeguard against such issues.

To address these challenges while accommodating the suggestion to merge pubkeys, a nuanced approach is proposed. It involves combining pubkeys within the single locking script of a specific reveal transaction input. This method ensures the HMAC key, which is essential for opening any commitment, remains constant, irrespective of the spender of the revealed input. However, Taproot represents an exception due to its potential for multiple locking scripts under a Pay-to-Taproot (P2TR) address, each with varying pubkey sets. Nevertheless, the likelihood of a quantum attacker successfully targeting this without inverting SHA256 is considered low. Consequently, this strategy enables validators to determine a clear and accurate order of past commitments when examining a reveal transaction, effectively countering any miner-based censorship or attack strategies aiming to disrupt this order.</summary>
    <published>2025-08-09T19:53:00+00:00</published>
  </entry>
</feed>

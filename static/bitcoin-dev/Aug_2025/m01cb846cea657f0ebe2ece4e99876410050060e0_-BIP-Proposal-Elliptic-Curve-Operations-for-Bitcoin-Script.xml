<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP Proposal] Elliptic Curve Operations for Bitcoin Script</title>
  <updated>2025-08-27T02:49:24.292475+00:00</updated>
  <author>
    <name>Olaoluwa Osuntokun 2025-08-25 00:50:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP Proposal] Elliptic Curve Operations for Bitcoin Script</title>
    <updated>2025-08-27T02:49:24.292504+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAO3Pvs-Cwj=5vJgBfDqZGtvmoYPMrpKYFAYHRb_EqJ5i0PG0cA@mail.gmail.com/T/#m01cb846cea657f0ebe2ece4e99876410050060e0" rel="alternate"/>
    <summary>A proposal has been made to enhance Bitcoin's scripting capabilities through the addition of Elliptic Curve operation op codes, leveraging the Taproot infrastructure and its current tap leaf version. This initiative aims to facilitate the computation of the top-level Taproot output public key within Bitcoin Script, allowing for a novel approach to on-chain state machines. By integrating introspection-enabling op codes along with the proposed additions, the foundation is laid for creating more dynamic and versatile smart contracts directly on the Bitcoin blockchain.

The introduction of these op codes is not limited to a single application; rather, it opens the door to a variety of use cases such as optimized Discreet Log Contracts (DLCs), partial musig2 signature verifications, and EC-based sigma protocols, among others. The proposal outlines four specific op codes to be added to the Bitcoin Script language: `OP_EC_POINT_ADD`, `OP_EC_POINT_MUL`, `OP_EC_POINT_NEGATE`, and `OP_EC_POINT_X_COORD`. Each of these op codes is designated to perform distinct Elliptic Curve operations, expanding the functional repertoire available to developers.

For those interested in exploring the technical details or contributing to the discussion, the full Bitcoin Improvement Proposal (BIP) text is accessible [here](https://github.com/bitcoin/bips/pull/1945). Additionally, a reference implementation has been provided for `btcd`, which can be found [here](https://github.com/btcsuite/btcd/pull/2413). This advancement signifies a meaningful step forward in the evolution of Bitcoin's scripting abilities, potentially paving the way for more complex and secure on-chain logic implementations.</summary>
    <published>2025-08-25T00:50:00+00:00</published>
  </entry>
</feed>

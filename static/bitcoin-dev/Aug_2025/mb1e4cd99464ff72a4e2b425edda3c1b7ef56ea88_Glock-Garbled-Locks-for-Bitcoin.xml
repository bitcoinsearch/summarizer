<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Glock: Garbled Locks for Bitcoin</title>
  <updated>2025-08-27T02:48:17.234219+00:00</updated>
  <author>
    <name>Liam Eagen 2025-08-21 22:48:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Glock: Garbled Locks for Bitcoin</title>
    <updated>2025-08-27T02:48:17.234252+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/Aq_-LHZtVdSN5nODCryicX2u_X1yAQYurf9UDZXDILq6s4grUOYienc4HH2xFnAohA69I_BzgRCSKdW9OSVlSU9d1HYZLrK7MS_7wdNsLmo=@protonmail.com/T/#u#mb1e4cd99464ff72a4e2b425edda3c1b7ef56ea88" rel="alternate"/>
    <summary>The recent advancements in the realm of optimistic smart contract verification for Bitcoin have been noteworthy, with a particular focus on the development of "Glock" (Garbled Locks). This innovative approach draws inspiration from previous works like Jeremy Rubin's Delbrag and Robin Linus' BitVM3(RSA/s), yet it diverges by employing unique techniques to forge a practical scheme. The essence of Glock lies in its protocol that facilitates optimistic smart contract verification through Garbled Circuits (GC). In this setup, a "Garbler" utilizes a Lamport-like signature to authenticate the input and proof, enabling an "Evaluator" to derive a secret in case the smart contract execution fails. This derived secret can then be used to sign a slashing transaction, a mechanism that is compatible with current Bitcoin protocols without necessitating soft forks.

A significant advantage of Glock is its ability to offload the bulk of verification costs and complexity off-chain, potentially simplifying the verification process to a mere Schnorr signature as the fraud proof. This contrasts sharply with earlier methods which either required larger slashing scripts or were bogged down by impractical garbling expenses. Glock25, the proposed model, heralds a breakthrough by reducing on-chain data requirements by over 550 times compared to its predecessor BitVM2, marking it as the first feasibly practical construction of its kind.

What sets Glock25 apart is its utilization of cutting-edge cryptographic techniques to manage the schemeâ€™s costs effectively. Notably, it introduces a new SNARK - currently the smallest known - which is made designated verifier and integrated with binary elliptic curves. These curves synergize well with the GC scheme, enhancing its efficiency and security. Moreover, Glock25 incorporates innovative strategies like adaptor signatures and verifiable secret sharing to achieve efficient malicious security. 

For those interested in delving deeper into the technicalities of Glock25, the research paper and code are accessible online. The paper provides an in-depth exploration of the protocol's foundations, including its cryptographic underpinnings and operational mechanics ([Research Paper](https://eprint.iacr.org/2025/1485)). Additionally, the implementation code for DV-Pari, the circuit generator, and the general garbling &amp; evaluation tool are available on GitHub at [DV-Pari Rust implementation](github.com/alpenlabs/dv-pari), [Binary circuit generator for DV-Pari](github.com/alpenlabs/dv-pari-circuit), and [Generic garbling &amp; evaluation tool](github.com/alpenlabs/garbled-circuits) respectively. This work not only contributes to the field of Bitcoin's smart contract capabilities but also opens new avenues for research and development within the domain of blockchain technology and cryptographic verification.</summary>
    <published>2025-08-21T22:48:00+00:00</published>
  </entry>
</feed>

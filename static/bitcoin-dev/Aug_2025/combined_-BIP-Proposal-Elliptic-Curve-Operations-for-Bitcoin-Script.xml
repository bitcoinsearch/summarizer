<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [BIP Proposal] Elliptic Curve Operations for Bitcoin Script</title>
  <updated>2025-08-27T02:49:43.148403+00:00</updated>
  <author>
    <name>jeremy 2025-08-25 16:45:00+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2025-08-25 00:50:00+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2025/m47aca0b8c4a248d3be1637a936a32fbedd571068_-BIP-Proposal-Elliptic-Curve-Operations-for-Bitcoin-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2025/m01cb846cea657f0ebe2ece4e99876410050060e0_-BIP-Proposal-Elliptic-Curve-Operations-for-Bitcoin-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [BIP Proposal] Elliptic Curve Operations for Bitcoin Script</title>
    <updated>2025-08-27T02:49:43.148444+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAO3Pvs-Cwj=5vJgBfDqZGtvmoYPMrpKYFAYHRb_EqJ5i0PG0cA@mail.gmail.com/T/#m01cb846cea657f0ebe2ece4e99876410050060e0" rel="alternate"/>
    <summary>In the realm of Bitcoin development, a notable proposal has been put forward to introduce new Elliptic Curve operation opcodes via a soft fork, leveraging the existing infrastructure provided by Taproot. This initiative aims at enhancing the flexibility and functionality of Bitcoin Script, particularly in facilitating the commutation of the top-level Taproot output public key. The proposed opcodes are designed to complement introspection capabilities, paving the way for innovative on-chain state machines within Bitcoin Script. Furthermore, the versatility of these opcodes extends to various applications, including but not limited to optimized Discreet Log Contracts (DLCs), partial MuSig2 signature verification, and Elliptic Curve-based sigma protocols.

A total of four opcodes have been suggested, each carefully selected from the available `OP_SUCCESS` range. These include `OP_EC_POINT_ADD`, `OP_EC_POINT_MUL`, `OP_EC_POINT_NEGATE`, and `OP_EC_POINT_X_COORD`. The comprehensive details of this proposition, including its rationale and potential impact, are thoroughly documented in the draft of the Bitcoin Improvement Proposal (BIP), accessible through [this GitHub link](https://github.com/bitcoin/bips/pull/1945). Additionally, a reference implementation has been made available in `btcd`, which can be reviewed via [this link](https://github.com/btcsuite/btcd/pull/2413).

Amidst discussions surrounding this proposal, constructive feedback has emerged, suggesting refinements to further solidify the foundation of the proposed opcodes. Key among the suggestions is the introduction of an operation dubbed `OP_EC_LIFT_X_EVEN`, aimed at reversing the effects of `OP_EC_POINT_X_COORD`, albeit with certain limitations pertaining to parity considerations. This addition would be particularly beneficial in scenarios where `OP_IKEY` is utilized. Another recommendation involves the implementation of `OP_EC_GENERATOR`, which would push the generator point `G` onto the stack directly, as opposed to the current method that interprets a `0` as `G`. This modification is anticipated to enhance composability and streamline operations, especially in the context of multiplication chaining where the goal is to carry the point at infinity through successive operations accurately.

The discourse further delves into the intricacies of implementing `OP_TWEAKADD`, highlighting a more efficient approach facilitated by the new opcodes. This includes leveraging `OP_EC_GENERATOR` followed by `OP_EC_POINT_MUL` and `OP_EC_LIFT_X_EVEN` for additive operations on elliptic curve points. Such technical insights underscore the potential of the proposed enhancements to refine and extend the capabilities of Bitcoin Script, heralding a new era of on-chain innovation and flexibility.</summary>
    <published>2025-08-25T16:45:00+00:00</published>
  </entry>
</feed>

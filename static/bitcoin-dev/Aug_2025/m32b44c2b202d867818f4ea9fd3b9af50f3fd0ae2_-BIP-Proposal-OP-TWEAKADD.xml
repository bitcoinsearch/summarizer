<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[BIP Proposal] OP_TWEAKADD</title>
  <updated>2025-08-27T02:48:32.225820+00:00</updated>
  <author>
    <name>jeremy 2025-08-23 18:24:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[BIP Proposal] OP_TWEAKADD</title>
    <updated>2025-08-27T02:48:32.225850+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/bc9ff794-b11e-47bc-8840-55b2bae22cf0n@googlegroups.com/T/#m32b44c2b202d867818f4ea9fd3b9af50f3fd0ae2" rel="alternate"/>
    <summary>The discussion revolves around various cryptographic techniques and proposals aimed at enhancing the Bitcoin Improvement Proposal (BIP) framework, particularly focusing on script operations to increase security and functionality. Key examples include the introduction and application of tweak reveal scripts, which involve combinations of operations like OP_TWEAKADD with others such as OP_CSFS and OP_IKEY, proposed in BIP-348 and BIP-349. These scripts are designed to allow for complex cryptographic functions, including the composition of signatures and message verification through specific witness and program structures.

A notable concept discussed is the Proof-of-Signing-Order, which ensures that one signature (A) can only be made after another (B), with B's signature being fully committed before A's. This mechanism allows for a form of transaction "refinement" where the latter signer (A) is bound by the details fixed by the prior signer (B), who has the flexibility to use any sighash combination mode. This method emphasizes the sequential integrity and dependency of signatures in a transaction process.

Another important aspect covered is delegation, where one key (A) signs a message tweaked by another key (B), allowing for flexible control over the signing permissions and restrictions, such as limiting the sighash mode. This approach provides a versatile framework for assigning and managing signing authority between different keys.

The target tweak concept is introduced as a means to prove knowledge of a discrete logarithm, specifically demonstrating that a certain value 't' is known which satisfies the equation `tG + k1G = k2G`. This technique can be particularly useful in contexts like Taproot outputs, enabling forced disclosure or presence of a TapTweak through crafted witness and program structures.

Finally, the key reveal strategy utilizes the target tweak to set up a contract that mandates the revelation of a key, essentially proving the knowledge of the discrete log of T = tG by demonstrating the ability to compute T+G = (t+1)G.

These techniques and proposals represent a sophisticated advancement in the cryptographic capabilities of the Bitcoin protocol, aiming to enhance security, efficiency, and flexibility in transaction verification and execution processes.</summary>
    <published>2025-08-23T18:24:00+00:00</published>
  </entry>
</feed>

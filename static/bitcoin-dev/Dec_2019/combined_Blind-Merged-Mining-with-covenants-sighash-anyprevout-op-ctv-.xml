<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Blind Merged Mining with covenants ( sighash_anyprevout / op_ctv )</title>
  <updated>2023-08-02T01:42:59.533107+00:00</updated>
  <author>
    <name>Ruben Somsen 2019-12-26 16:52:43+00:00</name>
  </author>
  <author>
    <name>Nick Gregory 2019-12-26 12:32:26+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2019-12-26 02:23:10+00:00</name>
  </author>
  <link href="bitcoin-dev/Dec_2019/017537_Blind-Merged-Mining-with-covenants-sighash-anyprevout-op-ctv-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017536_Blind-Merged-Mining-with-covenants-sighash-anyprevout-op-ctv-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2019/017534_Blind-Merged-Mining-with-covenants-sighash-anyprevout-op-ctv-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Blind Merged Mining with covenants ( sighash_anyprevout / op_ctv )</title>
    <updated>2023-08-02T01:42:59.533107+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017534.html" rel="alternate"/>
    <summary>Blind Merged Mining (BMM) is a decentralized consensus mechanism proposed by Ruben Somsen that allows external blockchains to outsource their mining to the Bitcoin blockchain. This mechanism involves miners committing the hash of another blockchain into a unique location on the Bitcoin blockchain, and in return, they are paid with Bitcoin fees for capturing the fees inside the other blockchain. The purpose of BMM is to increase the total Proof of Work (PoW) on the Bitcoin blockchain, thereby enhancing its security.One key aspect of BMM is that it does not require any additional validation from miners. Instead, they only need to choose the highest bidder. This makes the implementation of BMM relatively straightforward. A complete transaction flow diagram for BMM can be found in a GitHub link provided in the context.In order for the BMM chain to function, it will need some kind of native token to pay for fees. The fairest and least speculation-inducing method proposed is a perpetual one-way peg, where 1 BTC can be burned for 1 token at any time, thus preserving the 21M coin limit.However, there may be challenges in moving the BMM chain forward due to the lack of a block subsidy. This raises the question of whether enacting a reorg would be a more viable option. BMM reorgs have a unique characteristic in that they will have to compete for the same unique location that the original chain is using. As a result, a 10-block reorg would take an average of 100 minutes to catch up, during which the original chain would not move forward. Whether this mitigation is sufficient remains an open question.Another consideration is whether BMM interferes too much with the existing incentive structure of Bitcoin. While the exact signature is committed ahead of time in BMM, private key security is irrelevant. Assuming taproot, the spending script will be inside a taproot leaf, which means that a key spend path should be made unusable to enforce the covenant. This can be achieved with a NUMS, such as hashToCurve(G) = H, which can then be used as the internal taproot key T = H + hash(H||bmm_hash)*G.Overall, BMM offers interesting possibilities for decentralized consensus and the outsourcing of mining work from external blockchains to the Bitcoin blockchain. It remains to be seen how this mechanism will be adopted and whether it will have a significant impact on the existing incentive structure of Bitcoin.</summary>
    <published>2019-12-26T16:52:43+00:00</published>
  </entry>
</feed>

<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Determine input addresses of a transaction</title>
  <updated>2025-10-13T02:48:32.097651+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Oct_2011/000699_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000698_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000697_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000687_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000686_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000685_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000683_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000679_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000678_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000677_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000674_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2011/000673_Determine-input-addresses-of-a-transaction.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000673.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000673.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000673.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Determine input addresses of a transaction</title>
    <updated>2025-10-13T02:48:32.097758+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2011-October/000673.html" rel="alternate"/>
    <published>2011-10-27T14:50:16+00:00</published>
    <summary>In an email thread from October 2011, Gavin Andresen suggested a method to extract addresses from transaction inputs. Jan created a patch based on this idea and shared it in the thread, along with a link to the patch on GitHub for review. He also created a separate RPC call called 'getorigins' to prevent slowing down other calls.Another email exchange between Pieter Wuille and Jan discussed the idea of marking certain Bitcoin addresses as &quot;trusted&quot; and having an RPC call to request incoming transactions from trusted sources. Jan suggested querying for a specific transaction ID to see if it comes from a trusted source. However, he admitted that this may be too involved for his familiarity with the Bitcoin source code.Gavin Andresen proposed the implementation of green addresses as a second signature in scriptSig in another email exchange. Jan experimented with generating such transactions but ran into the issue that IsStandard() checks the size of scriptSig, which was triggered by the extra signature.The conversation then shifted to discussing the usage and controversy surrounding green address style transactions. Joel suggested creating a peer-sourced green address implementation, while others criticized the idea as unnecessary or encouraging centralization. The conversation ended on a lighter note with feedback being termed as strong.Jan proposed two ideas to improve green address style transactions: quickly detecting current green address style transactions and creating and verifying green transactions properly for potential merging. However, he believed that green transactions were too controversial to be included in the mainline.In another email conversation, Gavin and Jan discussed the safety of detecting green address style transactions. They suggested different approaches, including using scriptPubKey validation and implementing green addresses as a second signature in the scriptSig.There was a suggestion to implement Green addresses as a second signature in scriptSig, which would allow trust aggregators to sign transactions for merchants without consulting them for each transaction. Checking for revocation would still be essential, but the CA cert could state the guarantee available.Gavin discussed potential issues with using the ExtractAddress() function for listtransactions, and Michael suggested modifying gettransaction to address the performance penalty issue.Jan attempted to verify the validity of transactions by checking if the scriptSig field contained only two opcodes. However, he wondered about the security of this method and whether it could be tricked. Jan also proposed extending the 'gettransaction' call to include a new field called &quot;inputaddresses&quot; to retrieve the Bitcoin addresses associated with the inputs of a transaction.In summary, the email exchanges revolve around ideas and proposals related to green addresses, including methods for extracting addresses from transaction inputs, creating an interface to mark addresses as trusted, implementing green addresses as a second signature, and improving the detection and verification of green transactions. The conversations also touch on the controversy and potential issues surrounding green address style transactions.</summary>
  </entry>
</feed>
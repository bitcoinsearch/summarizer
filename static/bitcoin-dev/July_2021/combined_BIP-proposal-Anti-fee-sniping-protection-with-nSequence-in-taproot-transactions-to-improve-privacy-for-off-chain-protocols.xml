<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols</title>
  <updated>2025-09-26T15:43:01.197115+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="ma68af632de778c81ad84b87209916914e9293dee">
      <author>[bitcoin-dev] BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols Chris Belcher</author>
      <timestamp>2021-06-10T12:56:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols Chris Belcher" parent_id="mailing-list-2021-06-ma68af632de778c81ad84b87209916914e9293dee" anchor="m2fe3a2800bfb9b2bc2d34c452058b7a4476e0459">
      <author>Ben Carman</author>
      <timestamp>2021-06-28T10:55:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Ben Carman" parent_id="mailing-list-2021-06-m2fe3a2800bfb9b2bc2d34c452058b7a4476e0459" anchor="m52911ca55f7ee3fd15011f74ad4a86f98e87637f">
      <author>Chris Belcher</author>
      <timestamp>2021-06-29T09:25:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="1" position="3" reply_to="[bitcoin-dev] BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols Chris Belcher" parent_id="mailing-list-2021-07-ma68af632de778c81ad84b87209916914e9293dee" anchor="m0265b3954a81c5cd04ea2c010b602e0cdba00ad3">
      <author>Chris Belcher</author>
      <timestamp>2021-07-22T14:44:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/July_2021/019275_BIP-proposal-Anti-fee-sniping-protection-with-nSequence-in-taproot-transactions-to-improve-privacy-for-off-chain-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2021/019147_BIP-proposal-Anti-fee-sniping-protection-with-nSequence-in-taproot-transactions-to-improve-privacy-for-off-chain-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2021/019133_BIP-proposal-Anti-fee-sniping-protection-with-nSequence-in-taproot-transactions-to-improve-privacy-for-off-chain-protocols.xml" rel="alternate"/>
  <link href="bitcoin-dev/June_2021/019048_BIP-proposal-Anti-fee-sniping-protection-with-nSequence-in-taproot-transactions-to-improve-privacy-for-off-chain-protocols.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019275.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP proposal: Anti-fee-sniping protection with nSequence in taproot transactions to improve privacy for off-chain protocols</title>
    <updated>2025-09-26T15:43:01.197880+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019275.html" rel="alternate"/>
    <published>2021-07-22T14:44:11+00:00</published>
    <summary>The author of the taproot privacy BIP proposal has created python-like pseudocode to clarify the specification based on feedback. The pseudocode incorporates the suggestion of selecting a random input instead of the first one. It is important for wallet developers to include this BIP in their implementations as it will enhance the privacy and fungibility of off-chain protocols. Additionally, it will improve incentives for miners in Bitcoin's low-inflation future. The provided pseudocode includes a function called &quot;apply_anti_fee_sniping_fields&quot; which sets the transaction version to 2 in accordance with bip68. If any of the transaction inputs have more than 65535 confirmations or are taproot inputs, the function sets nlocktime. Otherwise, there is a 50% chance that either nlocktime or nsequence will be chosen. If a specific condition is met and randint(10) == 0, the function sets transaction.nlocktime to max(0, transaction.nlocktime - randint(0, 99)). If not, it randomly selects an input index and sets transaction.inputs[input_index].nsequence to transaction.inputs[input_index].confirmations(). Similarly, if the condition is met and randint(10) == 0, the function sets transaction.inputs[input_index].nsequence to max(0, transaction.inputs[input_index].nsequence - randint(0, 99)).The bitcoin-dev mailing list recently discussed potential amendments to BIP68, which focuses on the use of nSequence in transaction inputs. The current proposal states that nSequence should only apply to the first input when multiple inputs are present. However, participants in the discussion highlighted complications that could arise for protocols like DLC and dual funded lightning, where input ordering is unknown until both parties reveal their inputs. To address these concerns, it was suggested that the BIP be revised to state that &quot;at least one of the inputs of the transaction&quot; should have nSequence applied, and on-chain wallets should randomly select an input when applying nSequence. These changes would also impact CoinJoins and transactions involving multiple parties contributing inputs.The article emphasizes the potential complications that could arise from limiting nSequence to the first input of a transaction with multiple inputs. This issue could affect protocols like DLC and dual funded lightning, where input ordering is not known until all inputs are revealed. To ensure compatibility with these protocols, it is proposed that nSequence should apply to &quot;at least one of the inputs of the transaction&quot; instead of just the first input.The proposal introduces a new type of wallet behavior using BIP341 taproot, which enhances anonymity for off-chain protocols utilizing point-time-locked contracts (PTLCs) such as CoinSwap, Lightning, and Discrete Log Contracts. By incorporating nSequence in taproot transactions, on-chain wallets like Bitcoin Core can improve the privacy and fungibility of bitcoin. The proposal suggests using nSequence instead of nLockTime anti-fee-sniping protection, as nSequence values are currently uncommon and would designate off-chain settlement transactions as ordinary spend transactions. It is crucial for the community and wallet developers to implement this proposal to build up the anonymity set of nSequence transactions alongside the adoption of taproot by wallets. Fee sniping poses hypothetical challenges to Bitcoin mining in a low-inflation future, and anti-fee-sniping protection using nLockTime or nSequence contributes to pushing the blockchain forward. While nLockTime is currently used, it presents absolute lock time, whereas many off-chain protocols employ relative lock times. Hence, both nLockTime and nSequence should be utilized, with wallets choosing either an nLockTime value or nSequence values to discourage fee sniping. When creating transactions involving UTXOs protected by BIP341 taproot, wallets should also include a second random branch that sets the nLockTime or nSequence value further back. This enhances privacy for transactions that are delayed after signing due to factors like high-latency mix networks. If the UTXOs being spent have more than 65535 confirmations, wallets should use nLockTime instead of nSequence. It is important to note that this proposal does not require consensus changes and can be adopted gradually by wallets. However, for greater privacy, it is recommended for software to adopt it as soon as possible during the implementation of taproot wallets. By doing so, taproot adoption will already incorporate the nSequence code. More information on this proposal can be found in the provided references.</summary>
  </entry>
</feed>
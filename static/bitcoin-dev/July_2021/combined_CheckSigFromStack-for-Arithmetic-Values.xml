<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CheckSigFromStack for Arithmetic Values</title>
  <updated>2025-09-26T15:42:46.499986+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m0ccab1f4528d5239c88ba09f3124779bbfc892bf">
      <author>[bitcoin-dev] CheckSigFromStack for Arithmetic Values Jeremy</author>
      <timestamp>2021-07-02T22:20:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] CheckSigFromStack for Arithmetic Values Jeremy" parent_id="mailing-list-2021-07-m0ccab1f4528d5239c88ba09f3124779bbfc892bf" anchor="mf5c6bb89e2fcb60f3faa55d98e147bbc15b3e42a">
      <author>ZmnSCPxj</author>
      <timestamp>2021-07-02T23:58:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="ZmnSCPxj" parent_id="mailing-list-2021-07-mf5c6bb89e2fcb60f3faa55d98e147bbc15b3e42a" anchor="m752b0a16724c2b14a4fcb3f6506ff836b37530d9">
      <author>Jeremy</author>
      <timestamp>2021-07-03T04:01:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="3" position="3" reply_to="Jeremy" parent_id="mailing-list-2021-07-m752b0a16724c2b14a4fcb3f6506ff836b37530d9" anchor="m314e87511ecf3f367ec833e27105924a23fab0a4">
      <author>Erik Aronesty</author>
      <timestamp>2021-07-03T11:31:00.000Z</timestamp>
    </message>
    <message id="msg_5" depth="4" position="4" reply_to="Erik Aronesty" parent_id="mailing-list-2021-07-m314e87511ecf3f367ec833e27105924a23fab0a4" anchor="m0078c6953316763a11e7ee9957fa5cc194fdf537">
      <author>ZmnSCPxj</author>
      <timestamp>2021-07-04T00:22:00.000Z</timestamp>
    </message>
    <message id="msg_6" depth="5" position="5" reply_to="ZmnSCPxj" parent_id="mailing-list-2021-07-m0078c6953316763a11e7ee9957fa5cc194fdf537" anchor="m769e260406be02d6886f4449ba5d2c2ef9c50dcc">
      <author>ZmnSCPxj</author>
      <timestamp>2021-07-04T13:10:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/July_2021/019198_CheckSigFromStack-for-Arithmetic-Values.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019196_CheckSigFromStack-for-Arithmetic-Values.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019190_CheckSigFromStack-for-Arithmetic-Values.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019184_CheckSigFromStack-for-Arithmetic-Values.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019182_CheckSigFromStack-for-Arithmetic-Values.xml" rel="alternate"/>
  <link href="bitcoin-dev/July_2021/019181_CheckSigFromStack-for-Arithmetic-Values.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019181.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - CheckSigFromStack for Arithmetic Values</title>
    <updated>2025-09-26T15:42:46.500812+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-July/019181.html" rel="alternate"/>
    <published>2021-07-04T13:10:36+00:00</published>
    <summary>ZmnSCPxj wrote an email discussing the cleverness of using `OP_ADD` for implementing `OP_CHECKSIGFROMSTACK`, but mentioned that enabling `OP_ADD` is more of an argument against it. Despite this, `OP_ADD` is still enabled in Bitcoin, limited to 32 bits. He also discussed the possibility of implementing the &quot;Lamport-sign the EC sig&quot; idea, which would mean Bitcoin is already quantum-safe, but it has a lousy quantum-safe signing scheme.Jeremy proposed using arithmetic operations with Lamport signatures to enable signing operations. This implementation uses a bitwise expansion of a number and a Lamport signature for arbitrary values representable in small binary numbers. However, ZmnSCPxj noted that enabling `OP_ADD` could lead to single-use-only signatures and discouraged pubkey reuse.A member of the Bitcoin Development mailing list asked about using Schnorr signatures for complex arithmetic operations without involving the network or nodes. Another member confirmed it was possible and suggested signing the signature made with checksig with the Lamport, but there are some crypto assumption gotchas. They also discussed implementing Lamport signatures for arbitrary values representable in small binary numbers, showing a concrete example of a 16-bit sequence lock. They noted that Merkle signatures would be smaller for the pubkey, but much larger for the signature, making the script more complicated and expensive.Jeremy Rubin proposed using Lamport signatures in script for arithmetic values by using a binary expanded representation. He explained the approach through Python code and translated it into bitcoin script. The signer generates a key as a list of pairs of hash images, and the validation checks for no left-out values. A concrete use case is post-hoc signing a sequence lock. ZmnSCPxj expressed confusion over the syntax used in Rubin's code and suggested replacing the ` operator with actual numbers. He also mentioned that enabling OP_ADD can implement Lamport signatures for arbitrary values representable in small binary numbers, but Merkle signatures would have a larger signature size.Rubin proposed using Lamport signatures in script for arithmetic values by using a binary expanded representation. He explained the process through Python code and translated it into bitcoin script. A concrete use case is provided for post-hoc signing a sequence lock. The approach allows Lamport signatures for arbitrary values representable in small binary numbers. Merkle signatures were considered as an alternative, but the simplicity of the SCRIPT and no advantage in pushing the size towards the signature rather than the pubkey made the proposed approach preferred.Jeremy Rubin shared a technique for doing a Lamport signature in script for arithmetic values using a binary expanded representation. He posted about it in his blog, providing Python code and a bitcoin script translation. The technique involves expanding a number into its bitwise representation and using a Lamport signature. It can be used for certain applications like bonding contracts, but it can be bulky and expensive. Keys can be reused across scripts, but signatures may only be constructed one time to prevent unintended values.</summary>
  </entry>
</feed>
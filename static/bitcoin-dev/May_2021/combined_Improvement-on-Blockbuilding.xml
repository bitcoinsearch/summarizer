<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Improvement on Blockbuilding</title>
  <updated>2025-10-12T01:48:18.156455+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m3a0fb3c61583d56e32712ede19523af9bf22f57f">
      <author>[bitcoin-dev] Improvement on Blockbuilding Murch</author>
      <timestamp>2021-05-25T14:27:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Improvement on Blockbuilding Murch" parent_id="mailing-list-2021-05-m3a0fb3c61583d56e32712ede19523af9bf22f57f" anchor="m324d061b0ac0b33e16d3c982ec5ed43b85266e90">
      <author>Antoine Riard</author>
      <timestamp>2021-05-29T06:32:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Antoine Riard" parent_id="mailing-list-2021-05-m324d061b0ac0b33e16d3c982ec5ed43b85266e90" anchor="m7fa3cc0a909fd603bde53725de1902baa396e3a4">
      <author>Jorge Timón</author>
      <timestamp>2021-05-29T15:04:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/May_2021/019040_Improvement-on-Blockbuilding.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2021/019039_Improvement-on-Blockbuilding.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2021/019020_Improvement-on-Blockbuilding.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019020.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019020.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Improvement on Blockbuilding</title>
    <updated>2025-10-12T01:48:18.157000+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-May/019020.html" rel="alternate"/>
    <published>2021-05-29T15:04:57+00:00</published>
    <summary>Mark and Clara have proposed an improvement to the current Bitcoin Core block building algorithm. Currently, Bitcoin Core uses a straightforward greedy algorithm which evaluates each transaction’s effective fee rate in the context of its unconfirmed ancestors. This overlooks situations in which multiple descendant transactions could be grouped with their shared ancestors to form a more attractive transaction set for block inclusion.Their suggested algorithm, called Candidate Set-based Block Building (CSB), would consider such scenarios, resulting in more efficient use of block space. Experimental data shows that their algorithm did better on more than 94% of blocks (99% for times of high congestion).However, Antoine raises some questions and concerns about the proposal. He wonders if CSB feerate performance will improve as transaction graphs with multiple disjunctive branches become more regular in the future, citing examples like OP_CTV's style congestion-tree, LN's splicing or chain of coinjoins. He also brings up the issue of malicious miners using hard-to-traverse CPFP constellations to prevent competitors from assembling block templates or slowing down their computation. It remains to be seen how much CSB makes that kind of DoS possible/efficient.From the point of view of global blockspace demand, if miners generally became DPFA-sensitive, it could encourage creation of additional transactions for the sole purpose of bumping stuck ancestors. As ASB's ancestor set and CSB's candidate set, a fee bidder would have to pay the feerate to cover the new transaction fields, high enough to catch up with the already-present feerate set. It might be more fee-rate efficient to RBF the first child, but there is a replacement feerate penalty to consider.A suggestion has been made to improve the current Bitcoin Core block building algorithm by a group of developers. They propose an alternative algorithm that considers grouping multiple descendant transactions with their shared ancestors to form a more attractive transaction set for block inclusion. The current straightforward greedy algorithm overlooks such situations and only evaluates each transaction's effective fee rate in the context of its unconfirmed ancestors.To illustrate, four transactions A, B, C, and D are used as an example along with their fee rates and weights. B is a descendant of A, C is a descendant of B, and D is a descendant of A. The current algorithm would consider {A,B,C} best with an effective fee rate of 10, while the suggested algorithm would also consider {A,B,C,D} which has an effective fee rate of 11.Experimental data shows that the proposed algorithm performs better than the current algorithm on more than 94% of blocks and 99% during times of high congestion.The full details of the proposal can be found in a document provided by the developers, and they welcome any comments, criticisms, or suggestions. The research code for the proposed algorithm is also available on Github. The developers note that LP solvers did slightly better than their proposed algorithm but at the cost of longer running times. However, Greg Maxwell's past research suggests that better running times are possible with LP solvers.</summary>
  </entry>
</feed>
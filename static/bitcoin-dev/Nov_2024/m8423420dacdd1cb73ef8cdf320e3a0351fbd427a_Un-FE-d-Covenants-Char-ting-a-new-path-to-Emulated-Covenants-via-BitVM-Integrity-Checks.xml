<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Un-FE’d Covenants: Char-ting a new path to Emulated Covenants via BitVM Integrity Checks</title>
  <updated>2024-12-01T02:54:38.541962+00:00</updated>
  <author>
    <name>jeremy 2024-11-30 18:29:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Un-FE’d Covenants: Char-ting a new path to Emulated Covenants via BitVM Integrity Checks</title>
    <updated>2024-12-01T02:54:38.541996+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/30440182-3d70-48c5-a01d-fad3c1e8048en@googlegroups.com/T/#m8423420dacdd1cb73ef8cdf320e3a0351fbd427a" rel="alternate"/>
    <summary>In the discussion of enhancing security and incentivizing honesty in the context of vaults compared to systems like Ark, a novel approach is proposed focusing on the mechanics of signing oracles. The idea revolves around setting up a system where signing oracles receive payment over time for their services, promoting the operation of long-lasting, honest oracles due to the continuous revenue stream. This contrasts with the potential one-time gain from dishonest actions, thus encouraging the maintenance of integrity.

The method employs a key generation mechanism that operates privately, without the oracle's knowledge of the specific unspent transaction outputs (UTXOs) they might interact with. This setup ensures that oracles can't preemptively target UTXOs for malicious purposes, as they remain unaware of their existence until a signature request is submitted. An additional layer of security could be introduced by modifying the oracle to either blind sign transactions without learning their specifics or utilize homomorphic computations. These techniques allow for the verification of transactions without exposing sensitive details to the oracles or enabling them to broadcast transactions independently.

In a single-party vault scenario, this framework would not only deter misbehavior through the threat of punishment but also inherently limit the oracle's ability to steal coins directly. It suggests a model where a user might employ a 2-of-2 multisignature setup with their own key in tandem with the oracle, enforcing the agreed-upon ruleset collaboratively. However, the issue of ensuring continuous operation or "liveness" remains, which the author suggests addressing through mechanisms such as employing multiple "ultra cold" keys in combination with timelocks to secure the system further.</summary>
    <published>2024-11-30T18:29:00+00:00</published>
  </entry>
</feed>

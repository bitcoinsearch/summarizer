<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Multi-byte opcodes</title>
  <updated>2024-11-17T02:31:49.199704+00:00</updated>
  <author>
    <name>Weikeng Chen 2024-11-16 00:45:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Multi-byte opcodes</title>
    <updated>2024-11-17T02:31:49.199731+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/4235f7d2-8e09-428a-813d-9034cb21f48an@googlegroups.com/T/#u#mab476bda0d92377d10cd7fb74d133991a5ddbbb4" rel="alternate"/>
    <summary>In the ongoing discussion about expanding Bitcoin's opcode functionality without depleting the limited supply of NOPs (No Operation codes), a novel solution has been proposed that revolves around the introduction of multi-byte opcodes. This approach stems from concerns highlighted by Murch regarding the conventional method of adding new opcodes, such as CHECKSIGFROMSTACK(VERIFY/ADD), which traditionally necessitates sacrificing NOPsâ€”a practice deemed unsustainable given the finite number of NOPs available. The suggested mechanism involves utilizing an opcode, tentatively named OP_OP (though alternative names like OP_SETOP or OP_NEXT are under consideration), which would interpret subsequent bytes (e.g., { 0x1521 }) as the new opcode. This method not only conserves NOPs but also introduces a flexible system for opcode extension, albeit at the cost of requiring three bytes for representation.

The proposal acknowledges that most basic functionalities required by users are already addressed by existing opcodes; thus, the addition of new opcodes would primarily focus on fulfilling specific, less frequently needed functions. There's an open question regarding whether to enforce minimal rules for this new opcode system, which could potentially offer a more structured approach versus allowing unrestricted flexibility. Furthermore, it's suggested that unenabled multi-byte opcodes could default to OP_SUCCESS to maintain operational continuity.

This idea represents a shift in focus away from the scarcity of NOPs towards assessing the utility and application scope of potential new opcodes. Despite the innovative nature of this proposal, there's an acknowledgment of the possibility that similar suggestions may have been made previously within the community, albeit hard to trace in the mailing list's history. The proposal invites feedback on this approach, aiming to foster a dialogue on enhancing opcode functionality in a sustainable manner. For more detailed discussions and contributions, interested parties can refer to the original thread on the Bitcoin Development Mailing List, accessible [here](https://groups.google.com/g/bitcoindev/c/usHmnXDuJQc/m/hhtvAjSdCgAJ).</summary>
    <published>2024-11-16T00:45:00+00:00</published>
  </entry>
</feed>

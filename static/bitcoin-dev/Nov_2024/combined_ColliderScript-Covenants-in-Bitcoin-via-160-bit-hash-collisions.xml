<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - ColliderScript: Covenants in Bitcoin via 160-bit hash collisions</title>
  <updated>2024-11-13T02:19:56.971412+00:00</updated>
  <author>
    <name>Antoine Riard 2024-11-12 17:38:00+00:00</name>
  </author>
  <author>
    <name>Ethan Heilman 2024-11-07 17:44:00+00:00</name>
  </author>
  <link href="bitcoin-dev/Nov_2024/m933ae211b37744e7426a9fba0e412d16e0c47640_ColliderScript-Covenants-in-Bitcoin-via-160-bit-hash-collisions.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2024/m22239cd0ba6fec6bb835522be315d50496fefa1c_ColliderScript-Covenants-in-Bitcoin-via-160-bit-hash-collisions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - ColliderScript: Covenants in Bitcoin via 160-bit hash collisions</title>
    <updated>2024-11-13T02:19:56.971452+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAEM=y+W2jyFoJAq9XrE9whQ7EZG4HRST01TucWHJtBhQiRTSNQ@mail.gmail.com/T/#m933ae211b37744e7426a9fba0e412d16e0c47640" rel="alternate"/>
    <summary>The innovative approach outlined in the publication addresses the creation and utilization of Bitcoin covenants using Tapscript, a method that enables covenant construction without the need for soft forks. This advancement simplifies the process of generating covenants to the level of creating standard Pay-to-Witness-Script-Hash (P2WSH) transactions but introduces a significant complexity in their spending. The computational effort required to spend these covenants is highlighted as being exceptionally high, necessitating resources on par with those expended by the entire Bitcoin network over a span of approximately 33 hours. This comparison illustrates the considerable computational demands of covenant spending, suggesting that practical implementation may depend on the future availability of specialized ASIC technology.

The paper emphasizes the trade-offs between computational costs and transaction size limits within the Bitcoin protocol. Despite optimizing for efficiency, transactions employing this new method are expected to reach sizes close to the 4MB limit imposed by the network. This constraint indicates a balance must be struck between enabling complex covenant functionalities and adhering to Bitcoin's transaction size limitations. The document also explores potential applications of this technology, such as enhancing Bitcoin's resilience against quantum computing threats through the use of Lamport signatures facilitated by Tapscript. This example underscores the technique's versatility and its potential to address cryptographic vulnerabilities.

Further, the publication delves into the technical aspects of implementing equivalence checks within Bitcoin's scripting language, introducing a function known as dGen. This function serves as a bridge between traditional Bitcoin script (referred to as Big Script) and a more efficient variant termed Small Script, allowing for the verification of conditions that were previously too computationally intensive to be feasible. This development lays the groundwork for applying covenants on the blockchain in new ways, binding specific conditions to Bitcoin transactions without the extensive computational overhead typically associated. The detailed examination of these algorithms and their impact on the future of Bitcoin can be found in the full paper, available at [colliderscript.co/colliderscript.pdf](https://colliderscript.co/colliderscript.pdf), offering a comprehensive insight into the methodology and its implications for Bitcoin's evolution.</summary>
    <published>2024-11-12T17:38:00+00:00</published>
  </entry>
</feed>

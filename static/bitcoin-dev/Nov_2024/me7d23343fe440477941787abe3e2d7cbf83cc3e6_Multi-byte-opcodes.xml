<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Multi-byte opcodes</title>
  <updated>2024-11-19T02:26:29.849901+00:00</updated>
  <author>
    <name>Brandon Black 2024-11-18 17:15:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Multi-byte opcodes</title>
    <updated>2024-11-19T02:26:29.849932+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAEM=y+VpeEwqWtXqs+RpOFrO=WGzbSkPEEqBqBxc-87Z4ruh2g@mail.gmail.com/T/#me7d23343fe440477941787abe3e2d7cbf83cc3e6" rel="alternate"/>
    <summary>The recent discussion on the Bitcoin Development Mailing List highlighted innovative approaches to opcode behavior in Bitcoin script development. A notable suggestion involves utilizing opcode families where arguments are augmented with flags to influence their behavior, a method already implemented in opcodes like OP_CHECKSIG*. This strategy allows for flexibility in specifying the behavior of the hashing portion of the opcode. Similarly, both OP_CHECKTEMPLATEVERIFY (CTV) and OP_CHECKSIGFROMSTACKVERIFY (CSFSV), as proposed in the current PR, adopt this design philosophy. These opcodes specifically limit the first argument to 32 bytes but do not restrict extensions using different lengths. This opens up possibilities for leveraging varying lengths of either opcode as OP_OP, or creating variants on CTV and CSFSV. The advantage of this approach is its efficient use of the length byte. It serves not only to define the opcode's behavior but also to indicate the total length of the first argument, encompassing both flags and data, thereby optimizing opcode functionality without wasting resources.</summary>
    <published>2024-11-18T17:15:00+00:00</published>
  </entry>
</feed>

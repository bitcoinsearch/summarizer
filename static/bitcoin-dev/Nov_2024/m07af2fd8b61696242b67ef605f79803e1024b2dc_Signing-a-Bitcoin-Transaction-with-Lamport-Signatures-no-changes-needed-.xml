<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Signing a Bitcoin Transaction with Lamport Signatures (no changes needed)</title>
  <updated>2024-11-18T02:30:10.680878+00:00</updated>
  <author>
    <name>Ethan Heilman 2024-11-17 21:59:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Signing a Bitcoin Transaction with Lamport Signatures (no changes needed)</title>
    <updated>2024-11-18T02:30:10.680912+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAEM=y+Veb=TWPBYtK4v7gQm8L9L+zMo6DE-zi6ygP+YJ0XKk_Q@mail.gmail.com/T/#m07af2fd8b61696242b67ef605f79803e1024b2dc" rel="alternate"/>
    <summary>Recent discussions in the Bitcoin development community have highlighted innovative approaches for introspecting Bitcoin's blockchain without relying on the OP_CAT opcode, which include using Collider Script or Functional Encryption. While Collider Script is prohibitively expensive, requiring millions of dollars in computational resources per transaction, Functional Encryption offers a more theoretical pathway with its reliance on still-experimental cryptography. These methods aim to enable the enforcement of covenants and introspection into the blockchain by working around current limitations.

A notable proposal suggests leveraging the OP_SIZE opcode, absent an opcode limit pre-tapscript, to extract specific bits from a spending ECDSA signature, termed as B = &lt;b1, b2, .., bn&gt;. This process involves a two-step verification where a Small Script function compares extracted bits from two ECDSA signatures to confirm their identity. This approach not only circumvents the need for OP_CAT but also broadens the scope of computations that can be performed within Bitcoin's scripting capabilities.

The concept extends further to employing Small Script for extracting sighash from the spending signature, assessing its compliance with predefined rules and values encoded as 32-bit elements. This methodology underscores the potential of Small Script in performing complex computations and validations, previously constrained by Bitcoin's scripting language's limitations. The dialogue around these developments emphasizes the significant impact of removing size limits, as noted by Andrew Poelstra, marking a pivotal step towards enabling covenants within the Bitcoin network. For more information on the distinction between Small Script and Big Script in Bitcoin Script, readers are encouraged to explore [Bitcoin Magazine's article](https://bitcoinmagazine.com/technical/script-state-from-lamport-signatures).</summary>
    <published>2024-11-17T21:59:00+00:00</published>
  </entry>
</feed>

<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Bitcoin Core on ARM (Windows)</title>
  <updated>2025-09-26T14:39:41.840601+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m529ac8e045ebcf74d0c915e6530568ba8d824cbb">
      <author>Bitcoin Core on ARM (Windows) Ali Sherief</author>
      <timestamp>2024-11-21T09:03:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="Bitcoin Core on ARM (Windows) Ali Sherief" parent_id="mailing-list-2024-11-m529ac8e045ebcf74d0c915e6530568ba8d824cbb" anchor="mde6e3888f3eb8203b599467c112e91e1f61044e0">
      <author>Antoine Riard</author>
      <timestamp>2024-11-21T23:57:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Nov_2024/mde6e3888f3eb8203b599467c112e91e1f61044e0_Bitcoin-Core-on-ARM-Windows-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2024/m529ac8e045ebcf74d0c915e6530568ba8d824cbb_Bitcoin-Core-on-ARM-Windows-.xml" rel="alternate"/>
  <link href="https://gnusha.org/pi/bitcoindev/e5b06aaa-1fe9-4c8f-a0ea-db10f8a7e48cn@googlegroups.com/T/#m529ac8e045ebcf74d0c915e6530568ba8d824cbb" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Bitcoin Core on ARM (Windows)</title>
    <updated>2025-09-26T14:39:41.841099+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/e5b06aaa-1fe9-4c8f-a0ea-db10f8a7e48cn@googlegroups.com/T/#m529ac8e045ebcf74d0c915e6530568ba8d824cbb" rel="alternate"/>
    <published>2024-11-21T23:57:00+00:00</published>
    <summary>Compiling Windows for the ARM instruction set architecture involves configuring your compiler, such as gcc or clang, to build your kernel code specifically for ARM hardware platforms. This process does not require a unique ARM toolchain since modern compilers are capable of cross-platform compilation, including building on x86-64 and targeting ARM. The task also involves some linker configurations to manage the assembly functions properly. In the context of the Bitcoin core codebase, there are mentions of x86-specific assembly functions within the secp256k1 library, which are mainly about scalar optimizations. Such details might be particularly interesting, as highlighted in a discussion on the Bitcoin Development Mailing List ([Bitcoindev](https://groups.google.com/g/bitcoindev/c/fOIByS6COMk)). The focus is not necessarily on compiling the entirety of the Bitcoin core but rather on fine-tuning the libbitcoinkernel engine. The inclusion of RISC-V support for the consensus engine's compilation could mark a significant advancement.
On another note, there's an observation that ARM binaries are available for all major operating systems except Windows, despite Apple Silicon being essentially ARM-based. This raises questions about the feasibility of creating ARM binaries for Windows and whether existing methods support Arm64. The Windows build guide suggests Visual Studio as a potential tool that might facilitate ARM support, but the presence of x86-specific assembly functions in the codebase could pose challenges for the build process.</summary>
  </entry>
</feed>
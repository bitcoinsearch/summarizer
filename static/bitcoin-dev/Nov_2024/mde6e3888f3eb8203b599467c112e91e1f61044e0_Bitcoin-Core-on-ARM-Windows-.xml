<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Bitcoin Core on ARM (Windows)</title>
  <updated>2024-11-22T02:27:48.208809+00:00</updated>
  <author>
    <name>Antoine Riard 2024-11-21 23:57:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Bitcoin Core on ARM (Windows)</title>
    <updated>2024-11-22T02:27:48.208846+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/e5b06aaa-1fe9-4c8f-a0ea-db10f8a7e48cn@googlegroups.com/T/#mde6e3888f3eb8203b599467c112e91e1f61044e0" rel="alternate"/>
    <summary>Compiling Windows on the ARM architecture involves configuring the compiler, such as gcc or clang, to build the kernel code specifically for ARM hardware. This process does not require a unique ARM toolchain since modern compilers are capable of cross-platform compilation, notably from x86-64 to ARM, with some additional linker configurations needed to complete the setup.

In the realm of bitcoin core development, the use of x86-specific assembly functions has been identified within the secp256k1 library, particularly concerning scalar optimizations. This detail is significant for developers interested in the technical intricacies of bitcoin's core codebase, highlighting a specific discussion available at [bitcoindev](https://groups.google.com/g/bitcoindev/c/fOIByS6COMk). The focus is less on compiling the entire bitcoin core but more on refining the libbitcoinkernel engine. Moreover, integrating RISC-V support into the consensus engine's compilation could mark a considerable advancement in its development process.

This information is relevant for subscribers and participants of the Bitcoin Development Mailing List, providing insights into the ongoing discussions and developments within the bitcoin programming community.</summary>
    <published>2024-11-21T23:57:00+00:00</published>
  </entry>
</feed>

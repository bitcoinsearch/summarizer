<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[0/4] A Bitcoin Scripting Proposal BIP Quartet</title>
  <updated>2025-09-28T02:46:49.180680+00:00</updated>
  <author>
    <name>Rusty Russell 2025-09-27 08:12:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[0/4] A Bitcoin Scripting Proposal BIP Quartet</title>
    <updated>2025-09-28T02:46:49.180709+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/877bxknwk6.fsf@rustcorp.com.au/T/#m20f4efc6f3423e540b6d43644db14cc2b4db5581" rel="alternate"/>
    <summary>Rusty, with assistance from Julian Moik, has been dedicated to enhancing Bitcoin's scripting language, aiming to restore it to its original capabilities. Their efforts focus on utilizing Script to not only retain its essence but also expand its functionalities, making their work a valuable reference point even for those who may favor alternative approaches. The initiative is currently in a draft phase, available for review at [GitHub](https://github.com/rustyrussell/bips/pull/1).

The project introduces several key innovations and proposals to revitalize Bitcoin scripting. Firstly, it suggests the implementation of a variable operations (varops) budget. This concept evolves from the traditional sigops budget, aiming to limit script operations based on transaction weight. By benchmarking across various machines, this budgeting technique seeks to balance rapid evaluation with the flexibility of scripting capabilities. Once this varops budget is established, it would enable the reactivation of previously disabled opcodes, increase stack object size and capacity, and reintroduce arbitrary-length arithmetic operations, albeit with numbers being exclusively unsigned.

Another significant enhancement is the introduction of an opcode, termed OP_TX, designed to facilitate data introspection within scripts. By allowing scripts to access parts of the current transaction, this opcode simplifies the handling of large data sets and opens up new possibilities for script functionality.

Moreover, the proposal outlines the creation of new opcodes tailored for Tapscript v2. These include OP_CHECKSIGFROMSTACK, OP_SEGMENT, OP_BYTEREV, OP_ECPOINTADD, OP_INTERNALKEY, and OP_MULTI. Each opcode is designed to optimize Script's utility, ranging from familiar concepts to innovative solutions aimed at broadening the scope of what Bitcoin scripts can achieve.

For practical evaluation, a prototype implementation has been utilized, details of which can be found at [this GitHub repository](https://github.com/jmoik/bitcoin/tree/gsr). Rusty and Julian invite feedback on these proposals, signaling openness to debate and discussion on the future direction of Bitcoin scripting capabilities.</summary>
    <published>2025-09-27T08:12:00+00:00</published>
  </entry>
</feed>

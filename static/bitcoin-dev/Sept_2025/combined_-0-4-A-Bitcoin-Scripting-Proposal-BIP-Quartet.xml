<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [0/4] A Bitcoin Scripting Proposal BIP Quartet</title>
  <updated>2025-09-28T02:47:05.177675+00:00</updated>
  <author>
    <name>Rusty Russell 2025-09-27 11:29:00+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2025-09-27 11:29:00+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2025-09-27 11:28:00+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2025-09-27 11:27:00+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2025-09-27 08:12:00+00:00</name>
  </author>
  <link href="bitcoin-dev/Sept_2025/m33ecdca29207192ddd510d322b9dbae2550dea97_-0-4-A-Bitcoin-Scripting-Proposal-BIP-Quartet.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2025/md44d8e3672e4b9bdd461ece657805a8b0d0da8e1_-0-4-A-Bitcoin-Scripting-Proposal-BIP-Quartet.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2025/m94ca41bcf6ebc63f28b787c9af97110cc87c4b66_-0-4-A-Bitcoin-Scripting-Proposal-BIP-Quartet.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2025/m1c24ddd36e9b0549c17301da63df7aee0f42fde5_-0-4-A-Bitcoin-Scripting-Proposal-BIP-Quartet.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2025/m20f4efc6f3423e540b6d43644db14cc2b4db5581_-0-4-A-Bitcoin-Scripting-Proposal-BIP-Quartet.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [0/4] A Bitcoin Scripting Proposal BIP Quartet</title>
    <updated>2025-09-28T02:47:05.177729+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/877bxknwk6.fsf@rustcorp.com.au/T/#m20f4efc6f3423e540b6d43644db14cc2b4db5581" rel="alternate"/>
    <summary>Rusty Russell, along with Julian Moik, has proposed a series of enhancements aimed at restoring and expanding the capabilities of Bitcoin's scripting language, Script. The essence of these proposals is encapsulated within four Bitcoin Improvement Proposals (BIPs), each addressing a different aspect of the scripting system. The overarching goal is to navigate the fine balance between ensuring rapid script evaluation for security and efficiency while unlocking the original, more extensive scripting powers envisioned for Bitcoin.

The first proposal introduces a "varops budget," which builds upon and extends the concept of the sigops budget from BIP342. This new framework proposes a transaction-wide budget based on the transaction's weight, designed to limit the computational intensity of scripts without unduly restricting scripting potential. The varops budget mechanism relies on detailed benchmarks across various machines, ensuring that the limitations set forth are rooted in empirical data and practical considerations.

Following the establishment of the varops budget, the second proposal outlines the restoration of previously disabled script functionalities. With the safety net provided by the varops budget, it becomes feasible to re-enable disabled opcodes, increase stack object sizes and total capacities, and reintroduce arbitrary-length arithmetic operations, albeit with the stipulation that numbers are always treated as unsigned.

The third proposal, OP_TX, addresses the need for improved introspection within scripts. By allowing scripts to push parts of the current transaction onto the stack, this opcode significantly simplifies the process of introspection. The concrete design of OP_TX opens up a rich field for discussion and refinement, highlighting its potential impact on script functionality.

Finally, the fourth proposal ventures into speculative territory by suggesting several new opcodes for Tapscript v2. These include OP_CHECKSIGFROMSTACK, OP_SEGMENT, OP_BYTEREV, OP_ECPOINTADD, OP_INTERNALKEY, and OP_MULTI. Some of these proposals revive older ideas, while others introduce novel concepts to the scripting language. This mix of familiar and new elements underscores the innovative spirit of the proposals, inviting feedback and debate from the community.

In addition to these proposals, a prototype implementation has been shared, offering a practical basis for testing and further development. Through these comprehensive proposals, Rusty Russell and Julian Moik aim to rejuvenate Bitcoin's scripting capabilities, aligning them more closely with the platform's original vision while ensuring robustness and efficiency in script processing.</summary>
    <published>2025-09-27T11:29:00+00:00</published>
  </entry>
</feed>

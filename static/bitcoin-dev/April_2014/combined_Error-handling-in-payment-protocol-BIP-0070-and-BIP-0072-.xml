<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Error handling in payment protocol (BIP-0070 and BIP-0072)</title>
  <updated>2025-10-18T02:29:53.056640+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/April_2014/005611_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2014/005587_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2014/005586_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2014/005584_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2014/005580_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2014/005567_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2014/005550_Error-handling-in-payment-protocol-BIP-0070-and-BIP-0072-.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Error handling in payment protocol (BIP-0070 and BIP-0072)</title>
    <updated>2025-10-18T02:29:53.056751+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-April/005550.html" rel="alternate"/>
    <published>2014-04-27T07:53:25+00:00</published>
    <summary>In a discussion about payment requests, Ross Nicoll expressed caution regarding the security implications of embedding files into the payment request. He noted that even file formats that are presumed safe, such as images, have had security issues in the past. Mike Hearn responded by pointing out that PaymentRequests are limited to 50,000 bytes and that he couldn't think of a reason why payment messages would need to be any bigger than that.Ross suggested embedding the PaymentRequest directly into web pages via the &lt;object&gt; tag in the longer term, which could eliminate the need for BIP0072 and potentially improve user interface integration. However, this would require browser plugins. It's important to keep in mind that links don't always come embedded in html and that native mobile apps also need to be considered in discussions about payment requests.The concern of embedding files into payment requests is due to the security implications it may have. Even file formats like images that are considered safe have had security issues in the past. In response to this, Ross suggests embedding PaymentRequest directly into web pages using the &lt;iframe&gt; tag, which could potentially eliminate the need for BIP0072 and improve user interface integration. However, this approach would require browser plugins.Mike Hearn believes that the current size limit of 50,000 bytes for PaymentRequests should be sufficient. While it might be nice to have images and other visual elements in payment requests to make UIs look prettier, the current size limit should be enough.The PaymentRequests are restricted to 50,000 bytes and there seems to be no reason for payment messages to exceed that limit. If anyone thinks otherwise, they can submit a pull request to the existing BIP. It is suggested that 50kb should be sufficient at present even though it would be good to have images and visuals in payment requests for better user interface in the future.In an email correspondence, Ross suggests standardization for error handling as positive for consistency of user experience. While Gavin Andresen agrees with the need for consistency, he also believes that wallet software should be free to do whatever gives the user the best experience. Ross has taken the main points and created two pull requests (BIP-0070 and BIP-0072) on GitHub for further feedback.The main area of concern is handling unexpected problems while sending the Payment message or receiving the corresponding PaymentACK message. For transport failures or 500 status codes, the client retries after a delay of 30-60 seconds, while for 400 status codes, the request should not be repeated, and the user should be alerted with a copy of the Payment message saved to be resent later. For 300 status codes, it is considered safe to follow redirects. On the merchant's side, Ross suggests that Payment messages should have a fixed maximum size of 10MB and a defined maximum time to wait to avoid DDoS via connection holding. Gavin suggests that PaymentRequests are limited to 50,000 bytes, which seems practical. Regarding repeatedly receiving the same Payment message, Gavin thinks this should be left to implementations to work out. Lastly, there is a potential timing issue with transactions if a merchant system wants to see confirmation of a transaction before sending a PaymentACK. Gavin believes this is not a good idea since the user should get feedback right away, and waiting more than a second or three to get &quot;your payment has been received and is being processed&quot; is terrible UI.Gavin Andresen raises concerns about handling unexpected problems while sending or receiving Payment messages. He proposes that for any transport failure or non-200 HTTP status code, the client should retry after a delay of 30-60 seconds. For 400 status codes, the request should not be repeated, and the user should be alerted with a copy of the Payment message saved to be resent later. Regarding redirect and similar status codes, it is considered safe to follow redirects and referencing whatever RFCs defines how to fetch URLs would be the best way to do this. For merchant systems, Payment messages should have a maximum size of 50,000 bytes, and a defined maximum time to wait to avoid DDoS via connection holding might be useful too. Gavin suggests that merchant systems should handle repeatedly receiving the same Payment message, and return an equivalent (if not identical) PaymentACK to each. Lastly, Gavin wonders about potential timing issues with transactions; if a merchant system wants to see confirmation of a transaction before sending a PaymentACK, he thinks it's not a good idea as the user should get feedback right away.In an email thread from 2014, J Ross Nicoll expressed concern about the lack of specificity on handling error states in the payment protocol specifications. He proposed that for any transport failure or non-200 HTTP status code while sending the Payment message, the client should retry after a delay of 30-60 seconds. For 400 status codes, the request should not be repeated, and as such the user should be alerted and a</summary>
  </entry>
</feed>
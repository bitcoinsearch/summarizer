<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Improving Pre and Post Merging Abilities With Rewriting Core In Python</title>
  <updated>2025-09-26T15:44:29.460326+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="mdadfd00d7a472cc11eff14c77c7a64b7b4ae9ac0">
      <author>[bitcoin-dev] Improving Pre and Post Merging Abilities With Rewriting Core In Python Ahmer Regos</author>
      <timestamp>2019-04-23T08:16:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Improving Pre and Post Merging Abilities With Rewriting Core In Python Ahmer Regos" parent_id="mailing-list-2019-04-mdadfd00d7a472cc11eff14c77c7a64b7b4ae9ac0" anchor="mf5fa16928095892a41c26c8658422d7ed174b084">
      <author>Achow101</author>
      <timestamp>2019-04-23T15:23:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="1" position="2" reply_to="[bitcoin-dev] Improving Pre and Post Merging Abilities With Rewriting Core In Python Ahmer Regos" parent_id="mailing-list-2019-04-mdadfd00d7a472cc11eff14c77c7a64b7b4ae9ac0" anchor="m1aeb2f7e012af019707808b626930f8a94fa9c2a">
      <author>Hampus Sj√∂berg</author>
      <timestamp>2019-04-26T09:38:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="2" position="3" reply_to="Achow101" parent_id="mailing-list-2019-04-mf5fa16928095892a41c26c8658422d7ed174b084" anchor="m640bbc13933b00ecd9a1ad1da01cbd3dac50a8e5">
      <author>Peter Todd</author>
      <timestamp>2019-04-27T03:32:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/April_2019/016896_Improving-Pre-and-Post-Merging-Abilities-With-Rewriting-Core-In-Python.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2019/016895_Improving-Pre-and-Post-Merging-Abilities-With-Rewriting-Core-In-Python.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2019/016893_Improving-Pre-and-Post-Merging-Abilities-With-Rewriting-Core-In-Python.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2019/016890_Improving-Pre-and-Post-Merging-Abilities-With-Rewriting-Core-In-Python.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-April/016890.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Improving Pre and Post Merging Abilities With Rewriting Core In Python</title>
    <updated>2025-09-26T15:44:29.461008+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-April/016890.html" rel="alternate"/>
    <published>2019-04-27T03:32:27+00:00</published>
    <summary>In a discussion on the Bitcoin-dev mailing list, Achow101 suggested the implementation of Bitcoin Core in Python, citing its open-source nature. However, he acknowledged that this was unlikely due to Python's inefficiency and the potential for introducing bugs. Peter Todd, the maintainer of python-bitcoinlib, agreed with this sentiment, cautioning against the use of Python for security-critical codebases due to the ease of making mistakes. Instead, Todd recommended Rust as a language with significant benefits in terms of its type system and handling of immutability. While Todd's preference for Rust does not exclude other languages, he believes it aligns well with his programming style.The proposal to rewrite the Bitcoin codebase in Python aims to improve pre and post merging abilities, expedite operations, and enhance understandability. However, Hampus expressed concerns about the risks associated with rewriting a consensus critical system like Bitcoin in another language. He also argued that there would be no tangible benefit in switching to Python. Additionally, he highlighted past consensus issues between different versions of Bitcoin Core.While Bitcoin Core is open source and can be re-implemented in Python, experts caution against rewriting the entire codebase from C/C++. This undertaking would introduce numerous bugs and lack significant advantages. Moreover, Python is less efficient than C/C++. Consequently, Bitcoin Core will not transition to Python for the entire codebase, but individuals are free to port it themselves.Ahmer Regos from Regain Beaches has proposed a rewrite of the Bitcoin codebase in Python to enhance pre and post merging abilities, expedite operations, and improve overall understandability. Advocating for Python's speed, C support, good syntax, and readability, Regos sees coordinating this transformation as beneficial and eliminating C++ as a positive change.</summary>
  </entry>
</feed>
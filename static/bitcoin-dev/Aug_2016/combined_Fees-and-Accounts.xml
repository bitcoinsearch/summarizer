<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fees and Accounts</title>
  <updated>2025-10-23T02:30:58.506627+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Aug_2016/012929_Fees-and-Accounts.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2016/012926_Fees-and-Accounts.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2016/012924_Fees-and-Accounts.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Fees and Accounts</title>
    <updated>2025-10-23T02:30:58.506684+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/012924.html" rel="alternate"/>
    <published>2016-08-04T00:59:11+00:00</published>
    <summary>In a message posted to the bitcoin-dev mailing list, it is highlighted that many people rely on their own separate account systems and use bitcoind primarily for sending, receiving, and verifying transactions. However, it is noted that bitcoind is not intended to be a comprehensive solution for running an entire bitcoin deposit and withdrawal system; it simply provides the necessary tools for building such a system. For those in need of a pre-built solution, companies like BitGo offer platforms that can fulfill this role.The message also raises concerns about the deprecation of accounts in bitcoind. The poster explains that if they have accounts, they must ensure that account holders do not overcharge their accounts. One potential solution suggested is to use &quot;createrawtransaction() + fundrawtransaction() + signrawtransaction()&quot; to guarantee that the transaction can be paid by an account. However, with accounts being deprecated and no sendrawtransactionfrom() method available, the poster faces the dilemma of either constructing their own account system or presuming that the account code will not be untangled and hacking bitcoind to incorporate a sendfrom function with a fixed fee parameter that overrides the size multiplication.The absence of an integrated account system in bitcoind is deemed problematic as it hinders the effective tracking of all incoming funds to all addresses. Without accounts, bitcoind essentially functions as a person-to-person manual client, making it challenging to establish many-to-many automatic organizations on top of the platform. The poster asserts that there are likely numerous developers facing similar predicaments and warns that deprecating accounts without offering a viable alternative could discourage further bitcoin-related development.The writer identifies two key issues with bitcoind that render it unsuitable for many projects. Firstly, if accounts are present, it becomes crucial to prevent account holders from overcharging their accounts. The suggested workaround involves using &quot;createrawtransaction() + fundrawtransaction() + signrawtransaction()&quot; and ensuring that the transaction can be paid by an account. However, since accounts are deprecated and there is no sendrawtransactionfrom() method, the writer must either develop their own account system or hope that they can successfully modify bitcoind to include a sendfrom function with a fixed fee parameter. Secondly, without accounts, bitcoind is limited to being a person-to-person manual client, making it impossible to construct many-to-many automatic organizations on top of the platform. The writer argues against deprecating accounts as it severely restricts the usability of bitcoind for various projects. They even disclose that they ceased development related to bitcoin after encountering difficulties with transactions requiring fees and the platform's inability to handle such fees within accounts.In conclusion, the writer hopes that developers understand their concerns are genuine rather than mere trolling. They emphasize that without accounts, building many-to-many automatic organizations becomes arduous, necessitating predictable fees. While acknowledging privacy issues with using accounts for off-chain microtransactions, the writer asserts that it currently remains the most viable option.</summary>
  </entry>
</feed>
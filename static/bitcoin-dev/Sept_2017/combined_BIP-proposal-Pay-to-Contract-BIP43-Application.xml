<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BIP proposal, Pay to Contract BIP43 Application</title>
  <updated>2023-08-01T21:26:35.599175+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-03-12 07:05:37+00:00</name>
  </author>
  <author>
    <name>Omar Shibli 2019-03-12 05:53:45+00:00</name>
  </author>
  <author>
    <name>Omar Shibli 2017-09-01 07:16:41+00:00</name>
  </author>
  <author>
    <name>omar shibli 2017-08-15 16:40:36+00:00</name>
  </author>
  <author>
    <name>Gregory Maxwell 2017-08-15 05:12:11+00:00</name>
  </author>
  <author>
    <name>omar shibli 2017-08-14 06:05:35+00:00</name>
  </author>
  <link href="bitcoin-dev/March_2019/016756_BIP-proposal-Pay-to-Contract-BIP43-Application.xml" rel="alternate"/>
  <link href="bitcoin-dev/March_2019/016755_BIP-proposal-Pay-to-Contract-BIP43-Application.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2017/014896_BIP-proposal-Pay-to-Contract-BIP43-Application.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2017/014830_BIP-proposal-Pay-to-Contract-BIP43-Application.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2017/014828_BIP-proposal-Pay-to-Contract-BIP43-Application.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2017/014827_BIP-proposal-Pay-to-Contract-BIP43-Application.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BIP proposal, Pay to Contract BIP43 Application</title>
    <updated>2023-08-01T21:26:35.600176+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-August/014827.html" rel="alternate"/>
    <summary>The email conversation revolves around a proposed method for embedding cryptographic signatures into public keys based on HD Wallets - BIP32. ZmnSCPxj raised concerns about the possibility of an attacker finding two contracts whose derivations alias each other and the possibility of multiple contracting systems. Omar Shibli responded to Gregory Maxwell's feedback with some fixes which he submitted on Github. Omar Shibli further expressed his opinion that the security fix was redundant. However, Gregory Maxwell found this construction insecure and mentioned a scenario where an attacker could take a payment made to one pubkey and assert it was a payment made to another pubkey.In August 2017, Omar Shibli shared his method for embedding cryptographic signatures into a public key based on HD Wallets - BIP32, in a trade finance application. He proposed defining various levels in BIP32 path to compute child public keys and addresses. He also provided an example of contract commitment address computation. However, Gregory Maxwell found this construction insecure and mentioned a scenario where an attacker could take a payment made to one pubkey and assert it was a payment made to another pubkey. Gregory also pointed out that the proposal did not address durability issues. Omar Shibli updated the BIP to address Gregory's concerns.The email thread includes a message from Omar Shibli expressing his appreciation for Gregory Maxwell's work in the FOSS ecosystem, particularly in Bitcoin and Blockstream. He also submitted fixes to Gregory's concerns regarding a security fix patch in the CKD function (BIP32) and requested his review. In another email, Omar shared an updated draft of a BIP specifying the multiparty key derivation scheme for the pay-to-contract protocol and sought feedback. Gregory had previously raised concerns about the security of the construction and durability issues which were not addressed in the proposal. Omar clarified the application of the construction, provided an example and updated the BIP to address Gregory's concerns. The full BIP draft is available on GitHub.A team has developed a basic trade finance application to conduct transactions using the Homomorphic Payment Addresses and the Pay-to-Contract Protocol paper. They have generalised it and made it BIP43 complaint. The team defines levels in BIP32 path as m / purpose' / coin_type' / contract_id' / *. Contract_id is an arbitrary number within the valid range of indices. Then, they define contract base as following prefix: m / purpose' / coin_type' / contract_id'. Contract commitment address is computed by hashing a document with a cryptographic hash function of your choice (e.g. Blake2), mapping the hash to partial derivation path and computing child public key by chaining the derivation path from step 2 with contract base. Payment address funds could be reclaimed only if the customer_contract_signature is provided by the customer. In terms of durability, their app is pretty simple at this point, they don't store anything, they let customer download and manage the files.The construction appears to be completely insecure, according to Gregory Maxwell. He believes that this is because the pubkey is easily manipulated. The team updated the BIP to explicitly specify the multiparty key derivation scheme, which they hope will address Maxwell's concerns. The BIP draft can be found on GitHub. Omar, from the team, thanks Gregory for his feedback and welcomes any further feedback.The email conversation is about a method to embed cryptographic signatures into public keys based on HD Wallets - BIP32. The application uses two cryptographic signatures from both sides for practical purposes. The proposed construction includes contract base, payment base, and payment address which can only be reclaimed by the customer_contract_signature. The current application is not very durable as it doesn't store anything, instead, the customer downloads and manages the files. Gregory Maxwell raises concerns about the security of the construction, its applications, and durability issues. Omar Shibli describes an abstract idea where levels are defined in BIP32 path, contract_id is an arbitrary number within valid indices and contract commitment address is computed using a cryptographic hash function. He also provides an example to illustrate the process. The full BIP draft is available on GitHub, and they seek feedback to develop a standard.A developer named Omar Shibli has proposed a new method for conducting transactions using the Homomorphic Payment Addresses and Pay-to-Contract Protocol, which uses the homomorphic property of elliptic curve encryption to achieve payment. The proposal defines levels in BIP32 path and contract commitment address that is computed by hashing a document with a cryptographic hash function, partitioning the array into parts, converting each part to an integer in decimal format, and joining all strings with a slash. The proposal does not address security concerns around payment to contracts or durability issues when losing funds if the exact contract is lost. There is no standard specification on how to conduct such transactions in cyberspace, but developers hope this proposal will result in a standard for the benefit of the community. The full BIP draft can be found at the provided link.The pay-to-contract protocol</summary>
    <published>2019-03-12T07:05:37+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Great Consensus Cleanup Revival</title>
  <updated>2024-07-12T11:54:13.271658+00:00</updated>
  <author>
    <name>Eric Voskuil 2024-06-29 01:31:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Great Consensus Cleanup Revival</title>
    <updated>2024-07-12T11:54:13.271658+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/gnM89sIQ7MhDgI62JciQEGy63DassEv7YZAMhj0IEuIo0EdnafykF6RH4OqjTTHIHsIoZvC2MnTUzJI7EfET4o-UQoD-XAQRDcct994VarE=@protonmail.com/T/#me0ae0d6389b292cf5624d40aeea573b504297c7e" rel="alternate"/>
    <summary>In a recent exchange, the discussion revolved around enhancing the robustness of coinbase size verification post-socket read operations. The conversation specifically questioned the comparison between utilizing a non-null pointer check versus directly assessing the coinbase size for this purpose. Clarification was sought on whether the term "non-null pointer" referred to a conventional C programming pointer or to a transaction input designated as a "null point," characterized by a sequence of 32 repeating 0x00 bytes followed by 4 0xff bytes. The inquiry aimed to understand how the proposed method offers increased reliability in the context of transaction processing and system stability.</summary>
    <published>2024-06-29T01:31:00+00:00</published>
  </entry>
</feed>

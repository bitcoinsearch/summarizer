<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Great Consensus Cleanup Revival</title>
  <updated>2024-07-12T11:54:05.911208+00:00</updated>
  <author>
    <name>Antoine Riard 2024-06-29 01:53:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Great Consensus Cleanup Revival</title>
    <updated>2024-07-12T11:54:05.911208+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/gnM89sIQ7MhDgI62JciQEGy63DassEv7YZAMhj0IEuIo0EdnafykF6RH4OqjTTHIHsIoZvC2MnTUzJI7EfET4o-UQoD-XAQRDcct994VarE=@protonmail.com/T/#mb10b8ffb47e44ded3aabeda21e18bd7080f4d669" rel="alternate"/>
    <summary>Antoine reached out with an inquiry regarding the robustness of C pointers, particularly in the context of preventing memory and CPU Denial of Service (DoS) issues tied to memory management. He specifically mentioned concerns around hypothetical scenarios where rule checking, such as validating the 64 bytes size for all block transactions, might become a point of vulnerability. To illustrate his point, Antoine referenced the validation logic found in libbitcoin's `block::check()` function, highlighting it as the equivalent of core's CheckBlock process. The function in question is detailed within the libbitcoin system's repository, accessible at [https://github.com/libbitcoin/libbitcoin-system/blob/master/src/chain/block.cppL751](https://github.com/libbitcoin/libbitcoin-system/blob/master/src/chain/block.cppL751). Antoine's communication underscores a keen interest in understanding how memory and CPU DoS vulnerabilities can be mitigated through effective memory management practices and robust pointer usage in programming.</summary>
    <published>2024-06-29T01:53:00+00:00</published>
  </entry>
</feed>

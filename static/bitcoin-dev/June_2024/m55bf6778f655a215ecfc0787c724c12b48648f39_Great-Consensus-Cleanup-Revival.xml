<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Great Consensus Cleanup Revival</title>
  <updated>2024-07-12T11:54:27.049158+00:00</updated>
  <author>
    <name>Antoine Riard 2024-06-29 01:06:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Great Consensus Cleanup Revival</title>
    <updated>2024-07-12T11:54:27.050165+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/gnM89sIQ7MhDgI62JciQEGy63DassEv7YZAMhj0IEuIo0EdnafykF6RH4OqjTTHIHsIoZvC2MnTUzJI7EfET4o-UQoD-XAQRDcct994VarE=@protonmail.com/T/#m55bf6778f655a215ecfc0787c724c12b48648f39" rel="alternate"/>
    <summary>Antoine highlights a critical aspect of blockchain security, focusing on the validation process within the context of potential attacks involving malleated blocks. He draws attention to the importance of conducting a size check on the coinbase immediately after a socket read, emphasizing that this approach could offer more robustness than simply checking for non-null pointers. This is particularly relevant when dealing with an attacker who might pass a sequence of malleated blocks with already verified headers, a scenario that necessitates operating under weaker assumptions about computational infeasibility.

Furthermore, Antoine delves into the complexity introduced by ensuring that merkle tree leaf and non-leaf nodes belong to different domains. Although acknowledging that this increases software complexity, he argues that such discontinuities could introduce computational asymmetries that favor validating nodes, potentially making them worthwhile considerations for soft-fork extensions.

The discussion also touches upon the proposed implementation in the Bitcoin Inquisition, noting that the efficiency of using a 64-byte technique to check for full block malleability is highly dependent on the specific implementation. Antoine expresses concern over the dependency of block validation checks on the order of operations following a socket read, suggesting that finding a solution to this issue remains elusive.

In conclusion, Antoine proposes the development of a comprehensive "fast block malleability validation" algorithm. He suggests that such an algorithm should leverage SipHash and emphasizes the need for its implementation and benchmarking within the core system before considering the invalidity of 64-byte transactions at the consensus level. This recommendation underscores the ongoing search for more effective strategies to enhance blockchain security and integrity.</summary>
    <published>2024-06-29T01:06:00+00:00</published>
  </entry>
</feed>

<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Safe auto-updating</title>
  <updated>2025-10-11T21:32:13.544171+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <author>
    <name>Mike Hearn 2013-08-07 08:41:54+00:00</name>
  </author>
  <author>
    <name>Wendell 2013-08-07 04:32:08+00:00</name>
  </author>
  <author>
    <name>Peter Todd 2013-08-05 17:49:36+00:00</name>
  </author>
  <author>
    <name>Jim 2013-08-05 17:14:00+00:00</name>
  </author>
  <author>
    <name>Alan Reiner 2013-08-05 16:47:30+00:00</name>
  </author>
  <author>
    <name>Daniel F 2013-08-05 15:54:02+00:00</name>
  </author>
  <author>
    <name>Wendell 2013-08-05 14:39:49+00:00</name>
  </author>
  <link href="bitcoin-dev/Aug_2013/003068_Safe-auto-updating.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2013/003067_Safe-auto-updating.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2013/003065_Safe-auto-updating.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2013/003064_Safe-auto-updating.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2013/003063_Safe-auto-updating.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2013/003062_Safe-auto-updating.xml" rel="alternate"/>
  <link href="bitcoin-dev/Aug_2013/003060_Safe-auto-updating.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-August/003060.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Safe auto-updating</title>
    <updated>2025-10-11T21:32:13.544332+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-August/003060.html" rel="alternate"/>
    <published>2013-08-07T08:41:54+00:00</published>
    <summary>In response to Wendell's query, members of the Bitcoin-development mailing list provide suggestions and recommendations for implementing an auto-updater in Hive's wallet app. One proposed solution involves using a distributor public key hardcoded in the software, where client software only trusts signed data from that key. The private key for this data should be kept offline, and when executing an upgrade, new checksums are signed offline and uploaded to the distribution server. Even if the server is compromised, the client-side software will not accept a bogus checksum because it won't bear the right signature.The discussion also highlights the importance of including digital signing in package authentication, rather than relying solely on a checksum. It is noted that a compromised host can change both the checksum and binaries undetectably. However, if there is a signature made by a key that is not kept on the host, it is impossible to fake a valid binary. This suggestion aims to enhance security and minimize damage in case of compromise.Additionally, the conversation mentions the possibility of implementing a revocation process in the event of the offline key being compromised. This process would involve broadcasting a revocation that forces clients to start rejecting updates from that key. If a compromise is detected, users will receive a warning to manually upgrade the software through trusted channels.While discussing auto-updaters, the thread veers off-topic briefly, with someone sharing information about getting SQL databases under version control. The email thread ends with links provided to the SQL database version control and Bitcoin-development mailing list for further reference.</summary>
  </entry>
</feed>
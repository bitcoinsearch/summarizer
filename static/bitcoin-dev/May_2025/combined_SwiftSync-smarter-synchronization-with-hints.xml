<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - SwiftSync - smarter synchronization with hints</title>
  <updated>2025-05-03T02:46:47.391419+00:00</updated>
  <author>
    <name>Greg Maxwell 2025-05-02 16:07:00+00:00</name>
  </author>
  <author>
    <name>Saint Wenhao 2025-05-02 13:38:00+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2025-05-02 10:59:00+00:00</name>
  </author>
  <author>
    <name>Greg Maxwell 2025-05-02 06:47:00+00:00</name>
  </author>
  <author>
    <name>Ruben Somsen 2025-04-09 10:10:00+00:00</name>
  </author>
  <link href="bitcoin-dev/May_2025/m0f11791d994af3adb5a70c9733f06410f52bc109_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m7df2c1e5c9bf238cdecb4b17c19b2748c661c33d_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m50555ae81a28fe83bbb36885202d29da92c91fe1_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/mef1818d6816c73519a32f975acb9d09fc0d773ce_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2025/mc66763934f25b65ce5006f0a4dd19cd359a8b452_SwiftSync-smarter-synchronization-with-hints.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - SwiftSync - smarter synchronization with hints</title>
    <updated>2025-05-03T02:46:47.391473+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAPv7TjaM0tfbcBTRa0_713Bk6Y9jr+ShOC1KZi2V3V2zooTXyg@mail.gmail.com/T/#u#mc66763934f25b65ce5006f0a4dd19cd359a8b452" rel="alternate"/>
    <summary>SwiftSync represents an innovative approach designed to enhance the Bitcoin blockchain's validation process by enabling nearly stateless and fully parallelizable operations. This method relies on utilizing hints concerning unspent outputs to streamline the validation process significantly, with the total size of these hints being less than 100MB. SwiftSync employs a hash aggregate technique, which helps in confirming the success of validations without the need for maintaining a continuous Unspent Transaction Output (UTXO) set during the Initial Block Download (IBD). This allows for operations that are independent of order, facilitating a more efficient validation process.

The core functionality of SwiftSync involves assigning boolean hints to each output, indicating whether it is expected to remain unspent post-validation within the UTXO set. Outputs predicted to be unspent are stored in an append-only manner for future use upon completion of SwiftSync. In contrast, data for outputs anticipated to be spent are hashed and included in an aggregate. This procedure is similarly applied to inputs, where their corresponding UTXO data is hashed and removed from the aggregate, aiming for a final aggregate value of zero. This indicates successful validation and accuracy of the provided hints. However, challenges arise due to the availability of UTXO data at the time of output processing but not during input processing. SwiftSync addresses this by either downloading outputs related to spent transactions for each block or employing the assumevalid feature, which allows hashing outpoints instead of full UTXO data, thereby reducing bandwidth usage and enhancing processing speed, especially on devices constrained by RAM or those with multiple CPU cores.

Initial tests of SwiftSync have shown promising results, with a potential speed-up factor of 5.28x, although this was observed in phases of largely sequential execution. Further details on SwiftSync's functionality, including its security measures against specific cryptographic challenges, the role and implications of the assumevalid setting, methods for conducting inflation checks without direct access to amount data, validating transaction orders in parallel, conducting BIP30 checks without needing the full UTXO set, and how it relates to the assumeutxo concept, are elaborated in a detailed analysis available at [RubenSomsen's gist](https://gist.github.com/RubenSomsen/a61a37d14182ccd78760e477c78133cd). This analysis aims to shed light on the operational aspects of SwiftSync and encourages community feedback to identify possible overlooked concerns or issues.</summary>
    <published>2025-05-02T16:07:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Sybil resistance in different coinjoin implementations</title>
  <updated>2025-05-29T02:55:23.395614+00:00</updated>
  <author>
    <name>/dev /fd0 2025-05-27 14:29:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Sybil resistance in different coinjoin implementations</title>
    <updated>2025-05-29T02:55:23.395645+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/8fb3deaf-417c-4ec9-9d23-424c4926905an@googlegroups.com/T/#u#m15b77e2efb8827845080a3613bf83dc254636ea3" rel="alternate"/>
    <summary>The post delves into a comparative analysis of the sybil resistance offered by various CoinJoin implementations, specifically focusing on JoinMarket, JoinStr, and WabiSabi, while explicitly excluding Whirlpool due to its obsolescence and similarity in performance to WabiSabi. The author clarifies that the conclusions drawn are based on extensive research, highlighting that although JoinMarket exhibits satisfactory sybil resistance, JoinStr emerges as the superior option among the ones analyzed. The post aims to provide insights into the effectiveness of these implementations in resisting sybil attacks, inviting feedback from the Bitcoin developer community. For those interested in exploring this analysis further, the author has provided a link to the full article available at [https://uncensoredtech.substack.com/p/sybil-resistance-in-coinjoin-implementations](https://uncensoredtech.substack.com/p/sybil-resistance-in-coinjoin-implementations). This invitation for feedback suggests an openness to discussion, reflecting the ongoing nature of security enhancements in the realm of cryptocurrency transactions.</summary>
    <published>2025-05-27T14:29:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Re: BIP39 Extension for Manual Seed Phrase Creation</title>
  <updated>2025-05-26T02:57:51.554658+00:00</updated>
  <author>
    <name>nerdyrugbyguy 2025-05-25 14:26:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Re: BIP39 Extension for Manual Seed Phrase Creation</title>
    <updated>2025-05-26T02:57:51.554691+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/4c376336-1fe3-4b1c-b13b-8dcc2075e758n@googlegroups.com/T/#mc436d7c3c75dfcda81f9031b3e3ad42fa1ede7ea" rel="alternate"/>
    <summary>Eric Kvam highlights the complexities and challenges associated with bitcoin self-custody, emphasizing the general public's difficulty in understanding and applying binary math and checksums necessary for securely managing bitcoin. He reflects on his experiences teaching these concepts to a group of individuals with engineering degrees, noting the significant challenge it posed despite their technical background. This underscores the broader issue that bitcoin custody solutions are often either too complex for the average user or require trust in opaque systems, raising questions about bitcoin's accessibility for non-technical users.

Kvam discusses the proposal of a UEFI application designed to generate seed phrases from entropy input, akin to other existing tools but potentially offering improvements in usability and security. The conversation touches upon the need for a standard format for encoding entropy, as current methods like hex or binary are prone to errors and not user-friendly. He suggests an extension to existing standards to facilitate this process, outlining the current options for seed generation which range from developer-only tools that can be verified and built independently, to black box tools that require trust in the tool's integrity, and methods involving manual calculations and cross-checking that are inaccessible to most.

Furthermore, Kvam delves into the specifics of creating a secure bitcoin wallet, including the use of SHA256 for checksum calculation and various cryptographic operations required to derive child keys and addresses from a seed phrase. He mentions his development of a bootable UEFI application for generating mnemonics through airgapped operation, indicating plans to revisit and publish this tool as part of a larger project. Despite recognizing the adequacy of BIP39 and related protocols, he calls for further discussion on encoding derivation paths within mnemonics, suggesting that while Electrum's Seed Version System offers a partial solution, descriptors present a more effective method for managing wallet metadata.

The email concludes with Kvam advocating for user education over attempts to simplify or obscure critical information, arguing that informed users are better equipped to manage their bitcoin securely. This stance reflects a broader debate within the bitcoin community regarding the balance between usability and security, especially in the context of self-custody solutions.</summary>
    <published>2025-05-25T14:26:00+00:00</published>
  </entry>
</feed>

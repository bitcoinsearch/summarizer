<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Proposal] 64-bit arithmetic in Script</title>
  <updated>2025-05-14T02:49:10.900895+00:00</updated>
  <author>
    <name>Chris Stewart 2025-05-13 09:03:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Proposal] 64-bit arithmetic in Script</title>
    <updated>2025-05-14T02:49:10.900923+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALxbBHW8YD-F2N9PYcAii5wXfEAPratQ6i6ke-i59pdoFczSoA@mail.gmail.com/T/#mc86978fb358287629daa108102534306bf11f313" rel="alternate"/>
    <summary>In the correspondence from Christian Decker regarding the potential for consensus changes within Bitcoin's Script language, a comprehensive discussion on the introduction of new opcodes as part of Tapscript enhancements is detailed. The focus centers around the deployment and utility of these opcodes, specifically highlighting the introduction of 64-bit arithmetic capabilities through proposals like OP_{IN,OUT}_AMOUNT, OP_VAULT, OP_CHECKCONTRACTVERIFY (OP_CCV), and leveraging OP_SUCCESSx semantics for redefining existing opcode behaviors. This initiative aims to facilitate broader consensus changes that could significantly impact scripting capabilities within the Bitcoin network.

Decker elaborates on the strategic deployment of these opcodes, particularly emphasizing the advantages of utilizing OP_SUCCESSx semantics over NOP opcodes for introducing new script features. This approach not only ensures backward compatibility but also supports parallel shipping of new features with the new opcode, enhancing the efficiency and flexibility of script upgrades. The discussion extends into the realm of cryptographic resilience, touching upon the considerations for numerical precision in light of emerging quantum computing threats. While 64-bit arithmetic is deemed sufficient for current needs, such as amount locks, there's an acknowledgment of the potential necessity for higher precision, suggesting that arbitrary precision could be explored through OP_SUCCESSx if the community sees a need beyond the proposed 64-bit limit.

Furthermore, Decker addresses inquiries regarding the proposal's focus on aggregate sums rather than individual transaction outputs. He clarifies the technical limitations within Script, such as the absence of looping functionalities, which complicates the iteration over and summation of all transaction elements based on their count. This limitation underlines the challenges in expanding Script's capabilities and invites further discussion on alternative approaches to enhance its functional scope.

The conversation is enriched with references to external resources, including a [GitHub link](https://github.com/Christewart/bips/blob/2025-03-17-64bit-pt2/bip-XXXX.mediawikicite_note-18) to the BIP proposal and discussions on deployment strategies and cryptographic considerations found in [StackExchange posts](https://bitcoin.stackexchange.com/q/125237) and [another post providing insight into arbitrary precision](https://bitcoin.stackexchange.com/a/126153/20835). These resources offer additional depth to the discourse, facilitating a broader understanding of the implications and technical intricacies involved in evolving Bitcoin's scripting language through these proposed consensus changes.</summary>
    <published>2025-05-13T09:03:00+00:00</published>
  </entry>
</feed>

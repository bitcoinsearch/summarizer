<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SwiftSync - smarter synchronization with hints</title>
  <updated>2025-05-05T02:52:15.369737+00:00</updated>
  <author>
    <name>Nagaev Boris 2025-05-04 01:06:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SwiftSync - smarter synchronization with hints</title>
    <updated>2025-05-05T02:52:15.369773+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAPv7TjaM0tfbcBTRa0_713Bk6Y9jr+ShOC1KZi2V3V2zooTXyg@mail.gmail.com/T/#m55cda697293b263ed442e865b14a4c8d2d15a928" rel="alternate"/>
    <summary>The discussion revolves around the practicality and feasibility of utilizing the Haraka V2 hash function within a specific application context. Haraka V2, recognized for its foundation on AES, is highlighted for its capability to manage inputs of either 256 or 512 bits. A particular use case presented involves handling UTXO (Unspent Transaction Output), which comprises a transaction identifier plus an index, collectively amounting to a size of 320 bits. The suggestion put forth is leaning towards adopting the 512-bit version of the Haraka V2 hash function. This approach would entail filling the excess capacity with zero bytes to accommodate the UTXO's fixed size. The conversation underscores an ongoing evaluation among professionals engaged in Bitcoin development, reflecting on technical considerations pertinent to hashing functions and their alignment with blockchain data structures. The discourse is part of exchanges occurring within the "Bitcoin Development Mailing List," a platform fostering dialogue among individuals involved in the enhancement and evolution of Bitcoin technology.</summary>
    <published>2025-05-04T01:06:00+00:00</published>
  </entry>
</feed>

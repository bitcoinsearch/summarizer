<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SwiftSync - smarter synchronization with hints</title>
  <updated>2025-05-03T02:46:24.029978+00:00</updated>
  <author>
    <name>Greg Maxwell 2025-05-02 06:47:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SwiftSync - smarter synchronization with hints</title>
    <updated>2025-05-03T02:46:24.030008+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAPv7TjaM0tfbcBTRa0_713Bk6Y9jr+ShOC1KZi2V3V2zooTXyg@mail.gmail.com/T/#mef1818d6816c73519a32f975acb9d09fc0d773ce" rel="alternate"/>
    <summary>Ruben Somsen's message highlights an innovative approach that maintains security properties akin to the assume valid mechanism while introducing enhanced performance and optimization opportunities. The discussed scheme benefits from its non-normative nature, allowing for flexibility and updates without permanent commitments. This adaptability means the entire framework can be revised in subsequent versions without negative impacts, barring potential issues when initiating Initial Block Download (IBD) with one version and attempting completion with another.

The efficiency of the proposed method is partly attributed to the handling of hashes, particularly if a Merkle-Damg√•rd (MD) style hash function like SHA-256 is utilized. Placing the salt before the data allows for the midstate of the hash function to be reused, potentially doubling hashing performance. Given that hashing is assumed to be a significant portion of the profile cost, even a one-third improvement would be noteworthy. It's advised to minimize compression function runs to enhance this efficiency further.

Additionally, the scheme allows for optimization in the storage of hints through careful management of false positives. False positives are deemed harmless as long as they remain infrequent, suggesting a strategy where extra transaction outputs (txouts) can be safely ignored until they're found to be spent, at which point they can be removed. This could lead to a more memory and read-efficient system. For instance, employing ribbon filters could optimize space by constructing a hash table through solving a linear system to ensure all inputs match, aiming for a specific false positive rate. While cuckoo filters with two or four memory accesses could also serve this purpose, the need for runtime modifications makes them less ideal compared to solutions that optimize for space and efficiency.</summary>
    <published>2025-05-02T06:47:00+00:00</published>
  </entry>
</feed>

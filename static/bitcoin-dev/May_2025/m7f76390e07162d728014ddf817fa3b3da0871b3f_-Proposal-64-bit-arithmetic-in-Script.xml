<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>[Proposal] 64-bit arithmetic in Script</title>
  <updated>2025-05-15T02:53:15.801317+00:00</updated>
  <author>
    <name>Chris Stewart 2025-05-14 08:23:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>[Proposal] 64-bit arithmetic in Script</title>
    <updated>2025-05-15T02:53:15.801347+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALxbBHWP=zOfT0+YM=4MgR6SEuT9CCFHQEuH_mkgtDKiRxpfog@mail.gmail.com/T/#m7f76390e07162d728014ddf817fa3b3da0871b3f" rel="alternate"/>
    <summary>The ongoing discussion on the Great Opcode Restoration (GSR) initiative has attracted attention and prompted a request for updates regarding its progress since Rusty’s last public exposition approximately a year and a half ago, as detailed in his blog post [The Great Opcode Restoration](https://rusty.ozlabs.org/2024/01/19/the-great-opcode-restoration.html). There’s an interest in any new materials, including additional posts, work-in-progress Bitcoin Improvement Proposals (BIPs), or code, that could provide further insight or allow for prototyping and discussion. Despite not opposing the broad goals of GSR, concerns have been raised about its ambitious nature, particularly around the implementation of 64-bit precision to enable amount locks which is seen as a highly requested feature.

The conversation delves into the technical aspects, questioning the necessity of arbitrary precision beyond 64-bit arithmetic for executing certain opcodes. Two specific operations from the Elements project, ECMULSCALARVERIFY and TWEAKVERIFY, are highlighted as examples that operate on 256-bit stack arguments and verify cryptographic conditions without the need for parsing into CScriptNum, thus questioning the requirement for supporting more precision in Script. These operations, found at respective links [ECMULSCALARVERIFY](https://github.com/ElementsProject/elements/blob/7ed597f4a5f713e33aac04c87c1a9da5ecd7d52c/src/script/interpreter.cppL2193) and [TWEAKVERIFY](https://github.com/ElementsProject/elements/blob/7ed597f4a5f713e33aac04c87c1a9da5ecd7d52c/src/script/interpreter.cppL2219), do not support composition with existing arithmetic opcodes like OP_ADD or OP_SUB, but simply verify cryptographic conditions.

There's an expressed interest in compiling a list of potential opcodes that would benefit from arbitrary precision in a centralized location. This compilation would assist other protocol developers by providing a comprehensive view of the possibilities enabled by such precision. The message concludes with an inquiry on how one can contribute to this effort, indicating a desire for collaborative development and feedback within the Bitcoin development community.</summary>
    <published>2025-05-14T08:23:00+00:00</published>
  </entry>
</feed>

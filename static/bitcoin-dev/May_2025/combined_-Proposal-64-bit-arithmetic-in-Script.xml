<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [Proposal] 64-bit arithmetic in Script</title>
  <updated>2025-05-13T03:00:10.374377+00:00</updated>
  <author>
    <name>Martin Habov≈°tiak 2025-05-12 19:32:00+00:00</name>
  </author>
  <author>
    <name>Chris Stewart 2025-05-12 16:15:00+00:00</name>
  </author>
  <link href="bitcoin-dev/May_2025/m3510dcf38fe98f318e45ff188e6b66d1d85c7d0d_-Proposal-64-bit-arithmetic-in-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m7e7d58d73e7e8bb1034f218dad981608f5b89422_-Proposal-64-bit-arithmetic-in-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [Proposal] 64-bit arithmetic in Script</title>
    <updated>2025-05-13T03:00:10.374415+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALkkCJbeAYA2X8jv8iWthKBB8GqxA49DCFm+UMnhmXYpexTNtw@mail.gmail.com/T/#m7e7d58d73e7e8bb1034f218dad981608f5b89422" rel="alternate"/>
    <summary>The discussion involves a proposal to modify Bitcoin's Script language, specifically targeting the enhancement of numeric operands and arithmetic operation ranges. The proposed soft fork seeks to extend the existing range of numeric operands within the Script from -2^31+1 to 2^31-1, broadening it to -2^63+1 to 2^63-1. Additionally, it intends to expand the result range for arithmetic operations from the current -2^63 to 2^63-1, extending further to -2^127 to 2^127-1. This shift implies upgrading all existing opcodes that process stack elements as numbers to accommodate 64-bit parameters, thereby significantly enhancing computational precision.

The preservation of the original number encoding format and arithmetic semantics established in Bitcoin's inception is emphasized, ensuring backward compatibility and stability within the system. Such upgrades are pivotal for maintaining the integrity and efficiency of Bitcoin's operational logic. The rationale behind this proposal is to pave the way for introducing monetary amounts into the Script, although it remains neutral on the specifics of implementation. [Here is the link to the detailed proposal](https://github.com/Christewart/bips/blob/2025-03-17-64bit-pt2/bip-XXXX.mediawiki).

Chris Stewart, who has already prototyped several proposals for incorporating amount locks into Script, believes this particular proposal is stable enough to warrant serious review. The communication underscores an ongoing dialogue within the Bitcoin Development Mailing List about the technical feasibility and implications of such a change, highlighting both the innovative potential and the complexities involved in evolving Bitcoin's scripting capabilities.</summary>
    <published>2025-05-12T19:32:00+00:00</published>
  </entry>
</feed>

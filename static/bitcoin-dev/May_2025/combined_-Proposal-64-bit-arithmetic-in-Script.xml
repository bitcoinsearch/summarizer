<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - [Proposal] 64-bit arithmetic in Script</title>
  <updated>2025-05-14T02:49:24.037941+00:00</updated>
  <author>
    <name>Christian Decker 2025-05-13 11:44:00+00:00</name>
  </author>
  <author>
    <name>Chris Stewart 2025-05-13 09:03:00+00:00</name>
  </author>
  <author>
    <name>Martin Habov≈°tiak 2025-05-12 19:32:00+00:00</name>
  </author>
  <author>
    <name>Chris Stewart 2025-05-12 16:15:00+00:00</name>
  </author>
  <link href="bitcoin-dev/May_2025/m405653cb0cc55ebdb44213ad7a2cdab782488894_-Proposal-64-bit-arithmetic-in-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/mc86978fb358287629daa108102534306bf11f313_-Proposal-64-bit-arithmetic-in-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m3510dcf38fe98f318e45ff188e6b66d1d85c7d0d_-Proposal-64-bit-arithmetic-in-Script.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2025/m7e7d58d73e7e8bb1034f218dad981608f5b89422_-Proposal-64-bit-arithmetic-in-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - [Proposal] 64-bit arithmetic in Script</title>
    <updated>2025-05-14T02:49:24.037990+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALkkCJbeAYA2X8jv8iWthKBB8GqxA49DCFm+UMnhmXYpexTNtw@mail.gmail.com/T/#m7e7d58d73e7e8bb1034f218dad981608f5b89422" rel="alternate"/>
    <summary>The conversation begins with a consideration of a proposal aimed at advancing Bitcoin development by modifying existing opcodes, a process typically associated with significant protocol changes such as hardforks. This is due to the requirement for alterations in the leaf version. The introduction of OP_SUCCESSX is suggested as an innovative approach involving different opcodes, highlighting the need for comprehensive analysis to determine the feasibility and effectiveness of such an initiative. There is a particular focus on the decision to limit upgrades to 64 bits rather than expanding to 256 bits, which could offer substantial cryptographic benefits. This point raises questions about the depth of examination into the proposal's technical details and its implications for future developments. Furthermore, the proposal's emphasis on summing capabilities without addressing individual outputs prompts inquiries about its scope and potential limitations. The email underscores a critical view toward the proposed modifications, suggesting that a thorough analysis and justification are required to fully evaluate the proposal's viability. It reflects ongoing discussions within the Bitcoin development community regarding optimal approaches to implementing enhancements, taking into account both technical and strategic considerations.

The proposed soft fork seeks to significantly improve the numerical capabilities of Script by extending the numeric operand range from the current limits to a broader range, as well as expanding the result range for arithmetic operations. This would apply to all existing opcodes that interpret stack elements as numbers, upgrading them to support 64-bit parameters. This improvement aims to maintain the original number encoding format and arithmetic semantics of Bitcoin while increasing precision. The GitHub repository provides detailed documentation and discussion of these changes. Chris, the author, aims to prepare the groundwork for incorporating monetary amounts into Script, although the document remains neutral on the specifics of how this should be achieved. Chris has prototyped several proposals related to amount locks in Script, indicating the proposal's stability and readiness for community review. The communication highlights the intended technical advancements to enhance the functionality of the Bitcoin scripting language and considers its future impact.</summary>
    <published>2025-05-13T11:44:00+00:00</published>
  </entry>
</feed>

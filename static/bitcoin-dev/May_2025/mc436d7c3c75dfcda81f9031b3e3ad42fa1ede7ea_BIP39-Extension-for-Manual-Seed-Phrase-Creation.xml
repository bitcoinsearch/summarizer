<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP39 Extension for Manual Seed Phrase Creation</title>
  <updated>2025-09-23T14:08:31.497911+00:00</updated>
  <author>
    <name>nerdyrugbyguy 2025-05-25 14:26:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP39 Extension for Manual Seed Phrase Creation</title>
    <updated>2025-09-23T14:08:31.497945+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADXQin4VbtvyWDGYLJB0HyJ2+Eai-01CKt6J6UzXM9qtdGJbuw@mail.gmail.com/T/#mc436d7c3c75dfcda81f9031b3e3ad42fa1ede7ea" rel="alternate"/>
    <summary>The discourse presented by Eric Kvam revolves around the complexities and challenges associated with bitcoin seed phrase generation and the broader implications for user accessibility and security. Kvam’s insights begin with a personal anecdote about the use of coin flips to create a seed phrase a decade ago, leading to the establishment of a bitcoin club and the creation of printed guides aimed at demystifying the process for others. Despite these efforts, Kvam observes a general struggle among individuals, even those with engineering backgrounds, to grasp the mathematical concepts essential for bitcoin self-custody, such as binary math and checksums. This observation underscores a fundamental question regarding whether bitcoin is designed for a select group of 'elites' or for the wider public ('plebs').

Kvam then delves into the technical specifics of seed generation, juxtaposing "white box" tools, which are transparent but require technical verification skills, against "black box" tools that operate without the user's understanding of their internal workings. The discussion highlights the inherent difficulties in using non-standard formats for entropy input, a necessary step for creating a seed phrase without reliance on pre-existing tools. This process, as outlined, is fraught with potential errors and is deemed too complex for the average user, implying a significant barrier to widespread adoption of secure bitcoin self-custody practices.

Further, Kvam touches upon the possibility of standardizing the format for encoding entropy, which could simplify the seed generation process and potentially make it more accessible to a broader audience. However, he also acknowledges the current adequacy of the BIP39 specification for generating mnemonics from entropy not generated by computers, recommending coin flips with Von Neumann skew correction for this purpose. Despite the technical steps involved beyond the generation of a mnemonic, including SHA256 hashing and EC point multiplication, Kvam suggests that these complexities do not necessitate a change in the mnemonic generation specifications themselves.

Lastly, Kvam mentions his work on a bootable UEFI application designed for air-gapped operation, which facilitates the generation of a mnemonic with skew-corrected coin flips, among other features. He expresses willingness to revisit and publish this tool as part of a larger project if there is sufficient interest. Additionally, Kvam briefly discusses the encoding of derivation paths in mnemonics, noting existing solutions like Electrum’s Seed Version System and advocating for the use of descriptors for managing wallet metadata. He concludes with a call for educating users as a preferable approach to simplifying or abstracting critical information, emphasizing the importance of user awareness of standard derivation paths and the overall functionality of bitcoin wallets.</summary>
    <published>2025-05-25T14:26:00+00:00</published>
  </entry>
</feed>

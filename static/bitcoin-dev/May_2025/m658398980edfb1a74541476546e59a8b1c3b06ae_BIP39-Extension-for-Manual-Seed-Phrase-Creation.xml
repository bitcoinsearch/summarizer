<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>BIP39 Extension for Manual Seed Phrase Creation</title>
  <updated>2025-07-01T05:38:40.748944+00:00</updated>
  <author>
    <name>pithosian 2025-05-25 21:41:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>BIP39 Extension for Manual Seed Phrase Creation</title>
    <updated>2025-07-01T05:38:40.748980+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CADXQin4VbtvyWDGYLJB0HyJ2+Eai-01CKt6J6UzXM9qtdGJbuw@mail.gmail.com/T/#m658398980edfb1a74541476546e59a8b1c3b06ae" rel="alternate"/>
    <summary>In a recent discussion among programmers on the Bitcoin Development Mailing List, there was an exploration of alternative methods for representing data that are typically used in descriptors, particularly focusing on the utility and practicality of hand-calculated mnemonics versus existing standards. The conversation highlighted the complexity involved in generating secure cryptographic keys, specifically referencing the processes like SHA512 PBKDF2 for generating a BIP 32 seed and SHA512 HMAC for deriving the root private key from that seed. This process is compared to the BIP 39 specification, which is designed for encoding numbers into a Base2048 format with an integrated checksum, similar in its core concept to other base number systems but distinguished by its use of a word list for encoding and the addition of a checksum for verification purposes.

Furthermore, the discussion touched upon the development and usage of a UEFI tool as an interactive terminal user interface (TUI) designed for generating entropy through various means such as coin flips or dice rolls. This tool allows users to manually input entropy, which is then utilized to create a BIP 39 mnemonic. The tool's functionality includes options for selecting mnemonic length, applying skew correction for entropy input, and visual feedback during the entropy collection process. It also provides an overview of the generated entropy, its hash, the checksummed mnemonic bits, and the final mnemonic phrase, ensuring users understand the entire process and the integrity of the SHA256 implementation crucial for the mnemonic's validity.

Additionally, there was mention of potential future enhancements including a feature for mnemonic validation, viewing its associated entropy, and deriving the BIP 32 seed and root extended private key, emphasizing the importance of having a reliable SHA256 implementation given the reliance on SHA512 and PBKDF2 algorithms for these operations. 

This discourse underscores the ongoing efforts within the Bitcoin development community to refine and improve tools and methodologies for secure key generation, aiming at balancing ease of use with the stringent security requirements inherent to cryptocurrency technologies.</summary>
    <published>2025-05-25T21:41:00+00:00</published>
  </entry>
</feed>

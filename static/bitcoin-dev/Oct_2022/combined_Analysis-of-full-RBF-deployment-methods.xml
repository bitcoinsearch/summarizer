<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Analysis of full-RBF deployment methods</title>
  <updated>2025-09-26T14:20:28.051134+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="mfcb132d010e8ba37b8f6d6125916114a50c09450">
      <author>[bitcoin-dev] Analysis of full-RBF deployment methods Dario Sneidermanis</author>
      <timestamp>2022-10-20T16:51:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Analysis of full-RBF deployment methods Dario Sneidermanis" parent_id="mailing-list-2022-10-mfcb132d010e8ba37b8f6d6125916114a50c09450" anchor="m9259d283a475c7583eec6a405157f5b2fd8b2f95">
      <author>Antoine Riard</author>
      <timestamp>2022-10-21T01:50:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Antoine Riard" parent_id="mailing-list-2022-10-m9259d283a475c7583eec6a405157f5b2fd8b2f95" anchor="mbb27220aef870ebca2eb1d7e02b89c6a8a9808fb">
      <author>Dario Sneidermanis</author>
      <timestamp>2022-10-21T21:13:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="3" position="3" reply_to="Dario Sneidermanis" parent_id="mailing-list-2022-10-mbb27220aef870ebca2eb1d7e02b89c6a8a9808fb" anchor="mc6e32d8919313c9da55bbc6e5eaa4439453fbee5">
      <author>Antoine Riard</author>
      <timestamp>2022-10-23T23:10:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Oct_2022/021111_Analysis-of-full-RBF-deployment-methods.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/021106_Analysis-of-full-RBF-deployment-methods.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/021094_Analysis-of-full-RBF-deployment-methods.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/021075_Analysis-of-full-RBF-deployment-methods.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021075.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Analysis of full-RBF deployment methods</title>
    <updated>2025-09-26T14:20:28.051779+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021075.html" rel="alternate"/>
    <published>2022-10-23T23:10:16+00:00</published>
    <summary>In an email exchange between Antoine Riard and Dario Sneidermanis, they discuss the risks and benefits of implementing a full-replace-by-fee (RBF) deployment on the Bitcoin network. Antoine expresses concerns about potential disruptions to contracting protocols and multi-party applications, while Dario argues that a reliable full-RBF network is necessary to prevent pinning denial-of-service attacks. They agree that option 5 in the original post would be the best approach for achieving a reliable full-RBF network without threatening zero-conf applications until the activation time.Antoine suggests that May 1st, 2023, may be too early for full-RBF deployment and proposes a timeline of 10-12 months instead. He also emphasizes the need for better communication channels between business/service operators and protocol developers to clarify functional responsibilities. However, he does not believe that it should be solely the responsibility of developers to solve every operational risk faced by Bitcoin businesses.Dario counters Antoine's argument by stating that requesting a predictable deployment timeline for a change that increases the risk for certain applications should not be seen as burdening the developers. The goal of comparing deployment methods was to alleviate some of the burden on core developers.In their email exchange, Dario thanks Antoine for his detailed analysis and acknowledges Antoine's concerns about deferring full-RBF deployment. Antoine believes that the pinning DoS vector poses a risk to contracting protocols and multi-party applications. He mentions new developments such as ln-vortex, Phoenix wallet, and LDK users planning to use dual-funded soon, which have made these use cases more tangible.To address the attack described in [0], collaborative transaction protocols require a reliable way to replace transactions. Antoine suggests that option 5 (#26323) provides the fastest path to a reliable full-RBF network without endangering zero-conf applications. He believes that both security and zero-conf applications can coexist with this approach.Antoine raises the issue of interdependency between network policy rules and business risk, questioning whether developers should be responsible for every operational risk faced by Bitcoin businesses. Dario argues that asking for a predictable deployment timeline for a change that increases risk should not be seen as burdening the developers.In a recent Bitcoin Core IRC meeting, full-RBF deployment methods were extensively discussed. Antoine argues that deferring full-RBF deployment could be risky for contracting protocols and multi-party applications affected by the pinning DoS vector. He believes it is important to exchange different perspectives on this subject. Dario presents various alternatives for the deployment method of full-RBF and suggests five deployment options with different trade-offs. The details for these options can be found on Github. Dario compares the options based on dimensions such as immediate impact on zero-conf apps, predictability of deployment date, code complexity, smooth deployment, and time to figure out the right deployment.The stakeholders have differing opinions on whether to defer or activate full-RBF deployment in the upcoming stable release of version 24.0. They consider various dimensions of analysis to make a decision, including the impact on zero-conf apps, predictability of deployment, code complexity, smooth deployment, and the time required to determine the appropriate deployment method.With the impending release of version 24.0, a decision needs to be made regarding the deployment method of full-RBF. Several alternatives have been documented, each with its own trade-offs. These options include leaving the current version as is and merging opt-out in later versions, reverting opt-in full-RBF to allow more time for planning, and committing to a later date for opt-out activation. It is noted that once fully deployed, having a configuration option to disable it could be problematic.The analysis considers various dimensions, such as the impact on zero-conf apps, predictability of deployment date, code complexity, smooth deployment, and the time needed to determine the appropriate method. The comparison provides an overview of different approaches to address these dimensions. Regarding the timeline for full-RBF activation, Muun could be ready in six months with the necessary changes, while the larger application ecosystem may require more time for understanding the impact, designing solutions, implementing them, and deploying them. A smooth deployment can be achieved by setting an activation date in the code and allowing sufficient time for relaying nodes to upgrade before activation. Assuming uniform adoption distribution, two release cycles may be enough to achieve 61% adoption.</summary>
  </entry>
</feed>
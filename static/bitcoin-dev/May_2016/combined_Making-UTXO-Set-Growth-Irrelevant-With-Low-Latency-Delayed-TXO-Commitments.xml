<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Making UTXO Set Growth Irrelevant With Low-Latency Delayed TXO Commitments</title>
  <updated>2025-10-11T02:26:35.305996+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/May_2016/012733_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012727_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012726_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012725_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012723_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012722_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012721_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012718_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012716_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012717_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2016/012715_Making-UTXO-Set-Growth-Irrelevant-With-Low-Latency-Delayed-TXO-Commitments.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012715.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Making UTXO Set Growth Irrelevant With Low-Latency Delayed TXO Commitments</title>
    <updated>2025-10-11T02:26:35.306092+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-May/012715.html" rel="alternate"/>
    <published>2016-05-22T08:55:33+00:00</published>
    <summary>In a comparison of two proposals related to Bitcoin mining, Johnson Lau's proposal from 2015 suggests using the pruned UTXO set and 32 bytes per archived block for mining. However, there may be difficulty in spending archived outputs without knowing the status of other archived outputs from the same block. Lau proposes that third-party archival nodes can perform full re-scans of the blockchain to generate proof.Peter Todd claims to have a better proposal, where the dormant UTXO list is indexed by UTXO expiration order, making it impossible to verify the contents of that commitment without the global state of all UTXO data.The article discusses the issue of UTXO growth in Bitcoin and how it poses a threat to long-term decentralization. The current lack of consensus rules limiting UTXO growth can be attributed to factors such as lost coins, dust outputs, and non-Bitcoin-value-transfer use-cases. While Segregated Witness aims to reduce the UTXO set size, it may not discourage all UTXO growing behavior.To address this, TXO commitments propose a Merkle Mountain Range (MMR) that commits to the state of all transaction outputs, allowing less frequently accessed parts of the UTXO set to be archived while still providing a mechanism to spend those archived outputs. This improves storage efficiency and scalability, reducing the need for SPV wallet software to trust third parties.In a discussion about TXO commitments, Peter Todd explains how the proposed Merkle Mountain Range (MMR) allows new items to be appended to the tree with minimal storage requirements. Once an output is added to the TXO MMR, it is never removed, even if it is spent. Todd also discusses the implementation of a high-performance/low-latency delayed commitment full-node that stores the UTXO set, STXO set, TXO journal, and TXO MMR list. The TXO MMR implementation can store a large number of states with minimal data requirements, allowing for efficient pruning and unpruning of data.In another discussion, Todd argues against having both an append-only TXO and an append-only STXO, as indexing the STXO would be difficult due to the random position of new STXOs. However, if the STXO was indexed by txout creation order, it would be similar to Todd's proposed insertion-ordered TXO commitment. The article also mentions the availability of the MMR implementation with pruning support on Github and how the proofchains MMR scheme fixes the problem of proving the position in the tree.The article further discusses the proposed TXO commitments using Merkle Mountain Range (MMR), which allows for compactly proving the current state of an output. It explores the implementation details and benefits of using MMRs, such as reduced storage requirements and improved retrieval efficiency. However, there are still questions that need to be addressed, including how TXO commitments will interact with fraud proofs and whether incentivization schemes for miners can discount or ignore TXO commitment proof sizes. Optimization possibilities and the decision of UTXO archiving based on size or threshold are also mentioned.Overall, TXO commitments represent an improvement in Bitcoin's scalability and storage efficiency. The proposal addresses the issue of UTXO growth and provides mechanisms for efficient storage and retrieval of transaction outputs. However, further work and consideration are needed to fully implement and optimize TXO commitments, as well as address potential security concerns and interaction with fraud proofs.The article delves into the implementation of Transaction Output (TXO) commitments in Bitcoin's security model. It addresses the issue of TXO growth, which poses a challenge to the decentralization of Bitcoin. Currently, there are no rules limiting the size of the Unspent Transaction Output (UTXO) set, leading to significant memory expansion. The proposed solution is the Merkle Mountain Range (MMR), also known as TXO commitments, which offers a deterministic and indexable merkle tree structure. This allows for efficient appending of new items with minimal storage requirements.Implementing UTXO commitments without delaying commitment can adversely affect small miners' orphan rates, causing slower block validation. By introducing a delay, the latency-critical task becomes an average throughput problem. The TXO journal records spent outputs in the TXO MMR, and the MMR data is hashed to obtain the TXO commitment digest. While the TXO commitment calculation may have lower throughput compared to the UTXO only scheme, it offers tradeoffs that can mitigate the impact on validation throughput.The article highlights the challenges involved in implementing TXO commitments, such as determining the minimum age considered &quot;assumed valid&quot; and balancing political, social, and technical concerns. It suggests further work on optimizing the TXO commitment scheme to simplify complexity, prioritizing bitcoin value-transfer, and exploring alternative metrics/incentives for miner fairness and decentralization.The proposed high-performance/low-latency delayed commitment full-node implementation requires storing</summary>
  </entry>
</feed>
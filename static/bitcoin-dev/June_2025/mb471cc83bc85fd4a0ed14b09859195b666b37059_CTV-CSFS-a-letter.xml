<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV + CSFS: a letter</title>
  <updated>2025-07-01T04:05:50.328770+00:00</updated>
  <author>
    <name>Jameson Lopp 2025-06-13 15:41:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV + CSFS: a letter</title>
    <updated>2025-07-01T04:05:50.328803+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALiT-Zr3KO0fw1_DCpDVvA1Z1aLrvM-HFtvdsyLKhXxWvR=hvA@mail.gmail.com/T/#mb471cc83bc85fd4a0ed14b09859195b666b37059" rel="alternate"/>
    <summary>The conversation revolves around the keen interest of Casa and similar companies in integrating vaulting functionality into their custody products. The primary motivation behind this is the acknowledgment that achieving perfect security is an elusive goal. Despite designing nearly foolproof systems against external threats, the vulnerability to internal threats, especially through social engineering, remains a significant concern. The proposition of having high-value funds placed in a "quarantine/cooldown" phase before they can be transferred to an arbitrary address is seen as a valuable security enhancement. This mechanism would enable the implementation of additional protective measures, such as watchtowers, thereby bolstering the security framework for self-custody solutions.

The discourse highlights the inherent challenges of being one's own bank, particularly the difficulty in crafting custody solutions that are resilient to failures without risking catastrophic losses. The availability of more sophisticated tools for custody application engineers is emphasized as crucial for building more robust guardrails within wallet software. Such advancements are deemed essential for increasing public confidence in assuming the responsibilities associated with self-custody.

Furthermore, the discussion touches upon the technical aspects of implementing vault functionality, mentioning CheckTemplateVerify (CTV) and CSFS as promising opcodes that could facilitate this feature. A specific reference is made to a proof of concept for a CTV vault client that has been available for three years, suggesting that the combination of CTV and CSFS might be instrumental in enabling vaults. This is supported by a link to the GitHub repository containing the proof of concept ([simple-ctv-vault](https://github.com/jamesob/simple-ctv-vault)), indicating that these technologies are not only feasible but also potentially devoid of significant risks or trade-offs, thus presenting a compelling case for their adoption.</summary>
    <published>2025-06-13T15:41:00+00:00</published>
  </entry>
</feed>

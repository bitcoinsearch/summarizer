<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV + CSFS: a letter</title>
  <updated>2025-07-01T04:04:51.027628+00:00</updated>
  <author>
    <name>Greg Maxwell 2025-06-14 21:31:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV + CSFS: a letter</title>
    <updated>2025-07-01T04:04:51.027659+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CALiT-Zr3KO0fw1_DCpDVvA1Z1aLrvM-HFtvdsyLKhXxWvR=hvA@mail.gmail.com/T/#m5cdd58eefbf33ffaef7111986dba74d4a7a7668b" rel="alternate"/>
    <summary>The discussion revolves around the concept of securely deleting data, particularly in the context of Bitcoin transactions and the management of private keys. An atomic operation is proposed, suggesting that software could be designed to execute the deletion in a single step without exposing the private key to users. This approach also considers the utilization of ephemeral keys, which can support multisignature processes without the typical challenges associated with multisig operations, such as the need for signatories to retain information or perform validations. Additionally, it's highlighted that these ephemeral keys could be blinded for further security.

The conversation touches upon the durability of scripting in transaction management. It's suggested that by programmatically constructing scripts and backing up the scheme, one could achieve a similar level of security and reliability as with presigned transactions. Specifically, the inclusion of an ephemeral signature in a taproot annex within a transaction that pays into a 'vault' script is discussed. This method ensures all participants have access to the necessary data to deterministically construct intermediate transactions, boasting properties comparable to those of a vault built using CTV (CheckTemplateVerify) without necessitating any changes to consensus rules.

The debate extends to the limitations and potential applications of CTV-based vaults. These vaults are characterized by their ability to direct an output to one of several preconstructed destinations, typically offering an immediate option and another that becomes available after a delay triggered by a specific transaction. However, concerns are raised regarding the utility of this feature, particularly the feasibility of securing a rescue or abort key, which if manageable, could ostensibly be applied to the primary security process as well. Skepticism also surrounds the lack of implementation of such tools in systems where they could already be feasibly integrated.</summary>
    <published>2025-06-14T21:31:00+00:00</published>
  </entry>
</feed>

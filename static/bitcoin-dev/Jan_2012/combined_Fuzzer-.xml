<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fuzzer?</title>
  <updated>2023-08-01T02:54:09.217480+00:00</updated>
  <author>
    <name>Gavin Andresen 2012-01-26 15:32:33+00:00</name>
  </author>
  <author>
    <name>Amir Taaki 2012-01-25 23:27:52+00:00</name>
  </author>
  <link href="bitcoin-dev/Jan_2012/001072_Fuzzer-.xml" rel="alternate"/>
  <link href="bitcoin-dev/Jan_2012/001071_Fuzzer-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fuzzer?</title>
    <updated>2023-08-01T02:54:09.217480+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2012-January/001071.html" rel="alternate"/>
    <summary>Gavin Andresen has created a transaction fuzzer on Github specifically designed for stress-testing BIP 16. This fuzzer can be utilized by using the send* RPC commands to obtain one or more transaction IDs. By running a script that repeatedly calls relayfuzzed with a nonce/txid, it is possible to observe how connected peers react to all the fuzzy 'inv/tx' protocol messages.Although the primary purpose of the fuzzer is to stress-test BIP 16, Gavin mentions that there are several other useful features that could be added to it. He openly welcomes patches and contributions from others in order to further enhance the fuzzer's capabilities. Additionally, Gavin reveals that he plans to add block fuzzing to the fuzzer in the future.The sender of the message is interested in acquiring information about the currently developed fuzzer. They express their intention to create their own fuzzer for libbitcoin if no existing solution is available. The sender specifies that they are looking for a simple fuzzer that can perform tasks such as setting the previous block hash, setting the current target, starting hashing, and connecting and sending to a specified host (e.g localhost). While they believe that building such a fuzzer should be straightforward, they still seek additional details regarding its implementation.</summary>
    <published>2012-01-26T15:32:33+00:00</published>
  </entry>
</feed>

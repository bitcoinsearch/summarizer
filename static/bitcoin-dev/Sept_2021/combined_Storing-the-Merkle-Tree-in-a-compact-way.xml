<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Storing the Merkle Tree in a compact way</title>
  <updated>2025-09-26T11:55:39.334512+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m57c65662847025b3014af96823e759689c986376">
      <author>[bitcoin-dev] Storing the Merkle Tree in a compact way shymaa arafat</author>
      <timestamp>2021-09-11T03:00:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="2" position="1" anchor="ma981600f02008d77dd4cb67d81609056c7e1a1ff">
      <author>[bitcoin-dev] [Lightning-dev] &quot; shymaa arafat</author>
      <timestamp>2021-09-16T15:05:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Sept_2021/019465_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="bitcoin-dev/Sept_2021/019440_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019465.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Storing the Merkle Tree in a compact way</title>
    <updated>2025-09-26T11:55:39.334972+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019465.html" rel="alternate"/>
    <published>2021-09-16T15:05:24+00:00</published>
    <summary>The Utreexo project has been exploring ways to address storage space and traversing issues in the UTXOS Merkle Tree/forest. Currently, storing N internal nodes requires 2N pointers, along with an additional pointer in the leaves special nodes for different traversing options. To overcome this problem, a simple idea has been proposed to eliminate all pointers by using a 2D array with variable row sizes.In this approach, each row of the 2D array, denoted as R[j], has a length of N/2^j. For example, when N=8 nodes, R[0] contains elements from 0 to 7, R[1] contains elements from 8 to 11, R[2] contains elements 12 and 13, and R[3] contains element 14. This way, the total storage required is just 2N-1 nodes, eliminating the need for pointers.Traversing the Merkle Tree becomes more efficient with the right formula. The formula involves fetching proof[i] through pseudo-code, which determines whether to add or subtract 1 from i based on the direction. After determining the direction, the sibling node is added, followed by the rest of the nodes through a loop. This iterative approach transforms a recursion into an iteration, making it applicable to any Merkle Tree.This idea of compressing the Merkle Tree has potential applications in saving storage space and improving traversing efficiency. For a more detailed explanation, lecture notes and a video link are provided, along with a discussion by Shymaa M Arafat on the BitcoinTalk forum.</summary>
  </entry>
</feed>
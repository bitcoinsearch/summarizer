<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Generalised Replay Protection for Future Hard Forks</title>
  <updated>2025-09-26T15:50:21.014102+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="mec36d6ae340648c00a33494ffd888de7044c094e">
      <author>[bitcoin-dev] Generalised Replay Protection for Future Hard Forks Mats Jerratsch</author>
      <timestamp>2017-11-05T23:48:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="2" position="1" anchor="mc6468b51fa19458ea22c4ef13b77321ca7665499">
      <author>Jacob Eliosoff</author>
      <timestamp>2017-11-06T19:21:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="3" position="2" reply_to="Jacob Eliosoff" parent_id="mailing-list-2017-11-mc6468b51fa19458ea22c4ef13b77321ca7665499" anchor="mf8d7277af578e45842c286917d76bc8bee699cdf">
      <author>Mats Jerratsch</author>
      <timestamp>2017-11-08T16:45:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="4" position="3" reply_to="Mats Jerratsch" parent_id="mailing-list-2017-11-mf8d7277af578e45842c286917d76bc8bee699cdf" anchor="m2e70f811ecd6ebea269085935f7612d61e359977">
      <author>Jacob Eliosoff</author>
      <timestamp>2017-11-09T20:45:00.000Z</timestamp>
    </message>
    <message id="msg_5" depth="5" position="4" reply_to="Jacob Eliosoff" parent_id="mailing-list-2017-11-m2e70f811ecd6ebea269085935f7612d61e359977" anchor="m1f64b83a2d23fba4797954686aa2d9f6449ea703">
      <author>Sjors Provoost</author>
      <timestamp>2017-11-09T21:01:00.000Z</timestamp>
    </message>
    <message id="msg_6" depth="13" position="5" anchor="m1838b79c6854f44db2c9c8112c70c8773b748bce">
      <author>Mats Jerratsch</author>
      <timestamp>2017-11-10T11:28:00.000Z</timestamp>
    </message>
    <message id="msg_7" depth="14" position="6" reply_to="Mats Jerratsch" parent_id="mailing-list-2017-11-m1838b79c6854f44db2c9c8112c70c8773b748bce" anchor="mc13205d4a3993992150d21613d696bbe7b093c29">
      <author>Jacob Eliosoff</author>
      <timestamp>2017-11-11T05:18:00.000Z</timestamp>
    </message>
    <message id="msg_8" depth="15" position="7" reply_to="Jacob Eliosoff" parent_id="mailing-list-2017-11-mc13205d4a3993992150d21613d696bbe7b093c29" anchor="mfaf40d9dfc58d276e626725b91da76529e5f26cb">
      <author>Mats Jerratsch</author>
      <timestamp>2017-11-13T10:03:00.000Z</timestamp>
    </message>
    <message id="msg_9" depth="16" position="8" reply_to="Mats Jerratsch" parent_id="mailing-list-2017-11-mfaf40d9dfc58d276e626725b91da76529e5f26cb" anchor="m2e6927ad98155df612df61503055c003f3d18b6c">
      <author>Jacob Eliosoff</author>
      <timestamp>2017-11-13T15:31:00.000Z</timestamp>
    </message>
    <message id="msg_10" depth="17" position="9" reply_to="Jacob Eliosoff" parent_id="mailing-list-2017-11-m2e6927ad98155df612df61503055c003f3d18b6c" anchor="m12d6ccebbe2d7acefd32f28ab48ae162b462bab4">
      <author>Spartacus Rex</author>
      <timestamp>2017-11-13T17:02:00.000Z</timestamp>
    </message>
    <message id="msg_11" depth="18" position="10" reply_to="Spartacus Rex" parent_id="mailing-list-2017-11-m12d6ccebbe2d7acefd32f28ab48ae162b462bab4" anchor="m6f2d5e64eaff21a6520fd7ec34afe1921ca6cc0f">
      <author>Mats Jerratsch</author>
      <timestamp>2017-11-14T13:49:00.000Z</timestamp>
    </message>
    <message id="msg_12" depth="19" position="11" reply_to="Mats Jerratsch" parent_id="mailing-list-2017-11-m6f2d5e64eaff21a6520fd7ec34afe1921ca6cc0f" anchor="m5d4b8ea1f27cdfd3a44cbf44b644d55e63b08f44">
      <author>Jacob Eliosoff</author>
      <timestamp>2017-11-15T05:02:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Nov_2017/015291_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015289_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015290_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015282_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015280_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015278_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015275_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015272_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015271_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015269_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015264_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015258_Generalised-Replay-Protection-for-Future-Hard-Forks.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015258.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Generalised Replay Protection for Future Hard Forks</title>
    <updated>2025-09-26T15:50:21.015602+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015258.html" rel="alternate"/>
    <published>2017-11-15T05:02:48+00:00</published>
    <summary>The email thread discusses a proposal for creating fork-specific addresses to enhance transaction safety and enable light clients to differentiate between multiple forks. The proposal suggests assigning a unique 'nForkId' to each leaf, which must match the 'nForkId' of the validating software for a transaction to be considered valid.However, there is a dilemma with LN commitment transactions where they either need to have a specific 'nForkId' or 'nForkId 0'. To address this, incorporating Luke's OP_CHECKBLOCKATHEIGHT and using solutions like SIGHASH_BLOCKCOMMIT are suggested.The proposed solution not only adds replay protection but also improves overall transaction safety by utilizing a dedicated address format per fork. This helps prevent issues like sending BCH to a BTC address. Every leaf must have a unique 'nForkId', and transactions are only deemed valid if their 'nForkId' matches exactly the 'nForkId' of the validating software.The discussion also touches on the use of nForkId in Lightning Network (LN) transactions. It is recommended to set 'nForkId&gt;=1' for the funding transaction to protect it from replay attacks on past forks. For commitment transactions, 'nForkId=0' can be used, making it valid on all chains. However, users should be aware that the parent transaction it tries to spend (the funding transaction) only exists on two chains - the original one and the forked one.The conversation emphasizes the importance of implementing a generic replay protection scheme in advance to avoid breaking old transactions on one of the chains. It is suggested that 'nForkId=0' should be valid on all future forks. Additionally, different choices can be made in scenarios involving forks, such as creating commitment transactions with 'nForkId=0' or closing the payment channel on the new token after the fork.The proposal also considers using the human-readable part of the standard as the fork id and discusses potential limitations. It highlights the benefits of incorporating fork IDs into new address formats to provide comprehensive replay protection during hard forks.The proposed solution aims to address the issue of 'mis-sends' that could occur due to non-upgraded wallet software during hard forks. By including the token identifier in the address itself, mis-sends are made fundamentally impossible. However, there is a possibility of 'mis-receiving' if the receiving wallet is not aware of a newer chain and creates an address for the old token. This proposal allows wallets to distinguish between different tokens, enabling different implementations.The proposal advocates integrating replay protection into the protocol to prevent ad-hoc solutions and support non-hostile forks. It suggests utilizing a fork-specific incompatible address space to protect users from sending coins on the wrong chain. Light clients can enforce the use of 'nForkId' in the coinbase/block header or utilize a new P2P message type for sending transactions. The proposal also discusses the potential of allowing signatures with 'nForkId=1' through a soft fork by adjusting the script version of SegWit.In conclusion, the proposed solution provides a comprehensive approach to replay protection during hard forks and encourages developers to incorporate fork IDs into new address formats. It aims to enhance transaction safety, prevent mis-sends, and enable light clients to differentiate between multiple forks.The proposal suggests a solution for introducing forks without breaking existing clients by incrementing the script version of SegWit, ensuring full backwards compatibility. This approach can be generalized in software to include replay protection and a new address space. By implementing this method, forks can be introduced while maintaining the functionality of existing clients. The proposal highlights the potential for this approach to be applied across various software systems.</summary>
  </entry>
</feed>
<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Protocol-Level Pruning</title>
  <updated>2025-09-26T15:50:04.180042+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m2fbd42299bbe942fafb3924b23ea37f82ac51fa8">
      <author>[bitcoin-dev] Protocol-Level Pruning Marc Bevand</author>
      <timestamp>2017-11-16T16:56:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Protocol-Level Pruning Marc Bevand" parent_id="mailing-list-2017-11-m2fbd42299bbe942fafb3924b23ea37f82ac51fa8" anchor="mc051d8a05bfd3d8eb0517d7ecad5b6deeaeee7fa">
      <author>Bryan Bishop</author>
      <timestamp>2017-11-16T17:14:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Bryan Bishop" parent_id="mailing-list-2017-11-mc051d8a05bfd3d8eb0517d7ecad5b6deeaeee7fa" anchor="m9efa3ea2393d92615e1d3e0e518c1e76e1a0775b">
      <author>Marc Bevand</author>
      <timestamp>2017-11-16T17:19:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="2" position="3" reply_to="Bryan Bishop" parent_id="mailing-list-2017-11-mc051d8a05bfd3d8eb0517d7ecad5b6deeaeee7fa" anchor="mbeb63aa993a5c56cc2bfccd4f6275af025a2fec6">
      <author>William Casarin</author>
      <timestamp>2017-11-17T19:07:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Nov_2017/015299_Protocol-Level-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015298_Protocol-Level-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015297_Protocol-Level-Pruning.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2017/015296_Protocol-Level-Pruning.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015296.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Protocol-Level Pruning</title>
    <updated>2025-09-26T15:50:04.180681+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015296.html" rel="alternate"/>
    <published>2017-11-17T19:07:04+00:00</published>
    <summary>Bryan Bishop, a Bitcoin developer, recently shared his thoughts on UTXO set commitment proposals in a bitcoin-dev post. He provided various links to resources such as previous discussions, bitfields, and source code proposals related to delayed TXO commitments, rolling UTXO set hashes, and the usefulness of TXO commitments. However, Bryan acknowledged that he was uncertain whether the recipient of his message had already explored these proposals. In conclusion, he posed a question about the possibility of categorizing these discussions by topic for easier accessibility.In response to an email from Marc, who expressed interest in a seemingly simple idea that may have already been discussed, Bryan shared several links to previous proposals for UTXO set commitment. These proposals included TXO bitfields, delayed TXO commitments, rolling UTXO set hashes, and more. Additionally, he mentioned the availability of numerous other resources, including source code proposals. Bryan's contact information, including his website and phone number, was also provided in his email signature.It appears that the speaker, Bryan, is unsure if the recipient has reviewed prior UTXO set commitment proposals. Consequently, they offer bookmarks pertaining to UTXO set commitments, TXO bitfields, delayed TXO commitments, the usefulness of TXO commitments without requiring a soft-fork, and rolling UTXO set hashes. They further note the existence of additional resources, such as source code proposals. Bryan introduces himself by name and provides his website and phone number for contact purposes.Marc, another Bitcoin developer, introduced the concept of protocol-level pruning (PLP) as a means to significantly reduce the size of the blockchain and facilitate on-chain scaling. The idea involves serializing the UTXO set in a standardized manner and publishing its hash in the block header, thereby committing the blockchain to it. When a new node joins the network, it would solely download the block headers and identify the most recent block containing the UTXO set hash, subsequently obtaining the UTXO set from peers. Nodes would serialize and verify that their UTXO set hash matches the one published in the blockchain every 576 blocks. Currently, the serialized UTXO set occupies approximately 3GB, while the entire blockchain amounts to about 150GB. Hence, implementing PLP could reduce the data stored by full nodes by a factor of roughly 50. To avoid hashing the complete UTXO set every 576 blocks, the UTXO set serialization could be accomplished using a sparse Merkle tree, enabling on-the-fly recomputation of the hash as new blocks are mined. Although a regular Merkle tree could suffice, sparse Merkle trees offer greater efficiency. With PLP, all full nodes within the network could transition to this approach without the need for any node to archive the entire blockchain. However, these nodes would no longer be capable of handling reorganizations that extend beyond the last UTXO set hash published on the chain since prior blocks have been discarded. Consequently, it may be sufficient to retain the last N*576 blocks (where N=10?) as a workaround.</summary>
  </entry>
</feed>
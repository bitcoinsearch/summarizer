<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - determining change addresses using the least significant digits</title>
  <updated>2025-10-13T02:48:10.673052+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Feb_2015/007379_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007378_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007377_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007374_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007365_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007357_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="bitcoin-dev/Feb_2015/007319_determining-change-addresses-using-the-least-significant-digits.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007319.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007319.html" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007319.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - determining change addresses using the least significant digits</title>
    <updated>2025-10-13T02:48:10.673160+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-February/007319.html" rel="alternate"/>
    <published>2015-02-06T18:21:09+00:00</published>
    <summary>In a discussion about Bitcoin client, Isidor Zeuner proposed a possible issue with the current functionality of hiding change addresses going back to the payer. With dynamically calculated miner fees, it may be easy for an observer to classify the output addresses because users sending payments often enter the payment amount only up to the significant digits, while the least significant digits are often zero. To handle this issue, adding a randomized offset amount to the payment amount is suggested. However, sending too much can cause issues with accounting, so another strategy proposed is to create two change outputs and make one equal to the payment amount or split the change evenly. One user suggested randomly rounding up the output when paying to a depository account, but a user interface for this feature has not been determined yet.On 2nd June 2015, Jeff Garzik responded to a query regarding adding additional inputs and outputs to increase privacy and defragment wallet. He stated that it can be done, and regular spends can resemble CoinJoin transactions and vice versa. The message ends with a note on supporting online privacy by using email encryption whenever possible and a link to learn more. Additionally, the message includes a PGP signature. There was also a non-text attachment included in the message, which is a file named &quot;0xEAD9E623.asc&quot; of type application/pgp-keys, with a size of 14416 bytes.The email thread discusses the possibility of adding a randomized offset amount to payment amounts to increase privacy in bitcoin wallets. The idea is one way to obfuscate payment amounts, but there have been more sophisticated ideas such as adding multiple change outputs or distributing over multiple transactions. Mike Hearn had ideas regarding obfuscation of payment amounts, which he wrote about in a blog post. It is possible to add additional inputs and outputs to defrag wallets and increase privacy simultaneously. Jeff Garzik, a Bitcoin core developer and open source evangelist at BitPay, contributed to the discussion.On February 4th, 2015, Isidor Zeuner proposed a solution to handle an issue by adding a randomized offset amount to the payment amount. However, there have been more sophisticated ideas to obfuscate the amount such as adding multiple change outputs or distributing over multiple transactions. Mike Hearn, who had some ideas about the obfuscation of payment amounts, wrote about them in a blog post. The link to his blog is provided in the email response from Wladimir.The Bitcoin client has traditionally hidden which output addresses are change addresses going back to the payer. However, with dynamically calculated miner fees, this may often be ineffective because the least significant digits will often be zero for the payment, but not for the change amount. This makes it easy for an observer to classify the output addresses. One possible approach to handle this issue would be to add a randomized offset amount to the payment amount. Another approach is to randomize the number of change outputs from transaction to transaction. By doing this, it would be possible to make change outputs that mimic real spends with a low number of s.d. It is recommended to support online privacy by using email encryption whenever possible and to learn how to do so at http://www.youtube.com/watch?v=bakOKJFtB-k.In a discussion on the Bitcoin mailing list, Isidor Zeuner brought up the issue of change addresses being visible to observers due to dynamically calculated miner fees. When a user sends a payment, they usually only enter the significant digits, leaving the least significant digits as zero. However, with dynamically calculated miner fees, this is often not the case for the change amount, making it easy for an observer to classify the output addresses. Zeuner suggested adding a randomized offset amount to the payment amount to address this issue. Another user recommended looking at Armory, which reportedly implements similar features.In the world of Bitcoin, there is a potential vulnerability that could allow anyone to classify an output address as a change address going back to the payer. This occurs due to the fact that users sending payments using the Bitcoin client will only enter the payment amount up to a certain number of significant digits, which often means that the least significant digits are zero. With dynamically calculated miner fees, this is not always the case for the change amount, making it easier for observers to classify the output addresses. To combat this issue, a possible solution would be to add a randomized offset amount to the payment amount that is small in comparison but helps to hide the change address.</summary>
  </entry>
</feed>
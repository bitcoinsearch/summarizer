<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Taproot activates - A time/block line</title>
  <updated>2025-10-11T02:26:27.053754+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <link href="bitcoin-dev/Nov_2021/019608_Taproot-activates-A-time-block-line.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2021/019598_Taproot-activates-A-time-block-line.xml" rel="alternate"/>
  <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-November/019598.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Taproot activates - A time/block line</title>
    <updated>2025-10-11T02:26:27.053858+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-November/019598.html" rel="alternate"/>
    <published>2021-11-24T17:29:54+00:00</published>
    <summary>The recent activation of Taproot, a significant upgrade to Bitcoin's protocol, has brought to light some issues with Taproot readiness among mining pools. F2Pool and AntPool, the third and fifth largest pools respectively, were slow to upgrade their nodes to include P2TR spends. F2Pool had a custom patch to their node's peer selection behavior that caused them to not be connected to any P2TR-spend-relaying peers. This issue was discovered when an engineer from F2Pool reached out for help debugging. However, F2Pool has since fixed the problem.AntPool also faced issues with P2TR spends but was quick to react once notified. They had already tested version 22.0 and planned to update soon. Alejandro De La Torre, who communicated with AntPool, suggested that the same old peer issue that F2Pool faced could have been the issue for AntPool as well.It is believed that some mining pools signaled readiness without being fully prepared due to community pressure or running nodes with custom patches. To address this, it was suggested to implement a feature that alerts or warns a node operator if their node does not have any peers relaying a particular soft-fork transaction. This could be done through a getnodealerts RPC that a node operator can connect to their monitoring. Additionally, for the next soft-fork where relay is affected, mining pool signaling instructions could state the need to upgrade to a specific version and ensure having a few peers with the same version before signaling readiness.Before the activation of Taproot, there were several key events recorded. 0xB10C and F2Pool spent from Taproot outputs in July, months before Taproot rules were enforced. These spends did not need to meet Taproot consensus rules and are therefore not considered the &quot;first&quot; Taproot spends. The last block before Taproot rules were enforced was mined by AntPool. Non-timelocked P2TR outputs were considered anyone-can-spend as Taproot rules were not yet being enforced. The first block where full nodes started enforcing Taproot rules was mined by F2Pool. However, F2Pool did not enforce Taproot rules or include any Taproot spends in this block, which could have caused a re-org when the block was rejected by full nodes. Similarly, AntPool did not include any Taproot spends in subsequent blocks. The first block with valid Taproot spends was mined by Foundry USA.After the activation of Taproot, several individuals completed Taproot spends, including bitbug42, Andrew Chow, Pieter Wuille, BitGo, jaoNoctus, narcelio, and ottosch. Alekos Filini used modified code from the BDK library to complete the first use of OP_CHECKSIGADD on the mainnet. Various individuals and entities played a significant role in monitoring and highlighting these events online, including 0xB10C, Greg Maxwell, Murch, Daniel McNally, Rearden Code, Chun, and pinheadmz. Additionally, various block explorers proved useful for monitoring Taproot activation. Overall, there was significant interest and scrutiny surrounding this successful upgrade, showcasing a promising future for Bitcoin.</summary>
  </entry>
</feed>
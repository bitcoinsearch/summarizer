<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>What's a good stopping point? Making the case for the capabilities enabled by CTV+CSFS</title>
  <updated>2025-07-10T03:00:09.169297+00:00</updated>
  <author>
    <name>Josh Doman 2025-07-09 21:30:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>What's a good stopping point? Making the case for the capabilities enabled by CTV+CSFS</title>
    <updated>2025-07-10T03:00:09.169327+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/b72e6f6f-af27-4043-b714-4e607bbe8880n@googlegroups.com/T/#md168227bd90003634e9128181d87efea205537d9" rel="alternate"/>
    <summary>The discussion begins with a critique of the current proposals for enhancing Bitcoin's expressivity through OP_TX / OP_TXHASH, specifically regarding their approach to committing to sibling prevouts. The author argues that these methods lack justification due to their complexity and suggests a more streamlined alternative. The proposed solution involves utilizing MuHash, a mechanism already present within the Bitcoin codebase, to create a more efficient and targeted method for committing to sibling prevouts.

MuHash is suggested as a tool to generalize the CTV / TEMPLATEHASH by precomputing an accumulator containing the SHA256(index || prevout) for each input in a transaction. This process allows for the commitment to sibling prevouts for any given input in constant time, simply by copying the precomputed accumulator and excluding the hash for the specific input under consideration. This technique not only streamlines the process but also ensures predictability in the commitment outcome, regardless of the number of inputs spent.

The integration of this method into the existing proposed commitment scheme is presented as a low-cost, efficient alternative that enhances the predictability of the next txid. The feasibility of this implementation is underscored by the fact that MuHash is already included in the Bitcoin codebase, suggesting that adopting this method would not require significant additional resources or modifications.

In conclusion, the author posits that this approach, leveraging MuHash for committing to sibling prevouts, would more effectively meet the objective of introducing a primitive committed to the next transaction, aligning with the overarching goals of Bitcoin development.</summary>
    <published>2025-07-09T21:30:00+00:00</published>
  </entry>
</feed>

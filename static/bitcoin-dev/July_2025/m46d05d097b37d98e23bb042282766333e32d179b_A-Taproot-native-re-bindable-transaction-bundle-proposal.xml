<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Taproot-native (re-)bindable transaction bundle proposal</title>
  <updated>2025-07-11T03:06:09.507794+00:00</updated>
  <author>
    <name>Brandon Black 2025-07-10 04:44:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Taproot-native (re-)bindable transaction bundle proposal</title>
    <updated>2025-07-11T03:06:09.507828+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAPfvXf+E0YDzqY_jsGVoc4KKh_Kgsp-p20wNAD05tv_rMNG2sA@mail.gmail.com/T/#m46d05d097b37d98e23bb042282766333e32d179b" rel="alternate"/>
    <summary>The discussion revolves around the intricacies of TEMPLATEHASH in comparison to other hashing mechanisms like CTV and SIGHASH_ANYSCRIPTANYPREVOUT|ALL, highlighting its unique position and the modifications it brings to the table. TEMPLATEHASH distinguishes itself by omitting certain elements present in the others, such as nInputs, nOutputs, and scriptSigs, while incorporating features like the taproot annex presence flag and taproot annex. This adjustment allows TEMPLATEHASH to indirectly commit to the number of inputs through sequences, facilitating the creation of stable transaction IDs with minimal inputs without compromising on legacy script compatibility or necessitating hash construction on the stack.

The capabilities section delves into the potential of TEMPLATEHASH when integrated with CSFS, maintaining that all protocols achievable with LNHANCE could also be realized using a combination of CTV and CSFS alone. The proposal introduces INTERNALKEY for its efficiency in common protocols, citing a saving of 32WU by reusing the taproot internal key in scripts, exemplified by the Lightning Symmetry protocol. Although PAIRCOMMIT is excluded from this proposal, TEMPLATEHASH's commitment to the taproot annex enables certain optimizations, particularly for protocols requiring an additional data push during spend, either pre-committed or committed at spend-time. The conversation also touches upon the implications of committing to the annex for future protocol extensions, concluding that while it may restrict some implementations, it does not foreclose on any viable protocol applications.

Efficiency comparisons are made between this proposal and previous ones, illustrating how TEMPLATEHASH positions itself in terms of workload units (WU) for implementing common protocols. It is noted to be slightly less efficient than bare CTV for protocols not requiring multiple data commitments, but significantly more so for those that do, thanks to its streamlined approach. Particularly in scenarios like the uncontested close case in the Lightning Symmetry protocol, TEMPLATEHASH proves to be more advantageous. The proposal is seen as a targeted enhancement to tapscript, optimizing opcode package without inducing technical reservations. The author expresses a desire for the proposal to undergo thorough review within the broader technical community, reflecting a commitment to collaborative development and innovation in the space.</summary>
    <published>2025-07-10T04:44:00+00:00</published>
  </entry>
</feed>

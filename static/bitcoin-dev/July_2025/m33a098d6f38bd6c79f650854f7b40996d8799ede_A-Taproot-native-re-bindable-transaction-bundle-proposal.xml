<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A Taproot-native (re-)bindable transaction bundle proposal</title>
  <updated>2025-07-10T03:02:06.015669+00:00</updated>
  <author>
    <name>Greg Sanders 2025-07-09 18:19:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A Taproot-native (re-)bindable transaction bundle proposal</title>
    <updated>2025-07-10T03:02:06.015699+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAKwYL5GjrOp5QbwMF+vS6dDYPjc7tBNPAZsqVBzb1DcY_h4FpQ@mail.gmail.com/T/#m33a098d6f38bd6c79f650854f7b40996d8799ede" rel="alternate"/>
    <summary>In a collaborative effort, Antoine Poinsot, Steven Roose, and Greg have developed a technical proposal that emphasizes the design of operations to enhance certain capabilities within Bitcoin's infrastructure. This proposal addresses three key functionalities: the "Next transaction" feature similar to BIP119, the ability to "Verify signature of message on stack" akin to BIP348, and the capability to "Push taproot internal key onto stack" as outlined in BIP349. These functionalities are poised to simplify existing systems significantly, with the first two capabilities working in tandem and the third serving as a straightforward update that complements them.

The core of their contribution lies in the introduction of `OP_TEMPLATEHASH`, designed as an alternative to BIP119's `OP_CHECKTEMPLATEVERIFY`. `OP_TEMPLATEHASH` stands out for its simplicity and modern approach, specifically tailored to be Taproot native. This design choice facilitates several improvements, including the utilization of `OP_SUCCESS` upgrade hooks instead of traditional `OP_NOP`s. This allows for the template hash to be pushed onto the stack more efficiently, which is particularly beneficial for rebindable signatures. Additionally, `OP_TEMPLATEHASH` simplifies the implementation process by leveraging pre-computed Taproot sighash fields and avoiding unnecessary commitments to the spending transaction's scriptSigs. The proposed operation also strategically omits modifications to the less understood legacy Script and does not include an analogue for "bare CTV", citing a lack of demonstrated utility for the latter.

These developments have been thoroughly documented in the BIP text available [here](https://github.com/instagibbs/bips/blob/bip_op_templatehash/bip-templatehash-csfs-ik.md) and the accompanying pull request [here](https://github.com/instagibbs/bips/pull/1), which provides full motivation and rationale for this bundled proposal. Furthermore, the `OP_TEMPLATEHASH` BIP can be found [here](https://github.com/instagibbs/bips/blob/bip_op_templatehash/bip-templatehash.md), along with a complete implementation [here](https://github.com/instagibbs/bitcoin/pull/3). This initiative draws inspiration from "LNHANCE", detailed [here](https://delvingbitcoin.org/t/lnhance-bips-and-implementation/376), underscoring a commitment to advancing opcode and implementation discussions in parallel with broader conversations regarding the necessity and viability of these capabilities as potential milestones in Bitcoin's evolution.</summary>
    <published>2025-07-09T18:19:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Human meaningful witness versioning</title>
  <updated>2025-07-22T03:08:15.471232+00:00</updated>
  <author>
    <name>Ethan Heilman 2025-07-21 01:44:00+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Human meaningful witness versioning</title>
    <updated>2025-07-22T03:08:15.471274+00:00</updated>
    <link href="https://gnusha.org/pi/bitcoindev/CAEM=y+UkL6_hvrBW2S2=zymGZ1+CFVQ60aZ=zLDiJa7tiF7zcw@mail.gmail.com/T/#m9fbc2822f7e965b07fe6aadd55df78e75937047b" rel="alternate"/>
    <summary>Understanding Bitcoin Improvement Proposal (BIP) 0173 involves grappling with various methods to encode addresses, particularly focusing on the treatment of the Witness version. One approach suggests treating the Witness version not as a special part of the address but merely encoding the ScriptPubkey directly. This contrasts with the Bech32 method, which allocates the first 5-bits specifically for the Witness version, allowing versions 0 to 31 before overflow into the next character. This method is advantageous as it compresses the 8-bit opcode into 5-bits, effectively saving space.

A further refinement of the Bech32 approach proposes saving an additional 8-bits by excluding the OP_PUSH32 and inferring it from the address length. While this could simplify certain aspects, it might complicate others, especially when dealing with more complex ScriptPubkeys. However, handling these complexities with different Witness versions, akin to Bech32 and bech32m, could offer a solution.

Another suggestion posits allocating the first 4-bits to the Witness version, limiting the range to 0 to 15 before causing spillage into subsequent characters. Alternatively, positioning the checksum as the initial element post-'bc1' could deter perceptions of the Witness version as part of the human-readable component of the address. The latter three options, unlike the Bech32 refinement, obscure the Witness version but potentially avoid confusion in address interpretation. 

The discussion also touches on the rationale behind compressing the Witness version into 5-bits while questioning the necessity of including OP_PUSH32. Initially believed to enhance human readability, the compression now appears more focused on reducing character count. Dropping OP_PUSH32, as suggested, might streamline address formats further while leaving room for future versioning through additional payload words. Encoding the Witness version beyond 16 presents its own set of challenges, with potential solutions involving specific opcode sequences. 

This conversation reflects a deep dive into the nuances of Bitcoin address encoding, exploring avenues for efficiency and clarity while considering implications for future scalability and adaptability.</summary>
    <published>2025-07-21T01:44:00+00:00</published>
  </entry>
</feed>

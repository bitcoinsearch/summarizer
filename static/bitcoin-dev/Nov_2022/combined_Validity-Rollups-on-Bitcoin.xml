<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Validity Rollups on Bitcoin</title>
  <updated>2025-09-26T14:29:42.233240+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0" anchor="m4ec9a11a345683edf8586dd335c5002c9bed47a4">
      <author>[bitcoin-dev] Validity Rollups on Bitcoin John Light</author>
      <timestamp>2022-10-11T15:40:00.000Z</timestamp>
    </message>
    <message id="msg_2" depth="1" position="1" reply_to="[bitcoin-dev] Validity Rollups on Bitcoin John Light" parent_id="mailing-list-2022-10-m4ec9a11a345683edf8586dd335c5002c9bed47a4" anchor="mb5ba6e4160381e22555be75f7447af3ce9aedefe">
      <author>Greg Sanders</author>
      <timestamp>2022-10-12T13:28:00.000Z</timestamp>
    </message>
    <message id="msg_3" depth="2" position="2" reply_to="Greg Sanders" parent_id="mailing-list-2022-10-mb5ba6e4160381e22555be75f7447af3ce9aedefe" anchor="m3449f22db975f7bb964bb78312252f8992c39f65">
      <author>John Light</author>
      <timestamp>2022-10-12T15:40:00.000Z</timestamp>
    </message>
    <message id="msg_4" depth="3" position="3" reply_to="John Light" parent_id="mailing-list-2022-11-m3449f22db975f7bb964bb78312252f8992c39f65" anchor="m98acff5d1aa7c1628bd46c24aad94176280095fc">
      <author>AdamISZ</author>
      <timestamp>2022-11-02T17:19:00.000Z</timestamp>
    </message>
    <message id="msg_5" depth="4" position="4" reply_to="AdamISZ" parent_id="mailing-list-2022-11-m98acff5d1aa7c1628bd46c24aad94176280095fc" anchor="m70b48a64448c9458e06e8ba23c443f9bc6ba232f">
      <author>Trey Del Bonis</author>
      <timestamp>2022-11-04T19:53:00.000Z</timestamp>
    </message>
    <message id="msg_6" depth="5" position="5" reply_to="Trey Del Bonis" parent_id="mailing-list-2022-11-m70b48a64448c9458e06e8ba23c443f9bc6ba232f" anchor="mad8ad4a3c71454d595cc16c36c0627a0882eadc3">
      <author>Russell O'Connor</author>
      <timestamp>2022-11-04T20:29:00.000Z</timestamp>
    </message>
    <message id="msg_7" depth="5" position="6" reply_to="Trey Del Bonis" parent_id="mailing-list-2022-11-m70b48a64448c9458e06e8ba23c443f9bc6ba232f" anchor="m13787afabd25b10694d9ffd2d300dce37eff7802">
      <author>ZmnSCPxj</author>
      <timestamp>2022-11-04T23:07:00.000Z</timestamp>
    </message>
  </thread>
  <link href="bitcoin-dev/Nov_2022/021166_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021165_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021164_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021153_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/021005_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/021004_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="bitcoin-dev/Oct_2022/020998_Validity-Rollups-on-Bitcoin.xml" rel="alternate"/>
  <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021166.html" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Validity Rollups on Bitcoin</title>
    <updated>2025-09-26T14:29:42.234329+00:00</updated>
    <link href="https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021166.html" rel="alternate"/>
    <published>2022-11-04T23:07:56+00:00</published>
    <summary>ZmnSCPxj has proposed the implementation of new opcodes in Taproot to improve efficiency and avoid duplicating data in the witness. One potential opcode is a form of OP_MERKLEUPDATEVERIFY that checks a merkle proof against a root and verifies if replacing the leaf with some hash using the proof yields a specified updated root. Another proposal is a limited version of OP_EVAL for cases where different spend paths cannot be split into different tapleafs.ZmnSCPxj suggests reusing pay-to-contract to store a commitment to the state in Taproot. This involves using the Taproot outpoint script as the public key corresponding to the pay-to-contract of the Taproot MAST root and an internal public key. The internal public key can also be a pay-to-contract, allowing for the commitment of a covenant state. This proposed opcode would determine if the internal public key is a pay-to-contract of the current state on the internal-internal pubkey. If an expected new state exists, it would compute a new Taproot internal pubkey and recomputes the pay-to-contract on the new state. This approach eliminates the need for quining and OP_PUSHSCRIPT, only requiring a way to compute the new state from the old state.Trey Del Bonis discusses the idea of using granular transaction introspection opcodes from Elements for rollups. He acknowledges that the actual proof verification process is complex and suggests implementing a specific opcode for more efficient proof verification. This opcode would take the serialized proof, a verification key, and the public input as separate stack items. The public input includes various commitments and data from the transaction outputs, and the rollup batch data itself. Trey also expresses interest in Simplicity Jets that facilitate rollups, particularly pairing-friendly curve operations.The conversation between AdamISZ/waxwing and John Light explores the minimal functionality required for general-purpose off-chain contracting that is provable. They discuss the verification of bilinear pairings on-chain and the use of a covenant opcode for implementing rollups/sidechains with client-side computation and compact state update. They also touch on the security models of Optimism and Arbitrum, as well as the use of trusted setups in different security models.Greg Sanders inquired about a concise cheat sheet for transaction introspection/OP_ZKP and their uses in different rollup architectures. While such a cheat sheet does not exist yet, Trey Del Bonis has written a detailed technical post on how these components can be used in a validity rollup. However, more research and design work are needed to provide the requested details.John Light's report titled &quot;Validity Rollups on Bitcoin&quot; explores the benefits of validity rollups for Bitcoin and existing layer two protocols like the Lightning Network. The report examines the history, technical workings, and potential risks and benefits of implementing validity rollups on Bitcoin, highlighting their potential to improve scalability, privacy, and programmability without compromising Bitcoin's core values. The full report can be found at bitcoinrollups.org, and feedback from the Bitcoin dev community is welcomed.In summary, there are ongoing discussions and proposals regarding the implementation of new opcodes in Taproot to enhance efficiency and avoid data duplication. Transaction introspection opcodes from Elements are being considered for rollups, along with the need for efficient proof verification. The conversation also touches on security models, trusted setups, and the potential benefits of validity rollups for Bitcoin. John Light's report provides a comprehensive examination of validity rollups and their potential impact on Bitcoin's scalability, privacy, and programmability.</summary>
  </entry>
</feed>
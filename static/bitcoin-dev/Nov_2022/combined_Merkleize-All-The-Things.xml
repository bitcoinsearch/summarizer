<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Merkleize All The Things</title>
  <updated>2023-08-02T08:28:28.195475+00:00</updated>
  <author>
    <name>Johan Tor책s Halseth 2023-05-30 07:34:09+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-28 10:24:14+00:00</name>
  </author>
  <author>
    <name>Johan Tor책s Halseth 2023-05-26 11:45:17+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-05 21:18:16+00:00</name>
  </author>
  <author>
    <name>Johan Tor책s Halseth 2023-05-04 08:34:07+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-01 21:15:20+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2023-05-01 13:11:08+00:00</name>
  </author>
  <author>
    <name>Johan Tor책s Halseth 2023-04-28 08:48:07+00:00</name>
  </author>
  <author>
    <name>Billy Tetrud 2022-12-13 06:59:27+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2022-12-01 08:47:22+00:00</name>
  </author>
  <author>
    <name>Rijndael 2022-11-30 22:09:33+00:00</name>
  </author>
  <author>
    <name>Rijndael 2022-11-30 19:42:08+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2022-11-12 15:04:20+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2022-11-11 21:49:58+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2022-11-10 09:42:30+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2022-11-10 07:39:10+00:00</name>
  </author>
  <author>
    <name>Peter Todd 2022-11-09 12:07:33+00:00</name>
  </author>
  <author>
    <name>Bram Cohen 2022-11-08 23:34:32+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2022-11-08 12:01:11+00:00</name>
  </author>
  <author>
    <name>Salvatore Ingala 2022-11-08 09:17:42+00:00</name>
  </author>
  <link href="bitcoin-dev/May_2023/021725_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021724_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021719_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021616_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021611_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021604_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/May_2023/021599_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/April_2023/021593_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021277_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Dec_2022/021225_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021224_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021223_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021205_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021203_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021200_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021197_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021192_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021191_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021184_Merkleize-All-The-Things.xml" rel="alternate"/>
  <link href="bitcoin-dev/Nov_2022/021182_Merkleize-All-The-Things.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Merkleize All The Things</title>
    <updated>2023-08-02T08:28:28.196514+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021182.html" rel="alternate"/>
    <summary>In a discussion about taproot internal pubkey and "dynamic key aggregation," Johan proposed a method for efficient use in coin pools. This involved removing data from the merkle tree and storing the pubkeys of members in the embedded data. Salvatore Ingala suggested making OP_CICV and OP_COCV symmetrical to simplify the process and explore a single OP_CHECK_IN_OUT_CONTRACT_VERIFY opcode for greater flexibility. Johan shared his excitement about the implementation of merkleization and suggested making OP_CICV and OP_COCV symmetrical in an email conversation. Salvatore agreed and added that he was exploring a similar method for bringing externally signed data onto the stack. Johan mentioned that fully functioning CoinPools would require functionality similar to OP_MERKLESUB. Salvatore stated that efficient use of the taproot internal pubkey with "dynamic key aggregation" might not be possible with the current semantics.Salvatore Ingala apologized for oversights in his previous email, noting that m_B cannot be committed as-is in the contract's embedded data with the current semantics of OP_COCV. He suggested storing its hash SHA256(m_B) instead. In another email, Salvatore discussed a fun construction on top of the fact that f is committed to in the contract, explaining that one could build a universal state channel where parties can enter any contract among themselves entirely inside the channel.The email conversation on the bitcoin-dev mailing list discussed the generalization of a construct that allows access to embedded data in inputs and outputs, enforcement of output keys and taptrees, and how fraud proofs can extend beyond what Script can do. The conversation then shifted to simulating coin pools using a commitment to the set of pubkeys and amounts owned by participants, along with an output taptree where each participant has their own spending path. The unilateral withdrawal Script can be the same for all participants, with the witness containing the Merkle proof and additional information to identify the leaf in the tree.Salvatore Ingala proposed using rock-paper-scissors as an academic example for the MATT (Miniscript + adaptor signatures + taproot) smart contract. The protocol involves Alice choosing and publishing her move, Bob choosing his move, and the pot being adjudicated per the rules. To prevent Bob from waiting for Alice's move to play accordingly, Alice publishes a commitment to her move and reveals it later. Using CICV/COCV, the game can be played with three transactions, and the possible payout options are fully known when the game starts.Johan asked Salvatore for an example of how a proposal for powerful capabilities with simple opcodes would look on-chain for a simple game like "one player tic-tac-toe" with two tiles. Salvatore explained that the computation step encoded in a leaf needs to be simple enough for Script to verify it. In another email thread, Billy Tetrud mentioned Verkle trees as a useful construction for something like Utreexo, but noted that the cryptography used for Verkle trees isn't quantum-safe. Salvatore also discussed a fun construction on top of the fact that f is committed to in the contract, explaining the possibility of building a universal state channel where parties can enter any contract among themselves entirely inside the channel.In an email exchange, Rijndael and Salvatore discussed the challenge protocol of a fraud-proof system. Rijndael asked if Alice can post a commitment to a different computation that yields a favorable result for her. Salvatore explained that the function f is already hard-coded in the contract itself through the tree of scripts, thus committing to the possible futures. Salvatore suggested dropping op_i from the i-th leaf commitment and embedding the information in the corresponding state's Script. Salvatore further elaborated on the use of a universal Turing machine as a generic function f, allowing for the creation of contracts where the function is not decided when the channel is created.The article delved into the bisection protocol used in smart contracts through MATT covenants. This protocol ensures that both parties provide correct data for a computation step, and if one party provides incorrect information, the other can take all the money. The protocol relies on a collision-free hash function and deterministic computation. The article acknowledged missing aspects of the protocol, such as bonds to incentivize cooperation and additional transitions at every step. However, the code and scripts of the protocol are independent of the actual execution and can be precomputed before the initial covenant is created. Rijndael questioned how to ensure that the execution trace posted by Alice is for the correct computation and not a different one. Salvatore explained that the bisection's Merkle tree is computed only when the parties execute the computation and it never ends up on-chain. He provided a simpler game example to clarify the relationship between the covenant and the bisection protocol.Salvatore Ingala proposed MATT (Merkleize All The Things) as a method for enabling general</summary>
    <published>2023-05-30T07:34:09+00:00</published>
  </entry>
</feed>

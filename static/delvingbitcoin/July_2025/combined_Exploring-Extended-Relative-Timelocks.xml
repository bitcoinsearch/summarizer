<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Exploring Extended Relative Timelocks</title>
  <updated>2025-07-11T02:59:16.413632+00:00</updated>
  <author>
    <name>fjahr 2025-07-10 21:18:02.242000+00:00</name>
  </author>
  <author>
    <name>pyth 2025-07-10 04:50:02.872000+00:00</name>
  </author>
  <link href="delvingbitcoin/July_2025/5434_Exploring-Extended-Relative-Timelocks.xml" rel="alternate"/>
  <link href="delvingbitcoin/July_2025/5425_Exploring-Extended-Relative-Timelocks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Exploring Extended Relative Timelocks</title>
    <updated>2025-07-11T02:59:16.413673+00:00</updated>
    <link href="https://delvingbitcoin.org/t/exploring-extended-relative-timelocks/1818" rel="alternate"/>
    <summary>The discussion surrounding the potential and pitfalls of extended timelocks in Bitcoin transactions presents a nuanced exploration of blockchain technology's future. At its core, the debate addresses a growing interest among users of Liana in why Bitcoin enforces a 65535-block limit for relative timelocks, alongside a curiosity about the feasibility of elongating these timelocks to span approximately ten years. This interest stems from a desire to explore beyond current constraints, motivated by various use cases that could benefit from such an extension.

An innovative approach to extending relative timelocks involves utilizing bit 21 in the `nSequence` field of a Bitcoin transaction as a signal for a "long" timelock. By setting bit 21 and ensuring bit 22 remains unset, the timelock duration is interpreted in units of eight blocks instead of one, effectively multiplying the maximum duration by eight. This method proposes a minimalistic modification to the Bitcoin Core codebase, suggesting a soft fork where older nodes would continue operating under the pre-existing rules by interpreting these transactions with a timelock eight times shorter than intended by the sender.

This experimentation has led to the development of tools designed to test the viability of such extended timelocks, including crafting specific addresses and transactions that adhere to a simple "anyone can spend after timelock" policy. These developments are documented through code changes and tool availability, accessible via GitHub at [https://github.com/bitcoin/bitcoin/commit/a9187117ccf7224297a74f3dfebc2354ad9fe6e2](https://github.com/bitcoin/bitcoin/commit/a9187117ccf7224297a74f3dfebc2354ad9fe6e2) and [https://github.com/pythcoiner/csv2](https://github.com/pythcoiner/csv2), respectively.

Despite the technical ingenuity behind this proposal, it raises several critical considerations. Among these are the risks and edge cases that might emerge, particularly those relating to consensus and compatibility within the broader network. Additionally, there exists a skepticism regarding the practicality of locking coins for durations as lengthy as ten years, especially given the uncertainties surrounding quantum computing's potential to compromise such mechanisms in the future. The conversation thus extends beyond mere technical feasibility, inviting a broader reflection on the strategic implications of fundamentally altering how time-sensitive transactions are managed within the Bitcoin ecosystem.</summary>
    <published>2025-07-10T21:18:02.242000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Exploring Extended Relative Timelocks</title>
  <updated>2025-07-22T03:02:19.330902+00:00</updated>
  <author>
    <name>kloaec 2025-07-21 09:22:39.376000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Exploring Extended Relative Timelocks</title>
    <updated>2025-07-22T03:02:19.330938+00:00</updated>
    <link href="https://delvingbitcoin.org/t/exploring-extended-relative-timelocks/1818/16" rel="alternate"/>
    <summary>The discussion focuses on the implementation of a soft fork in the context of blockchain technology, specifically addressing the use of timelocks within transaction scripts. A soft fork is proposed where older nodes in the network would not recognize a new flag introduced, leading them to enforce a timelock that is eight times shorter than what is newly specified. 

Timelocks are highlighted not as a mechanism for locking coins indefinitely but rather as a tool to introduce conditions within transaction scripts that only become valid after a certain period. This feature is particularly useful in creating more flexible and secure multi-party transaction agreements. For example, in a collaborative spending scenario, there may be no timelock allowing immediate execution, whereas a unilateral spend could incorporate a timelock to delay transaction completion until certain conditions are met.

The email further elucidates on a specific use case involving multiple parties, known as Liana. In this construction, two types of spend conditions are outlined: a regular spend condition that does not involve a timelock, such as a 2-of-2 multisignature agreement, and a backup spend condition that includes a timelock. The latter could involve a 2-of-3 multisig setup with an additional third party's key or even a single signature key agent, providing an extra layer of security or recovery option in transactions.</summary>
    <published>2025-07-21T09:22:39.376000+00:00</published>
  </entry>
</feed>

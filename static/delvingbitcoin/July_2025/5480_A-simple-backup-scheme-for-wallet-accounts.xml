<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A simple backup scheme for wallet accounts</title>
  <updated>2025-07-16T03:01:51.909007+00:00</updated>
  <author>
    <name>salvatoshi 2025-07-15 12:06:03.412000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A simple backup scheme for wallet accounts</title>
    <updated>2025-07-16T03:01:51.909039+00:00</updated>
    <link href="https://delvingbitcoin.org/t/a-simple-backup-scheme-for-wallet-accounts/1607/24" rel="alternate"/>
    <summary>The discussion centers around the use of a specific cryptographic scheme for securing backups, particularly in the context of inheritance and the sharing of access among designated individuals. The scheme in question does not require the storage of additional secrets beyond the initial seed or mnemonic. This approach simplifies the process, as the encryptions of the common secret are included as part of the backup itself. An example provided illustrates a policy setup where one individual, referred to as 'A', and their heirs identified as 'B', 'C', and 'D', can access a backup under certain conditions. The policy, described as `or(A, and(thresh(2,B,C,D), older(timelock)))`, showcases how access to decrypt the backup is contingent upon the cooperation of at least two heirs, potentially along with a lawyer or a third party.

This setup suggests that Shamir's Secret Sharing (SSS) or similar mechanisms that enforce a decryption threshold might be beneficial in cases where controlled access is necessary. However, the inclusion of such mechanisms could introduce complexity into what is meant to be a straightforward system. References made to work by a contributor named @josh ([link1](https://delvingbitcoin.org/t/multisigbackup-com-backup-and-recover-a-k-of-n-descriptor-using-only-n-seeds/1430), [link2](https://delvingbitcoin.org/t/rust-descriptor-encrypt-encrypt-any-descriptor-such-that-only-authorized-spenders-can-decrypt/1750)) highlight potential extensions and applications of this cryptographic approach. Despite the neatness and interesting aspects of these proposed extensions, there's an expressed concern about their potential to complicate the system unnecessarily, which could hinder its broader adoption.

The complexity introduced by additional features is not limited to the implementation but extends to the user interface, which could become more verbose and challenging. Such complexity might not only deter users but also impact interoperability, especially when optional features are involved. In the specific context of inheritance, the ability of heirs to decrypt the backup—provided there is requisite cooperation for any fund movement—should not pose significant practical issues according to the discussion. This perspective implies a balance between maintaining simplicity to encourage adoption and incorporating enough flexibility to address specific use cases like inheritance without overly complicating the system.</summary>
    <published>2025-07-15T12:06:03.412000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A rust library to encode descriptors with a 30-40% size reduction</title>
  <updated>2025-07-13T03:10:25.612964+00:00</updated>
  <author>
    <name>dr-orlovsky 2025-07-12 10:33:39.955000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A rust library to encode descriptors with a 30-40% size reduction</title>
    <updated>2025-07-13T03:10:25.612995+00:00</updated>
    <link href="https://delvingbitcoin.org/t/a-rust-library-to-encode-descriptors-with-a-30-40-size-reduction/1804/2" rel="alternate"/>
    <summary>The challenges surrounding Bitcoin descriptors are multifaceted, primarily due to their non-deterministic nature. This issue stems from several ambiguities, including the inconsistent use of certain characters and formatting options, such as the use of `'`, `h`, or even `H`, the variance in specifying derivation paths like `/*/*` or `/&lt;0;1&gt;/*`, and the arbitrary use of spaces, newlines, and upper- or lower-case encoding for the master key fingerprint. These irregularities hinder the ability to compare two descriptor strings effectively or to utilize a descriptor checksum as a reliable identifier.

Moreover, there exists a concern regarding the syntactical validity versus the semantic accuracy of a descriptor. A descriptor might be syntactically correct yet semantically invalid if it fails to represent a wallet accurately. This is particularly evident in scenarios where multisig descriptors with segwit or taproot involve repeated xpubs across different parts, creating redundancy and complicating manual verification processes.

In response to these issues, there's an initiative to standardize Bitcoin descriptor encoding. The proposed method involves separating the descriptor into a template and payload section, aiming for a more deterministic approach. Efforts towards this direction include the conceptualization of a binary descriptor encoding and a script template library, though these projects are still under development. A temporary solution that has been adopted is using the hash of the first derived scriptpubkey from a descriptor as a deterministic identifier for descriptors.

This ongoing work is part of a broader ambition to enhance Bitcoin infrastructure, exemplified by contributions to projects such as a Rust-based Bitcoin library that is independent from existing solutions like rust-bitcoin and rust-miniscript. These efforts are documented and can be explored further through resources available on GitHub ([stingerjet-docs](https://github.com/BP-WG/stingerjet-docs), [BP-STD](https://github.com/BP-WG/bp-std), and [BP-CORE](https://github.com/BP-WG/bp-core)). Additionally, the author's involvement in creating [mycitadel.io](https://mycitadel.io), a wallet platform, reflects a practical application of these advancements, showcasing a commitment to implementing these innovations in real-world scenarios.</summary>
    <published>2025-07-12T10:33:39.955000+00:00</published>
  </entry>
</feed>

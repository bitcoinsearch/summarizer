<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Flexible Coin Earmarks</title>
  <updated>2025-07-09T02:54:29.724239+00:00</updated>
  <author>
    <name>ajtowns 2025-07-08 07:50:38.551000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Flexible Coin Earmarks</title>
    <updated>2025-07-09T02:54:29.724278+00:00</updated>
    <link href="https://delvingbitcoin.org/t/flexible-coin-earmarks/1275/3" rel="alternate"/>
    <summary>The discussion focuses on the potential of both bll and simplicity in achieving a modular approach to defining execution and replacement conditions for payments, with an emphasis on minimizing manual adjustments specific to use cases. The provided example illustrates how to implement this concept using bll, highlighting a method that leverages five hooks: EXTRACT, NEWIPK, NEWEM, NEWOV, and CHECKEM. These hooks are designed to simplify the process of implementing designs where each payment is associated with executing a single earnmark, assuming the conditions can be expressed in bll. For those interested in exploring this implementation further, detailed information and examples can be found at [this GitHub repository](https://github.com/ajtowns/bllsh/blob/04f924f672adf0ff5f5d39e258e9f19cdf9ab493/examples/test-flexmarks). This approach underscores the emphasis on making the system adaptable and easy to manage, particularly for applications that require flexibility and efficiency in handling payment conditions and executions.</summary>
    <published>2025-07-08T07:50:38.551000+00:00</published>
  </entry>
</feed>

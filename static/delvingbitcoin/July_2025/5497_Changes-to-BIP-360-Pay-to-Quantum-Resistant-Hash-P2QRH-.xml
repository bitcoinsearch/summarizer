<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)</title>
  <updated>2025-07-17T02:59:34.116393+00:00</updated>
  <author>
    <name>dr-orlovsky 2025-07-16 16:45:26.989000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)</title>
    <updated>2025-07-17T02:59:34.116425+00:00</updated>
    <link href="https://delvingbitcoin.org/t/changes-to-bip-360-pay-to-quantum-resistant-hash-p2qrh/1811/16" rel="alternate"/>
    <summary>The discussion revolves around the intricacies of implementing Taproot, a significant upgrade within the Bitcoin protocol aimed at enhancing privacy, efficiency, and smart contract capabilities. Notably, the conversation touches upon the Segregated Witness (SegWit) versioning, particularly the taproot version associated with SegWit. A point of confusion arises from the numeration of these versionsâ€”whether it's version 1 or 2, which appears to be a common source of misunderstanding due to the 0-based numbering system employed.

In delving into the technical specifications, reference is made to BIP-341 (Bitcoin Improvement Proposal), which delineates the framework for utilizing a taproot segwit version. This document clarifies that it is possible to engage a taproot segwit version with payloads differing from the standard 256 bits, suggesting the potential for future versions of taproot to accommodate various payload lengths. However, the current discussion identifies a constraint tied to using a 256-bit payload, implying limitations on leveraging this specific route for future taproot versions. This detail underscores the complexity and forward-looking considerations inherent in evolving Bitcoin's infrastructure to support more advanced features while navigating the nuances of its underlying technological standards.</summary>
    <published>2025-07-16T16:45:26.989000+00:00</published>
  </entry>
</feed>

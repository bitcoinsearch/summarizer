<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Chain Code Delegation: Private Access Control for Bitcoin Keys</title>
  <updated>2025-07-17T03:01:54.289750+00:00</updated>
  <author>
    <name>marathon-gary 2025-07-16 20:15:30.976000+00:00</name>
  </author>
  <author>
    <name>jurvis  . 2025-07-15 00:41:07.310000+00:00</name>
  </author>
  <link href="delvingbitcoin/July_2025/5506_Chain-Code-Delegation-Private-Access-Control-for-Bitcoin-Keys.xml" rel="alternate"/>
  <link href="delvingbitcoin/July_2025/5469_Chain-Code-Delegation-Private-Access-Control-for-Bitcoin-Keys.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Chain Code Delegation: Private Access Control for Bitcoin Keys</title>
    <updated>2025-07-17T03:01:54.289788+00:00</updated>
    <link href="https://delvingbitcoin.org/t/chain-code-delegation-private-access-control-for-bitcoin-keys/1837" rel="alternate"/>
    <summary>Chain Code Delegation emerges as a pivotal innovation in the realm of collaborative custody, propelling the concept into a new era of privacy and security. Developed by Jesse Posner alongside a colleague, this technique marks a departure from traditional custody methods by strategically withholding BIP-32 chain codes and instead providing scalar tweaks at the time of signing. This nuanced approach significantly enhances privacy by preventing custodians from having visibility into the key tree's entirety through an XPUB. It addresses the prevalent privacy concerns within multisig arrangements where the exposure of all public keys in a redeem script enables custodians to track transaction histories.

The methodology behind Chain Code Delegation intricately balances the need for security with the imperative of privacy. Custodians, under this system, sign transactions without full insight into their scope or the ability to derive child keys, thereby constraining their knowledge and potential security vulnerabilities to only those transactions explicitly shared with them. This is achieved through a process whereby the counterparty generates a necessary chain code and computes a scalar tweak for each transaction requiring a signature. The custodian utilizes this tweak to sign the transaction, blissfully unaware of the chain code, thereby limiting their visibility and reducing the risk of security breaches.

Moreover, Chain Code Delegation introduces sophisticated mechanisms to further solidify its stance on privacy and security. By leveraging BIP32 tweaks in conjunction with blind Schnorr signatures, it ensures the confidentiality of transactions signed by a custodian. Predicate blind signatures are employed to enforce policies during the signing phase, all while maintaining the veil of privacy. This strategic limitation of information not only bolsters privacy but also significantly narrows the window of opportunity for attackers, particularly in environments susceptible to large-scale attacks like mobile phones. It allows users to meticulously control their keys' capabilities through selective disclosure of scalar tweaks, presenting a formidable barrier against unauthorized access.

For those interested in delving deeper into the technical foundations and applications of Chain Code Delegation, additional resources provide insightful perspectives. Discussions on Private Collaborative Custody with FROST ([link](https://gist.github.com/nickfarrow/4be776782bce0c12cca523cbc203fb9d/)) and Concurrently Secure Blind Schnorr Signatures ([link](https://eprint.iacr.org/2022/1676)) offer valuable information for understanding the intricate details and broader implications of this innovative approach to secure, privacy-centric collaborative custody solutions.</summary>
    <published>2025-07-16T20:15:30.976000+00:00</published>
  </entry>
</feed>

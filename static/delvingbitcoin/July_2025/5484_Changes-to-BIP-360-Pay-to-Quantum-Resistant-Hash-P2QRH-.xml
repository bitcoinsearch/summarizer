<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)</title>
  <updated>2025-07-16T03:04:31.046736+00:00</updated>
  <author>
    <name>stevenroose 2025-07-15 15:09:55.489000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)</title>
    <updated>2025-07-16T03:04:31.046767+00:00</updated>
    <link href="https://delvingbitcoin.org/t/changes-to-bip-360-pay-to-quantum-resistant-hash-p2qrh/1811/14" rel="alternate"/>
    <summary>The concept proposed involves a modification to the current taproot mechanism, introducing what could be referred to as a 'taproot v2'. This version would still commit to a 32-byte output, allowing for the standard taproot spend actions such as signing with an output key or showing a MAST (Merkelized Abstract Syntax Tree) tweak. A novel inclusion in this iteration would be the ability to present the MAST root as the preimage of the output, adding a layer of functionality.

However, it's important to note that this suggestion does not address quantum resistance, a significant consideration given the advancements in quantum computing. The reliance on the security assumption that no one can sign for an arbitrary 32-byte SHA256 output or reverse-engineer the SHA256 preimage of a public key is crucial for this system's integrity.

Regarding privacy, the proposed method suggests there would be no discernible difference in cases where a key spend is not involved. This implies that for transactions opting not to use the key spend feature, their privacy impact remains unchanged from the current taproot implementation, maintaining the status quo in terms of user anonymity and transaction obfuscation.</summary>
    <published>2025-07-15T15:09:55.489000+00:00</published>
  </entry>
</feed>

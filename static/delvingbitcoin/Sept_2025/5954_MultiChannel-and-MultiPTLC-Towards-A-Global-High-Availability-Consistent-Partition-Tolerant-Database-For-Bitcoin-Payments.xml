<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>MultiChannel and MultiPTLC: Towards A Global High-Availability Consistent/Partition-Tolerant Database For Bitcoin Payments</title>
  <updated>2025-09-23T02:23:03.902119+00:00</updated>
  <author>
    <name>ZmnSCPxj 2025-09-22 23:17:46.225000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>MultiChannel and MultiPTLC: Towards A Global High-Availability Consistent/Partition-Tolerant Database For Bitcoin Payments</title>
    <updated>2025-09-23T02:23:03.902156+00:00</updated>
    <link href="https://delvingbitcoin.org/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983/11" rel="alternate"/>
    <summary>The RAFT-inspired MultiPTLC competition algorithm proposes a novel approach to enhance the efficiency and reliability of payment routing in a potential future PTLC world. This algorithm builds on the premise that by allowing Lightning Service Providers (LSPs) to probe paths in parallel, it significantly increases the probability of finding successful routes for transactions. Unlike traditional HTLC or PTLC mechanisms, which necessitate choosing a single path after probing, MultiPTLC facilitates the selection of multiple successful paths starting from various LSPs, thereby optimizing the routing process.

The core innovation of MultiPTLC lies in its use of cryptographic and network principles to ensure secure and efficient transaction completion. The protocol requires the sender to include a nonce in the onion packet sent to the receiver, who then receives a blinded path back to the sender. In this context, the sender performing retries is an LSP rather than the original sending party, enhancing privacy and security. This setup allows for a stateless design, particularly beneficial for implementations like the LDK, by using HMAC(node_secret, receiver_request_nonce) for generating receiver-can-claim scalars without maintaining state.

A significant part of the algorithm involves a consensus mechanism among participating LSPs, exemplified through a hypothetical scenario involving three LSPs: Alice, Bob, and Charlie. Through a proof-of-work system, these LSPs agree on the sequence of transactions by verifying nonces and creating blocks that append a counter to the receiver-request-nonce and its hash. This process continues until a predetermined work target is achieved, ensuring fairness and preventing any single LSP from dominating the process due to faster timeouts or other advantages. The consensus effectively establishes a quorum (e.g., 2-of-3 in the given example), which then authorizes the transaction branch to proceed.

This methodology not only preserves the integrity of the transaction process but also enforces a level of democratic participation among LSPs, ensuring no single entity can unfairly influence outcomes. The proof-of-work aspect introduces a thermodynamic element to the timing, making it impossible for LSPs to cheat the system through manipulated timeouts. This feature is critical for maintaining trust among participants and ensuring the security model does not degrade below a k-of-n agreement.

In essence, the MultiPTLC competition algorithm offers a sophisticated solution to the challenges of routing payments in decentralized networks. By leveraging parallel path probing, cryptographic security measures, and a proof-of-work consensus mechanism, it aims to improve transaction efficiency, reduce reliance on single paths, and enhance overall network resilience.</summary>
    <published>2025-09-22T23:17:46.225000+00:00</published>
  </entry>
</feed>

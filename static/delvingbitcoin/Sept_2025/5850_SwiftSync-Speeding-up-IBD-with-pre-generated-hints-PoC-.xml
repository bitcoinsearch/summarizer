<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SwiftSync -- Speeding up IBD with pre-generated hints (PoC)</title>
  <updated>2025-09-09T02:26:50.746841+00:00</updated>
  <author>
    <name>rustaceanrob 2025-09-08 15:09:33.131000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SwiftSync -- Speeding up IBD with pre-generated hints (PoC)</title>
    <updated>2025-09-09T02:26:50.746881+00:00</updated>
    <link href="https://delvingbitcoin.org/t/swiftsync-speeding-up-ibd-with-pre-generated-hints-poc/1562/18" rel="alternate"/>
    <summary>The SwiftSync project, as detailed in the provided context, is a Rust-based binary designed to enhance the efficiency of syncing blockchain data. It incorporates modifications to the `libbitcoinkernel` library to facilitate this process. Specifically, these adjustments enable `ProcessNewBlockHeaders` for the pre-synchronization of block headers and the management of chain state. Additionally, the implementation requires the `HaveCoin` function on the `ChainStateManager` to construct a hintfile, which plays a crucial role in the Initial Block Download (IBD) process.

The IBD binary's operation is meticulously outlined, starting with the reading and parsing of a hintfile to identify a predetermined stop-hash. Following this, the system queries DNS to locate reachable nodes, establishes a connection to a peer for the synchronization of block headers up to the stop hash, and initiates multiple threads tasked with requesting batches of blocks. The process also includes updating an accumulator based on whether the output is included in the Unspent Transaction Output (UTXO) set, as indicated by the hint file. The binary concludes its task by verifying if the accumulator state is null after downloading all blocks, thereby determining the success or failure of the synchronization attempt.

Test results from running the binary on various computers have shown promising sync times, and there is an open invitation for others to test and provide feedback on the tool. Furthermore, there is ongoing development aimed at optimizing synchronization speeds through a forthcoming patch. This update intends to segment block hashes following a "work-stealing" methodology, which is expected to further enhance synchronization efficiency in the near future. For those interested in exploring the project or contributing to its development, more information can be found on GitHub at [SwiftSync](https://github.com/2140-dev/swiftsync/tree/master/node).</summary>
    <published>2025-09-08T15:09:33.131000+00:00</published>
  </entry>
</feed>

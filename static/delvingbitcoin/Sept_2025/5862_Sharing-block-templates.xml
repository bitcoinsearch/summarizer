<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sharing block templates</title>
  <updated>2025-09-13T02:16:20.232098+00:00</updated>
  <author>
    <name>ajtowns 2025-09-12 06:35:51.054000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sharing block templates</title>
    <updated>2025-09-13T02:16:20.232130+00:00</updated>
    <link href="https://delvingbitcoin.org/t/sharing-block-templates/1906/19" rel="alternate"/>
    <summary>The discourse highlights the critical aspect of relaying transactions within a network, emphasizing the significance of understanding which transactions peers anticipate will be successfully mined. This understanding is crucial because nodes and miners often have varied policies for accepting transactions, making this information valuable for efficient block relay. The communication underscores the limitations and challenges associated with orphan transactions. Orphan transactions, which lack parent transactions, are deemed impractical for block relay purposes. Including an orphan transaction in a block without its parent renders the block invalid, thus defeating the efficiency of the relay process. Furthermore, seeking the parent transaction incurs additional network latency, which is ideally avoided.

The document also touches upon the management of transaction pools, specifically addressing the constraints of accepting transactions based on their size. While accepting transactions below a certain size threshold serves as a manageable strategy, it does not sufficiently mitigate risks. Notably, the approach has vulnerabilities, particularly in how it exposes the network to potential attacks. Adversaries can exploit these vulnerabilities by inundating the memory with unnecessary data, effectively compromising the network's integrity and performance. This concern is illustrated through the mention of a recommendation that suggests a pool could handle up to a million entries, each limited to 100kB. However, this setup poses a significant risk as it could lead to substantial memory usage, upwards of 100GB. The narrative further exemplifies this vulnerability by referencing modifications introduced in Knots's recent release, which imposed an additional 10MB limit on transactions. Despite such measures, the system remains susceptible to attacks where an adversary could deplete the extra pool's capacity by sending a calculated number of invalid transactions, thereby illustrating the ongoing challenge of securing transaction relay mechanisms against malicious activities.

For more detailed technical insights and recommendations on handling these challenges, refer to the documentation and updates provided in the links: [datum recommendation](https://github.com/OCEAN-xyz/datum_gateway/blob/4c00de9a401b87ef3a2add2ca592f93c83db2484/README.md?plain=1L79-L82) and [Knots's recent update](https://github.com/bitcoinknots/bitcoin/commit/9b78a13aea28b09b320bfe192ec4f72cdcc57762).</summary>
    <published>2025-09-12T06:35:51.054000+00:00</published>
  </entry>
</feed>

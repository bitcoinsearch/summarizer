<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - State minimization in MuSig2 signing sessions</title>
  <updated>2024-03-08T02:00:05.628638+00:00</updated>
  <author>
    <name>salvatoshi 2024-03-07 12:52:25.967000+00:00</name>
  </author>
  <author>
    <name>real-or-random 2024-03-07 12:26:19.959000+00:00</name>
  </author>
  <author>
    <name>salvatoshi 2024-03-07 11:09:06.099000+00:00</name>
  </author>
  <author>
    <name>real-or-random 2024-03-07 10:44:57.418000+00:00</name>
  </author>
  <author>
    <name>salvatoshi 2024-03-07 09:26:58.805000+00:00</name>
  </author>
  <author>
    <name>real-or-random 2024-03-07 07:04:09.950000+00:00</name>
  </author>
  <author>
    <name>salvatoshi  . 2024-03-06 18:17:29.781000+00:00</name>
  </author>
  <author>
    <name>realorrandom  . 2024-03-06 17:23:09.937000+00:00</name>
  </author>
  <author>
    <name>cmd  . 2024-03-02 22:11:50.566000+00:00</name>
  </author>
  <author>
    <name>salvatoshi  . 2024-03-01 15:24:01.026000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/1819_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1818_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1816_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1814_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1812_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1810_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1806_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1805_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1768_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1742_State-minimization-in-MuSig2-signing-sessions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - State minimization in MuSig2 signing sessions</title>
    <updated>2024-03-08T02:00:05.628766+00:00</updated>
    <link href="https://delvingbitcoin.org/t/state-minimization-in-musig2-signing-sessions/626" rel="alternate"/>
    <summary>The email discussions revolve around several key improvements and clarifications in the realm of cryptographic nonce generation, session management, and the efficient handling of Partially Signed Bitcoin Transactions (PSBTs) within various proposals and implementations. One significant point of discussion is the renaming of a variable to `psbt_session_id` to avoid confusion and enhance clarity regarding its purpose. This change aims to make the code more understandable and explicit about the variable's function in managing PSBT sessions, highlighting the importance of clear naming conventions in programming.

There was an acknowledgment of confusion between the terms `session_id` and `rand_root`, which is crucial for understanding how fresh sessions are initiated with new randomness, even if they share a `session_id`. This distinction is vital for ensuring security and preventing attacks that could exploit misunderstandings of these terms. The conversation also touched upon the lifecycle of a `session_id`, emphasizing that once a signature phase is completed, any attempt to use the same `session_id` must start anew, thereby safeguarding against certain types of replay or tampering attacks.

A security concern was raised regarding the handling of PSBTs when faced with potential `id` collisions and how such scenarios could impact the nonce generation process (`NonceGen`). It was pointed out that if a PSBT is presented again with mutated members that do not affect NonceGenâ€™s output, it might not compromise security, given that NonceGen would produce the same result as if there had been no mutation. This observation underscores the resilience of the proposed system against certain attack vectors while highlighting areas where caution is needed, particularly in the event of parameter changes that could influence nonce generation.

Further exploration into nonce generation methodologies uncovered a proposal to leverage the True Random Number Generator (TRNG) in Ledger devices' Secure Elements. This approach contrasts with using a CounterNonceGen, which requires a secure atomic counter. Despite the different mechanisms, the goal remains consistent: to manage psbt-level signing sessions effectively, ensuring the integrity and security of the signing process, especially when handling multiple sessions concurrently.

The necessity of accessing the secret key during the nonce generation stage was discussed, posing a potential security risk. This highlights the delicate balance between maintaining security and meeting functional requirements within cryptographic operations. The dialogue reflects broader concerns in designing secure yet efficient systems and the ongoing efforts to refine cryptographic methods to address emerging challenges.

An overview of BitEscrow's implementation of parallel musig2 signing sessions introduces concepts like "root_nonce" and "session_id". For those interested in the technical details, their GitHub repository ([BitEscrow/escrow-core](https://github.com/BitEscrow/escrow-core)) provides insights into their approach, including the potential for running VMs using Discreet Log Contracts (DLCs). 

Lastly, the discussion includes a method aimed at improving signing flows for wallets, particularly for hardware signing devices constrained by limited storage. This method involves generating synthetic randomness for transaction inputs and keys, reducing the need for extensive persistent storage across signing sessions. A global random number, `rand_root`, facilitates the generation of session-specific randomness, allowing for efficient nonce and partial signature production. This technique addresses security concerns by eliminating nonce reuse and enhancing the signing process's resilience against malleability attacks. Contributions from individuals like Yannick Seurin were acknowledged, highlighting the collaborative effort behind developing this improved signing flow. Links to related discussions and proposals offer further context on the subject matter.</summary>
    <published>2024-03-07T12:52:25.967000+00:00</published>
  </entry>
</feed>

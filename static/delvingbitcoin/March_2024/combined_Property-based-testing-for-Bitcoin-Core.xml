<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Property-based testing for Bitcoin Core</title>
  <updated>2024-03-19T02:00:37.075928+00:00</updated>
  <author>
    <name>bruno 2024-03-18 17:53:44.090000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-03-07 18:58:56.345000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-03-07 15:59:47.370000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-03-07 14:50:32.548000+00:00</name>
  </author>
  <author>
    <name>bruno  . 2024-03-07 14:37:55.082000+00:00</name>
  </author>
  <author>
    <name>bruno  . 2024-03-07 14:37:26.517000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-03-07 14:12:50.849000+00:00</name>
  </author>
  <author>
    <name>ProofOfKeags  . 2024-03-05 20:43:56.071000+00:00</name>
  </author>
  <author>
    <name>bruno  . 2024-03-05 14:28:23.326000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2024/1925_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1830_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1829_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1825_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1824_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1823_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1820_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1794_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2024/1791_Property-based-testing-for-Bitcoin-Core.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Property-based testing for Bitcoin Core</title>
    <updated>2024-03-19T02:00:37.076052+00:00</updated>
    <link href="https://delvingbitcoin.org/t/property-based-testing-for-bitcoin-core/640" rel="alternate"/>
    <summary>The conversation opens with a focus on the application of property-based testing in programming, specifically targeting 64-bit arithmetic operations like addition and subtraction (`OP_ADD`, `OP_SUB`). This method is highlighted for its simplicity and practicality, offering an accessible entry point for those new to property-based testing. The aim here is to provide a straightforward means of engaging with this testing approach without requiring speculation about the activation of a soft fork, thereby emphasizing the immediate applicability and benefits of property-based testing in assessing basic arithmetic functions.

In discussing software testing within the cryptocurrency domain, particularly with reference to [bitcoin-s](https://github.com/bitcoin-s/bitcoin-s), there's an explicit preference for direct data structure access over network-layer testing to avoid inefficiencies and the potential for unreliable tests that might arise from examining the entire networking stack. This perspective acknowledges the maintenance challenges associated with such broad testing strategies. Despite these concerns, Bitcoin Core's existing test suites, developed in C++ and Python, are mentioned, with a noted preference for the C++ framework due to its perceived comprehensiveness. This discussion extends into an examination of the [64-bit arithmetic PR](https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397) and critiques of the Python test framework for assuming value correctness without comprehensive validation, highlighting the importance of rigorous testing for the integrity of cryptocurrency systems.

Further elaboration on testing methodologies distinguishes between property-based testing and functional testing, underscoring property-based testing's suitability for black-box systemsâ€”where the internal mechanics are not the primary concern. This segment critiques the redundancy of white-box testing methods in scenarios better served by fuzzing, a technique involving random data inputs to uncover bugs or security issues. The discourse emphasizes the importance of selecting appropriate testing strategies based on specific needs rather than indiscriminately applying various methods, illustrating the nuanced landscape of software testing practices.

An incident involving a declined pull request (PR) in the Bitcoin repository, found at [https://github.com/bitcoin/bitcoin/pull/8469](https://github.com/bitcoin/bitcoin/pull/8469), serves as a case study for the critical evaluation of new contributions against existing functionalities. This PR, which proposed enhancements overlapping with capabilities already provided by the project's fuzzing infrastructure, underscores the necessity of avoiding redundant additions that do not offer new value. It highlights the role of fuzzing in maintaining and enhancing software security and reliability, especially in projects of critical significance like Bitcoin.

The dialogue also reflects on the broader implications and need for property testing within the software industry, advocating for its adoption to enhance project comprehension and quality. This advocacy is rooted in a belief in property testing's potential to significantly improve software development practices across the board.

Property-based testing's efficacy is further showcased through a functional test within Bitcoin Core, designed to assess the system's resilience against resource exhaustion. This example illustrates how property-based testing can facilitate the examination of complex scenarios by dynamically adjusting test parameters, such as the number of connections and message volumes. The use of the [TSTL](https://github.com/agroce/tstl) framework exemplifies the capacity for generating extensive, varied test cases from a single setup, demonstrating property-based testing's versatility and depth in ensuring system robustness. Through these discussions, property-based testing is positioned as an indispensable tool in advancing comprehensive and effective validation techniques for complex systems.</summary>
    <published>2024-03-18T17:53:44.090000+00:00</published>
  </entry>
</feed>

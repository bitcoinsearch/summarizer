<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Combined CTV/APO into minimal TXHASH+CSFS</title>
  <updated>2024-08-22T03:12:26.890865+00:00</updated>
  <author>
    <name>reardencode 2023-08-27 13:37:10.961000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Combined CTV/APO into minimal TXHASH+CSFS</title>
    <updated>2024-08-22T03:12:26.890897+00:00</updated>
    <link href="https://delvingbitcoin.org/t/combined-ctv-apo-into-minimal-txhash-csfs/60/5" rel="alternate"/>
    <summary>The discussion emphasizes the minimal practical differences between softforking to introduce a new opcode and softforking for enabling new argument-based behavior. It highlights that regardless of the approach, updates are necessary, deployment of the fork is required, and the benefits in terms of code savings on the Core side are considered minor. The conversation suggests that focusing on avoiding additional opcodes in upgrades might not be a beneficial overarching goal. Instead, it proposes the idea of defining an `OP_TEMPLATEHASH` that only requires a numeric mode argument from the stack, presenting it as a more sensible option compared to an upgradable `OP_TXHASH`. This perspective stems from a desire to avoid creating overly complex and lengthy scripts that are difficult to understand and maintain.

There's a consensus on the importance of maintaining simplicity and clarity in script functionalities to ensure they can be effectively used for concrete verification purposes. The dialogue introduces the concept of Concrete Scriptable Functionality Sets (CSFS) by mentioning potential applications such as key delegation and possibly federations, although it acknowledges a lack of deep understanding or examples beyond these initial thoughts. The utility of CSFS is questioned unless it significantly aids in the unification of BIP 118 and 119, suggesting that activating both as they are might be more straightforward.

Examples of how CSFS could be employed are shared, illustrating basic lock and unlock mechanisms through a combination of operations designed to demonstrate key delegation. These examples serve to provide a tangible sense of how CSFS might be utilized in practice, despite the acknowledged need for further exploration into other possible use cases. This part of the conversation underlines an openness to discovering additional applications for CSFS, indicating that the current understanding and examples represent just the starting point of a broader investigation into its potential functionalities.</summary>
    <published>2023-08-27T13:37:10.961000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Combined CTV/APO into minimal TXHASH+CSFS</title>
  <updated>2024-08-22T03:12:13.305788+00:00</updated>
  <author>
    <name>reardencode 2023-08-27 14:02:22.003000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Combined CTV/APO into minimal TXHASH+CSFS</title>
    <updated>2024-08-22T03:12:13.305820+00:00</updated>
    <link href="https://delvingbitcoin.org/t/combined-ctv-apo-into-minimal-txhash-csfs/60/6" rel="alternate"/>
    <summary>The discussions around recursion, counters, and Spookchains have brought to light the intriguing dynamics of deleted key recursion within blockchain technology. This concept pivots on the ability of a covenant creator to convincingly demonstrate the deletion of a key, enabling various forms of covenants based on different hash types. Specifically, `SIGHASH_SINGLE` type hashes stand out for their potential to create significant (or concerning) constructions similar to Spookchains or hashrate escrow. This contrasts with `SIGHASH_ALL` type hashes, which necessitate the establishment of a new deleted key counter covenant for each withdrawal, thereby circumventing the TOFU security model in favor of federated withdrawals and disregarding the countdown process altogether.

The debate extends into the realm of aiding protocols like Ark through the adoption of a CTV/APO-like hash that encompasses all scripts or outpoints barring the one being verified, introducing the issue of quadratic hashing. Despite reservations due to the extensive hashing this could entail in a consensus-valid transaction, suggestions have been made to limit the incorporation of such hashes to avoid these pitfalls. For instance, allowing only one "every other mode" hash per transaction has been proposed to mitigate excessive hashing while still accommodating complex script reasoning. Alternatively, focusing on "hash-the-next" modes might offer a viable solution for protocols like Ark by committing only to the immediate next input's script or outpoint, thus sidestepping the quadratic hashing dilemma.

In response to these discussions, there is a move towards drafting a version of `OP_TEMPLATEHASH` that excludes `SIGHASH_SINGLE`-like modes. This aims to encompass as broad a spectrum of input-related data hashing as possible without triggering the adverse effects associated with quadratic hashing. Such developments underscore the evolving nature of blockchain technology and the continuous search for optimal balance between security, efficiency, and utility in cryptographic practices. The conversation, highlighted through [this Twitter post](https://twitter.com/brqgoo/status/1694090272009797687), illustrates the community's active engagement and innovative approach towards resolving complex technical challenges.</summary>
    <published>2023-08-27T14:02:22.003000+00:00</published>
  </entry>
</feed>

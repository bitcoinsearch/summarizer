<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Combined CTV/APO into minimal TXHASH+CSFS</title>
  <updated>2024-08-22T03:12:51.534202+00:00</updated>
  <author>
    <name>reardencode 2023-08-24 17:54:26.189000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Combined CTV/APO into minimal TXHASH+CSFS</title>
    <updated>2024-08-22T03:12:51.534236+00:00</updated>
    <link href="https://delvingbitcoin.org/t/combined-ctv-apo-into-minimal-txhash-csfs/60/3" rel="alternate"/>
    <summary>The discussion revolves around the handling of `OP_TXHASH` in the context of blockchain soft forks, emphasizing the need for scripts to clearly define how they accept signatures on various transaction hashes. A new stance has been introduced, suggesting that `OP_TXHASH` should be viewed as a single fragment with only one interpretation at each soft fork level. This approach necessitates that if multiple transaction hashes are to be accepted, they must be explicitly specified within the script's code. The rationale behind this methodology is elaborated through a shared [resource](https://gist.github.com/reardencode/2aa98700b720174598d21989dd46e781can-selection-of-op_txhash-mode-be-deferred-to-spend-time), which outlines the procedure for selecting the `OP_TXHASH` mode at the time of expenditure. 

The argument further unfolds by comparing the proposed handling of `OP_TXHASH` with existing signature operations (sigops). In traditional sigops, the hash method employed during a transaction can be determined at the time of spending, thanks to the integrated process of hashing and signature verification. However, the separation of these two processes—hashing and signature validation—calls for a predefined hash method in the output script. This change is partly due to the introduction of a new key type under bip118, distinguished from existing key types by its commitment to new spendable modes.

This conversation underscores an important shift in blockchain protocol development, highlighting the trade-offs between upgradeability of the `OP_TXHASH` feature and the simplicity of specifying hash types or computing them within scripts at the time of transaction. The emphasis on predefining hash methods aligns with broader goals of ensuring security and clarity in transaction execution, particularly in the evolving landscape of soft fork implementations.</summary>
    <published>2023-08-24T17:54:26.189000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>The unsuitability of presigned transactions for vaults</title>
  <updated>2025-07-01T04:55:01.154191+00:00</updated>
  <author>
    <name>1440000bytes 2025-06-14 17:38:15.504000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>The unsuitability of presigned transactions for vaults</title>
    <updated>2025-07-01T04:55:01.154223+00:00</updated>
    <link href="https://delvingbitcoin.org/t/the-unsuitability-of-presigned-transactions-for-vaults/113/7" rel="alternate"/>
    <summary>In a recent discussion, the topic of transaction signing and security in Bitcoin development was addressed. The conversation highlighted the challenges associated with managing keys after transactions have been signed. Traditionally, to maintain security, it is imperative to securely delete the keys following the signing process. This approach is critical to prevent unauthorized access and potential misuse. Moreover, there is an inherent risk of losing pre-signed transactions, which poses a significant challenge in managing transaction security effectively.

An alternative solution presented involves the use of CheckTemplateVerify (CTV), a method that offers a more secure and efficient way to handle transactions. CTV enables a mechanism where, instead of having to delete keys securely after each transaction signing, users can set up an emergency path. This path becomes particularly useful if an unvault transaction—a transaction meant to move funds out of a more secure storage—is maliciously triggered by an attacker. By implementing CTV, users gain an additional layer of security and flexibility, mitigating the risks associated with key management post-transaction signing and the potential loss of pre-signed transactions.

The discussion was furthered through an email due to the inefficiencies and challenges posed by communicating via the original mailing list, which included delays and rejections in moderation. This method of communication highlights the importance of finding effective channels for discourse in the development community, especially on critical issues such as security protocols in Bitcoin transactions. For more detailed information, you can refer to the original discussion on the Bitcoin developers' group [here](https://groups.google.com/g/bitcoindev/c/KJF6A55DPJ8/m/85w00kw8AwAJ).</summary>
    <published>2025-06-14T17:38:15.504000+00:00</published>
  </entry>
</feed>

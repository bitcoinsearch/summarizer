<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
  <updated>2025-07-01T05:00:41.405127+00:00</updated>
  <author>
    <name>jamesob 2025-06-07 16:06:31.512000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
    <updated>2025-07-01T05:00:41.405159+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants/1509/73" rel="alternate"/>
    <summary>The recent discussion on technical improvements in the realm of Bitcoin transaction protocols has led to an innovative patch that integrates bare CheckTemplateVerify (CTV) as a first-class entity while transforming CTV into a push-onto-stack taproot-only opcode. This development marks a significant step towards optimizing Bitcoin's scripting capabilities, which is appreciated by peers in the field. However, there exists a preference for the current implementation of CTV for several noteworthy reasons.

Firstly, the adaptability of the current bare legacy CTV implementation allows for future upgrades, particularly in extending the capacity for CTV hashes beyond 32 bytes. A suggestion was made that the new patch could similarly be made upgradeable by accepting any witness version 2 with a program size exceeding 32 bytes. This feature emphasizes the importance of forward compatibility in blockchain technology advancements.

Secondly, the existing witness version 0 (wit v0) CTV enables the creation of scripts that are more intricate than a mere single CTV invocation. This capability is crucial for developing complex transaction conditions without incurring the additional data load associated with Taproot's control block, which adds a 33-virtual byte overhead. This aspect is highlighted through the example provided in the [simple-ctv-vault project](https://github.com/jamesob/simple-ctv-vault/blob/7dd6c4ca25debb2140cdefb79b302c65d1b24937/main.pyL303-L316), illustrating practical applications and potential considerations for future scalability and efficiency concerns.

Lastly, an intriguing benefit of utilizing bare CTV legacy scripts is their inherent safeguard against accidental address reuse. Since these scripts do not correlate with a specific address, the risk of mistakenly sending funds to an already utilized vault is nullified. This characteristic stands out as a fringe yet significant advantage, enhancing user security and error prevention. Despite an initial oversight, it was corrected that the proposed witness version 2 inherently adopts bech32m addresses, as delineated in the Bitcoin repository, thereby ensuring address format consistency and usability.

In conclusion, while the new patch introduces promising enhancements to the Bitcoin protocol by elevating CTV's integration and functionality, the prevailing implementation retains distinct advantages in terms of upgradeability, script complexity, and security against accidental address reuse. These discussions underscore the dynamic and thoughtful consideration of developments within cryptocurrency technologies, striving for both innovation and practicality.</summary>
    <published>2025-06-07T16:06:31.512000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CTV vault output descriptor</title>
  <updated>2025-07-02T02:57:00.589098+00:00</updated>
  <author>
    <name>sanket  . 2025-06-20 01:50:09.128000+00:00</name>
  </author>
  <author>
    <name>sjors  . 2025-06-12 18:44:41.341000+00:00</name>
  </author>
  <author>
    <name>AdamISZ  . 2025-06-12 17:54:29.996000+00:00</name>
  </author>
  <author>
    <name>sjors 2025-06-12 14:11:46.613000+00:00</name>
  </author>
  <author>
    <name>sjors  . 2025-06-12 07:07:37.257000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2025-06-12 02:28:54.951000+00:00</name>
  </author>
  <author>
    <name>sanket  . 2025-06-12 01:11:15.704000+00:00</name>
  </author>
  <author>
    <name>bytes  . 2025-06-10 14:51:28.906000+00:00</name>
  </author>
  <author>
    <name>sjors  . 2025-06-10 12:12:07.538000+00:00</name>
  </author>
  <link href="delvingbitcoin/June_2025/5325_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5288_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5287_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5286_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5285_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5284_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5283_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5268_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <link href="delvingbitcoin/June_2025/5267_CTV-vault-output-descriptor.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CTV vault output descriptor</title>
    <updated>2025-07-02T02:57:00.589179+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-vault-output-descriptor/1766" rel="alternate"/>
    <summary>The revised approach to constructing CheckTemplateVerify (CTV) vaults introduces a significant modification aimed at enhancing the security and efficiency of fund deposits. This method involves an initial deposit into a regular BIP380 `in_desc` before transferring the funds to a CTV address through a separate transaction, which is designed to mitigate risks associated with direct deposits into CTV addresses. The process includes an interim step where the deposit first moves into a hot wallet, further safeguarding against potential errors or losses. The integration structure proposed for CTV vaults, denoted as `ctv(in_desc, out_desc)`, simplifies the implementation process by requiring minimal complex logic from wallets like Bitcoin Core. It addresses issues of potentially incorrect deposit amounts in CTV vaults by using a descriptor to index deposits and facilitate immediate movement of funds into the vault.

However, the adoption of CTV for daily wallets with a recovery mechanism presents practical challenges, particularly due to the complexities involved in knowing the preimage of the CTV hash beforehand and setting an appropriate lock time during wallet creation. These limitations highlight a mismatch between the desired functionality of user-friendly wallets and the capabilities offered by CTV. Despite these challenges, there remains potential under certain conditions, as outlined in discussions within the [Simple-CTV-Vault](https://github.com/jamesob/simple-ctv-vault) repository. Users would need to maintain backups of public keys, at least one private key, the specified block delay, and each deposit transaction ID to effectively utilize this design.

A key challenge identified in utilizing CTV in Bitcoin transactions revolves around the requirement to predetermine the amount to be spent, which must align with specific constraints. This aspect is counterintuitive to traditional practices where the transaction amount is decided first. The discussion on descriptors suggests that they need to represent more fixed-size, dynamically created "pots" tailored to specific transaction requirements. An unconventional proposal involves enhancing descriptors to incorporate the preimage of the CTV hash serialized within them to navigate these limitations.

The discourse on the integration and effectiveness of output descriptors in Bitcoin Core emphasizes the slow progress towards supporting enhancements like MuSig2. It reflects upon the complexities in evolving Bitcoin's infrastructure, suggesting that adopting new paradigms could delay the implementation of features such as working vaults significantly. Output descriptors are crucial as they contain all necessary information for spending an output, but thereâ€™s consideration for allowing some flexibility in retrieving information directly from the blockchain itself.

In discussing advancements in Bitcoin Improvement Proposals, particularly BIP380 descriptors, the conversation underscores the necessity of specifying amounts for each output explicitly in transaction outputs and scriptPubKey generation. Computational expressions like `total_in_amount_pct(50)` illustrate the sophistication in designing systems for secure and programmable financial transactions, leveraging descriptors for nuanced control over transaction outputs.

The debate on adapting descriptors in Bitcoin transactions centers on ensuring they encapsulate all necessary information for facilitating output spending. The challenge of integrating comprehensive data sets while maintaining flexibility to include BIP32 keys is highlighted. A proposed solution introduces a `ctv_tx` fragment within the descriptor language, aiming to represent transactions holistically. However, concerns about the complexity and practicality of this method prompt discussions on simplification efforts.

The modernization of vault constructions in cryptocurrency wallets points towards the use of ephemeral (dust) anchors and taproot script paths, as outlined in [BIP 341](https://github.com/bitcoin/bips/blob/dbb9617e5f2c3e99d2d07f0b82dbb4ad861ad06e/bip-0431.mediawiki). The integration of such technologies is deemed essential for enhancing wallet utility and security, aligning with existing frameworks or pioneering new ones to accommodate these innovations effectively.

Finally, the prioritization of `OP_CTV` ([BIP 119](https://github.com/bitcoin/bips/blob/dbb9617e5f2c3e99d2d07f0b82dbb4ad861ad06e/bip-0119.mediawiki)) over alternatives for enabling vaults in Bitcoin brings attention to the potential for more secure and efficient vault constructions. Challenges related to time and height locks necessitate periodic coin movement, but the proposed CTV-based vault solution aims to address these issues by allowing secure coin holding until release conditions are met. The discussion on vault designs emphasizes the ambition for greater security and usability in cryptocurrency storage, considering the technical and operational standards of current wallet software and infrastructure.</summary>
    <published>2025-06-20T01:50:09.128000+00:00</published>
  </entry>
</feed>

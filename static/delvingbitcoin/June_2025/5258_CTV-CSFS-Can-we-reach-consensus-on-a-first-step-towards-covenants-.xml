<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
  <updated>2025-07-01T05:00:26.137791+00:00</updated>
  <author>
    <name>instagibbs 2025-06-09 15:51:41.937000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
    <updated>2025-07-01T05:00:26.137816+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants/1509/75" rel="alternate"/>
    <summary>In discussing the upgradeability of bare legacy CTV (CheckTemplateVerify), it's highlighted that no additional output lengths for the "P2CTV" case will be defined, indicating a uniform approach without exception. The conversation touches upon the significance of 33-byte vectors (33vB) and their potential future relevance, contrasting with a less concerned view on the matter of limited byte allocation for hypothetical scenarios. This divergence in viewpoints underscores the nuanced debate surrounding resource efficiency versus practical utility within the community.

A unique aspect of bare CTV legacy scripts is mentioned, emphasizing their lack of associated addresses. This characteristic is seen as advantageous by some, due to the clarity it provides in differentiating usage expectations between bare CTV and other script forms. However, there's an acknowledgment of differing opinions regarding the expected prevalence of bare CTV usage compared to other scripted methods. The discourse suggests a belief that the majority of applications will favor using scripts that offer more explicit address associations.

The discussion further delves into the inherent risks and limitations faced by individuals utilizing script hash methodologies, reflecting on the notion that safeguarding these users may no longer be feasible. This resignation towards the vulnerabilities in "script hash land" hints at broader challenges within the cryptocurrency ecosystem, particularly concerning security and user protection.

An important shift in the proposal from its previous iterations is noted, with the addition of CSFS (Critical Security Feature Set). This change signifies a departure from prior strategies and introduces a call to eschew "sunk cost thinking." The emphasis on evolving the proposal reflects a proactive stance towards improving and adapting the project, underscoring the dynamic nature of development within the field.</summary>
    <published>2025-06-09T15:51:41.937000+00:00</published>
  </entry>
</feed>

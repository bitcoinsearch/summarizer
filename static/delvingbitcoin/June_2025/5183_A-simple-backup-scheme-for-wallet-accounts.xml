<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A simple backup scheme for wallet accounts</title>
  <updated>2025-07-01T05:05:43.779864+00:00</updated>
  <author>
    <name>sjors 2025-06-01 07:08:14.744000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A simple backup scheme for wallet accounts</title>
    <updated>2025-07-01T05:05:43.779894+00:00</updated>
    <link href="https://delvingbitcoin.org/t/a-simple-backup-scheme-for-wallet-accounts/1607/18" rel="alternate"/>
    <summary>The discussion delves into the complexities of integrating an interactivity requirement for matching T within a cryptographic context, particularly focusing on Bitcoin operations. The initial approach considered was one where a single party would handle the collection of xpubs, decide on the value of T, generate descriptors based on these parameters, and distribute them accordingly. However, this strategy encounters a significant drawback due to the incorporation of T as part of the key, which in turn affects the predictability and recoverability of xpubs.

A specific technical challenge arises from the way Bitcoin Core processes descriptors. It normalizes these descriptors to their last hardened derivation step. Consequently, when attempting to include T directly within a descriptor, the format simplifies to a normalized form that no longer explicitly contains T, thus undermining the original intent to make T a distinguishable element within the key structure. This normalization process effectively obscures the intended predictability of xpubs, rendering the scheme less effective.

Moreover, there's a notable limitation imposed by BIP32 regarding the size of numbers it can accommodate. Specifically, BIP32 is restricted to handling 31-bit numbers, with one bit reserved exclusively for the hardening flag. This constraint introduces a potential future compatibility issue, as the proposed scheme would exceed these limits by the year 2048. To mitigate this, a workaround is suggested whereby the timestamp could be divided by 3600, thereby reducing the numerical value to fit within BIP32's limitations while still achieving hourly precision. This adjustment aims to maintain the uniqueness of each instance without running afoul of the inherent numerical constraints of BIP32, ensuring a viable approach to avoiding duplicates within the system's operational framework.</summary>
    <published>2025-06-01T07:08:14.744000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Batched Splicing Considered Risky</title>
  <updated>2024-11-06T03:14:24.550021+00:00</updated>
  <author>
    <name>ZmnSCPxj 2023-11-08 17:58:01.698000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Batched Splicing Considered Risky</title>
    <updated>2024-11-06T03:14:24.550052+00:00</updated>
    <link href="https://delvingbitcoin.org/t/batched-splicing-considered-risky/170/4" rel="alternate"/>
    <summary>The existing splice design in Lightning Network transactions involves two sets of commitment transactions: one set for before the splice (pre-splice) and another set for after the splice (post-splice). This structure is adequate when dealing with the splicing of funds in a single channel. However, challenges arise when considering the simultaneous splicing of multiple channels within a single batched transaction. Such scenarios might include a node desiring to transfer funds out of one channel and into another.

A significant issue with the current design becomes apparent during theft attempts. Specifically, if an attacker publishes a revoked commitment transaction for one channel, it might block the confirmation of the splice transaction for all other involved channels. This potential vulnerability is exacerbated in situations where the cost of attempting theft is minimal or non-existent. For instance, channels that were opened with funds from only one party and have never facilitated incoming transactions for the attacker pose little to no risk for attempting theft. In these cases, the victim has a strong incentive to remove their funds from the compromised channel through splicing.

This overview highlights critical considerations for enhancing the security and functionality of splice transactions within the Lightning Network, especially when managing funds across multiple channels simultaneously. The need for a design that can accommodate the complexities of batched splice transactions without exposing users to increased risks of theft is evident.</summary>
    <published>2023-11-08T17:58:01.698000+00:00</published>
  </entry>
</feed>

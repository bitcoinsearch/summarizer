<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Batched Splicing Considered Risky</title>
  <updated>2024-11-06T03:13:25.732040+00:00</updated>
  <author>
    <name>ajtowns 2023-11-09 01:07:07.047000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Batched Splicing Considered Risky</title>
    <updated>2024-11-06T03:13:25.732071+00:00</updated>
    <link href="https://delvingbitcoin.org/t/batched-splicing-considered-risky/170/8" rel="alternate"/>
    <summary>The technical intricacies of batching a splice with a Just-In-Time (JIT) channel reveal the limitations and considerations necessary for such operations. The essence of the challenge lies in the nature of JIT channels, which are specifically designed to open in response to an HTLC (Hashed Time-Locked Contract) that needs to be forwarded. This dynamic complicates the process of funding a zero confirmation channel, particularly because it is advisable only to do so when all inputs are securely under one's control. This includes the careful handling of unconfirmed inputs, aside from one's own change, to mitigate any potential risks.

In scenarios where trust and Know Your Customer (KYC) protocols are established, there exists a workaround to the aforementioned limitation. This involves routing the HTLC payment into a custodial account first, rather than directly opening a channel. Subsequently, the channel can be opened from this custodial account. Such a mechanism offers a safeguard: should the splice attempt fail, the channel opening is aborted, allowing the funds to revert to the custodial account instead of becoming stuck within the channel. This approach underscores the importance of control and the ability to manage funds effectively in the context of channel operations and HTLC transactions.</summary>
    <published>2023-11-09T01:07:07.047000+00:00</published>
  </entry>
</feed>

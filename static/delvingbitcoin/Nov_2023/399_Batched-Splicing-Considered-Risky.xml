<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Batched Splicing Considered Risky</title>
  <updated>2024-11-06T03:12:47.928252+00:00</updated>
  <author>
    <name>t-bast 2023-11-14 08:23:01.648000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Batched Splicing Considered Risky</title>
    <updated>2024-11-06T03:12:47.928291+00:00</updated>
    <link href="https://delvingbitcoin.org/t/batched-splicing-considered-risky/170/12" rel="alternate"/>
    <summary>In the realm of current implementations by cln and eclair, there's an inherent necessity to monitor for double-spending due to the potential addition of inputs by peers that are outside one's control. This process becomes crucial when considering the dynamics of unconfirmed splice transactions within a channel. Specifically, when such a transaction is double spent by an unrelated transaction not aimed at splicing for that channel, it introduces a scenario where the existing systems lack a formal mechanism for its removal from the pending splice transaction list. However, this perceived limitation is argued against on the grounds of unnecessary complexity. 

The stance taken suggests a different approach where the splice transaction, despite being double spent, remains within the list of pending splice transactions. The proposal advocates for sending a `commit_sig` for the affected transaction whenever the channel is utilized. This method is highlighted as having minimal overhead, offering a streamlined solution to the issue at hand. Furthermore, it assures an automatic cleanup of the splice transaction once another splice transaction successfully confirms. This approach simplifies the operational framework while effectively addressing the challenge posed by double spends in the context of unconfirmed splice transactions.</summary>
    <published>2023-11-14T08:23:01.648000+00:00</published>
  </entry>
</feed>

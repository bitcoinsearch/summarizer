<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Contract-level Relative Timelocks (or, let's talk about ancestry proofs and singletons)</title>
  <updated>2025-01-22T02:19:10.440031+00:00</updated>
  <author>
    <name>JeremyRubin 2025-01-03 17:32:57.946000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Contract-level Relative Timelocks (or, let's talk about ancestry proofs and singletons)</title>
    <updated>2025-01-22T02:19:10.440064+00:00</updated>
    <link href="https://delvingbitcoin.org/t/contract-level-relative-timelocks-or-lets-talk-about-ancestry-proofs-and-singletons/1353/3" rel="alternate"/>
    <summary>The discussion centers on the operational dynamics of MUON, a protocol that ensures transaction updates are securely managed and non-malleable. The mechanism involves creating a transaction (Tx) setup that includes opening transactions, kickoff transactions, updates, ratcheting, and an exit strategy, underpinned by cryptographic proofs to ensure integrity and security at each step.

Initially, a transaction is opened (Tx Open) with specific inputs and outputs, where outputs define the value in satoshis and assign a program using a multi-signature scheme and a conditional transaction hash. This step sets the stage for subsequent transactions and updates within the protocol.

Following the Tx Open, a Tx Kickoff occurs, which essentially initializes the update process without transferring any satoshis but setting up the necessary conditions for updates (V_K) through another multi-signature scheme without additional conditions.

Updates within this system (Tx Update[i]) are structured to occur at defined intervals (e.g., every two weeks), involving inputs from the previous state (V_K) and producing new outputs that adjust the distribution of satoshis between parties involved (Alice and Bob in this case) based on predefined conditions. These updates leverage MUON X_i to ensure that a spend must exit, adhering to the integrity requirements set by the protocol.

The ratchet mechanism (Tx Ratchet i) provides a method to sequentially update the state (R[i] to R[i+1]) with time-locked conditions, ensuring that each state progresses securely before moving on to the next. This step is critical for maintaining the chain of updates securely and verifiably.

Finally, the exit strategy (Tx Exit) defines how the transaction concludes, detailing the minimum time between the last update and the exit, along with the conditions under which the final outputs are determined. This includes the technical specifics of how the MUON X_i programs are structured to ensure secure and verifiable completion of the transaction sequence.

An essential aspect of this whole process is the need for recursive proof within R, highlighting the complexity and security measures implemented to ensure that each transaction update cannot be broadcast without the correct preceding conditions being met. This approach prevents the malleability of transaction updates, securing the integrity of the transaction chain from initiation to conclusion.

For further details on the interplay of these components within the MUON protocol, refer to Jeremy Rubin's discussion [here](https://x.com/JeremyRubin/status/1782220444185116883).</summary>
    <published>2025-01-03T17:32:57.946000+00:00</published>
  </entry>
</feed>

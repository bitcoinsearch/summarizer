<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Stats on compact block reconstructions</title>
  <updated>2025-01-21T02:15:38.305783+00:00</updated>
  <author>
    <name>0xB10C 2025-01-20 10:51:08.698000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Stats on compact block reconstructions</title>
    <updated>2025-01-21T02:15:38.305816+00:00</updated>
    <link href="https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052/8" rel="alternate"/>
    <summary>In an effort to enhance the understanding and functionality of Bitcoin nodes, a programmer has been testing a specific patch available at [GitHub](https://github.com/0xB10C/bitcoin/commit/90181a45651fdebc7cc5dc5262416f0f83fa4c48). This patch's impact on node behavior is under scrutiny, particularly regarding transaction handling. The programmer provided logs as evidence, which can be explored through this [link](https://gist.github.com/0xB10C/bc24f1406443faf92fe30efd16555327), highlighting the need for a method to discern why certain transactions are not recognized by the node either initially or after some time.

The analysis focuses on several potential reasons for these discrepancies. It takes into account factors such as the fee rate, suggesting that transactions with low fee rates might be evicted from the node's memory. The age of transactions is also considered, pondering whether older transactions could expire and thus be forgotten by the node. Moreover, the investigation looks into the standardness of transactions, contemplating whether non-standard transactions are less likely to be retained. Additionally, there's an exploration to determine if the transaction IDs appear elsewhere in the logs, pointing towards a systematic approach to track down the root cause of the issue.

Among the findings, it was observed that many of the unacknowledged transactions seemed to be orphaned, indicating they were not present in the `vExtraTxnForCompact` storage within the node software anymore. To address these insights, two main strategies are proposed. First, the idea of running a node with an increased `-blockreconstructionextratxn` setting beyond the default value of 100 transactions is suggested. This adjustment could potentially improve the nodeâ€™s ability to recall transactions. Second, there is a recommendation to search for these transactions within the orphan pool as well, which could offer another avenue to recover transactions that the node has failed to acknowledge.

This comprehensive approach underscores a methodical examination of node behavior concerning transaction management, offering pathways to bolster the reliability and efficiency of Bitcoin nodes through targeted adjustments and further research into their operational dynamics.</summary>
    <published>2025-01-20T10:51:08.698000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Contract-level Relative Timelocks (or, let's talk about ancestry proofs and singletons)</title>
  <updated>2025-01-14T02:16:23.377424+00:00</updated>
  <author>
    <name>cguida 2025-01-13 19:43:52.616000+00:00</name>
  </author>
  <author>
    <name>cguida 2025-01-13 19:42:38.780000+00:00</name>
  </author>
  <author>
    <name>instagibbs 2025-01-13 19:38:04.683000+00:00</name>
  </author>
  <author>
    <name>cguida 2025-01-13 19:35:32.453000+00:00</name>
  </author>
  <author>
    <name>reardencode  . 2025-01-06 15:18:45.813000+00:00</name>
  </author>
  <author>
    <name>rijndael  . 2025-01-06 14:40:49.671000+00:00</name>
  </author>
  <author>
    <name>instagibbs  . 2025-01-06 13:48:25.298000+00:00</name>
  </author>
  <author>
    <name>ajtowns  . 2025-01-06 06:55:17.757000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2025/4051_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/4050_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/4049_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/4048_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/3982_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/3979_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/3978_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/3972_Contract-level-Relative-Timelocks-or-let-s-talk-about-ancestry-proofs-and-singletons-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Contract-level Relative Timelocks (or, let's talk about ancestry proofs and singletons)</title>
    <updated>2025-01-14T02:16:23.377491+00:00</updated>
    <link href="https://delvingbitcoin.org/t/contract-level-relative-timelocks-or-lets-talk-about-ancestry-proofs-and-singletons/1353/9" rel="alternate"/>
    <summary>Ademan's proposal introduces a novel solution for multi-party penalty-optional rebindable channels, aiming to enhance the efficiency of channel updates. This method caps the number of updates to the total number of participants in the channel, allowing each update to be uniquely identified by its sequence, thereby potentially reducing settlement delays. Specifically, in the case of 2-party channels, this design could lead to a significant reduction in the number of settlement delays HTLCs need to endure, streamlining the transaction process and enhancing operational efficiency in environments requiring fast and frequent transactions.

The combination of the Schnorr trick with the CAT operation in Bitcoin scripting emerges as an advanced method for executing complex contracts on the blockchain. This technique enables pushing crucial transaction elements onto the stack, facilitating the creation of state machines within contracts that validate state transitions through tapleafs. An important application includes enforcing funds to always return to the same Taproot address by matching input and output scriptpubkeys. Furthermore, the "state caboose" concept allows for passing state between transactions by embedding a state commitment in a transaction's output and verifying it in a subsequent transaction, thus ensuring continuity and integrity of state across transactions. This approach, exemplified in the development of a vault prototype, offers a robust framework for contract validation and management by enabling constant-sized inductive proofs of validity.

The utilization of a singleton, akin to an NFT, for representing contract identity is discussed as a means to achieve constant size proof of ancestry, facilitating recursive bounded introspection. This method requires every update transaction to include introspection logic, thus shifting the overhead to the submitter rather than the honest participant during settlement. The suggested practical construction involves a 1-in/2-out transaction design where the first output contains the singleton and the second leads to a pay-to-anchor address, allowing the spender to use the singleton effectively.

Challenges associated with reading inside a transaction ID (txid) are highlighted, given the complexity of parsing the transaction without witness information to extract specific data points. An innovative approach to circumvent these challenges is proposed through a structured 1-input/2-output transaction design, facilitating effective utilization of the singleton and potentially simplifying the management and execution of contracts within the blockchain.</summary>
    <published>2025-01-13T19:43:52.616000+00:00</published>
  </entry>
</feed>

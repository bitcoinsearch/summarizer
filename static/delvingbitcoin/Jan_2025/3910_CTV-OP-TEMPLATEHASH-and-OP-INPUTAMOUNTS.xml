<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
  <updated>2025-01-02T02:18:18.334195+00:00</updated>
  <author>
    <name>harding 2025-01-01 02:39:58.581000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
    <updated>2025-01-02T02:18:18.334227+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-op-templatehash-and-op-inputamounts/1344/6" rel="alternate"/>
    <summary>The discussion highlights the risks associated with implementing arithmetic operations for a confined range of values in wallet development. One primary concern is the ergonomic challenge it poses, requiring developers to write additional code to prevent overflows, which can be cumbersome and prone to errors. More critically, it points out the potential security vulnerabilities such as the risk of funds being stolen through [fee siphoning](https://diyhpl.us/~bryan/irc/bitcoin/bitcoin-dev/linuxfoundation-pipermail/lightning-dev/2020-September/002796.txt) attacks or the accidental destruction of money due to improper handling of overflow conditions. The narrative suggests a cautious approach towards the inclusion of these opcodes, advocating for a design that either completely avoids arithmetic operations or ensures compatibility with enhancements like a 64-bit operator soft fork, aimed at bolstering security and operational reliability. This perspective underscores the importance of careful design and implementation strategies in the development of wallet technologies to mitigate risks and enhance user safety.</summary>
    <published>2025-01-01T02:39:58.581000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Contract-level Relative Timelocks</title>
  <updated>2025-01-05T02:27:18.987635+00:00</updated>
  <author>
    <name>instagibbs 2025-01-04 20:43:29.758000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Contract-level Relative Timelocks</title>
    <updated>2025-01-05T02:27:18.987659+00:00</updated>
    <link href="https://delvingbitcoin.org/t/contract-level-relative-timelocks/1353/6" rel="alternate"/>
    <summary>The core issue addressed by the CLRT protocol revolves around reducing the duration liquidity remains locked within protocols. This is particularly relevant in scenarios where delays exceed the expected timeframe, primarily due to parties publishing outdated states intentionally. The example cited illustrates a situation where Alice and Bob are engaged in a transaction that becomes complicated due to non-cooperation from Bob. Despite Alice updating the channel with a new state and sending Bob the corresponding signature, Bob's failure to reciprocate forces Alice to initiate the transaction with an older state. This triggers a sequence where two separate `shared_delay` periods must elapse before resolution, contrasting sharply with the intended single `shared_delay` period facilitated by the CLRT for similar situations in ln-symmetry.

Moreover, the discussion highlights a critical vulnerability inherent to the CLRT mechanism, which does not effectively mitigate the risk but potentially escalates it. The necessity to choose a `shared_delay` as a security measure against liveliness threats underscores the precarious balance between operational efficiency and security. In cases where an adversary successfully outbids during these `shared_delay` periods, the threat of HTLC (Hashed Time-Locked Contract) theft looms, indicating that the selection of `shared_delay` is pivotal for safeguarding funds against such vulnerabilities.

Furthermore, the conversation opens up possibilities for future enhancements, such as modifications to the eltoo protocol that could limit the number of updates, thereby introducing another layer of security and efficiency. Despite these discussions, the practical application of CLRT remains a work in progress. The mention of CLRT as a modular piece suggests its potential versatility across various contexts, underscoring the ongoing exploration into its capabilities and limitations. This dialogue emphasizes the dynamic nature of blockchain technology and the continuous search for optimizations that can reconcile the dual objectives of speed and security in digital transactions.</summary>
    <published>2025-01-04T20:43:29.758000+00:00</published>
  </entry>
</feed>

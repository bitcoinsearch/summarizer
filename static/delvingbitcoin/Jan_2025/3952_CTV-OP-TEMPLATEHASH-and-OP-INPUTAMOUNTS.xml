<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
  <updated>2025-01-04T02:20:48.934099+00:00</updated>
  <author>
    <name>cguida 2025-01-03 21:44:28.589000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
    <updated>2025-01-04T02:20:48.934132+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-op-templatehash-and-op-inputamounts/1344/11" rel="alternate"/>
    <summary>The discussion raises concerns about the extent to which Bitcoin should allow for expressive scripting capabilities, drawing a comparison with Ethereum's approach to maximally expressive contracts. It suggests that while enhancing expressiveness can be beneficial, there is a need for caution to avoid introducing complexities and vulnerabilities similar to those observed in Ethereum. The argument against making Bitcoin script Turing complete highlights a desire to maintain certain boundaries to ensure the stability and security of Bitcoin. Establishing clear guidelines on what constitutes acceptable enhancements is deemed crucial to advancing Bitcoin's scripting capabilities responsibly. The goal, as outlined, is to push the boundaries of script expressiveness to their limits without compromising the core principles that underpin Bitcoin's integrity and reliability. This approach aims to strike a balance between innovation and preservation, ensuring that any new features contribute positively to Bitcoin's ecosystem.</summary>
    <published>2025-01-03T21:44:28.589000+00:00</published>
  </entry>
</feed>

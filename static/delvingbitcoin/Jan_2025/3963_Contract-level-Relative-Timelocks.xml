<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Contract-level Relative Timelocks</title>
  <updated>2025-01-05T02:27:27.070921+00:00</updated>
  <author>
    <name>moonsettler 2025-01-04 19:45:53.869000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Contract-level Relative Timelocks</title>
    <updated>2025-01-05T02:27:27.070946+00:00</updated>
    <link href="https://delvingbitcoin.org/t/contract-level-relative-timelocks/1353/5" rel="alternate"/>
    <summary>In the discussion of transaction processing and security within blockchain systems, a notable concern arises when considering the submission of states by different participants. The scenario presented involves two parties: Mallory and Alice. Mallory attempts to exploit the system by submitting an older state, while Alice submits the newest state available in the mempool. However, this process is complicated by Mallory's ability to outbid Alice's submission by using any previously submitted states. This strategy highlights a vulnerability in the current transaction processing mechanism, particularly when relying on a TXID (Transaction ID) dependent fee payment system. In such a system, Alice is forced to re-sign her transaction each time Mallory outbids her, even though her rebindable signatures remain valid. Unfortunately, this results in Alice's transactions being ejected from the mempool.

The discussion further touches on the concept of CLRT (Commitment-Ledger Relative Time), which was initially thought to mitigate such issues. However, it appears that CLRT may not effectively address the problem at hand and might even exacerbate the situation. The crux of the issue lies in the inherent vulnerabilities of the transaction processing system when faced with strategic submissions of previous states by malicious actors. This scenario underscores the need for a more robust mechanism that can safeguard against such exploits without placing undue burden on honest participants like Alice.</summary>
    <published>2025-01-04T19:45:53.869000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Pruning non-transaction data instead of pruning whole blocks?</title>
  <updated>2025-01-15T02:16:24.489546+00:00</updated>
  <author>
    <name>sjors 2025-01-14 13:37:09.603000+00:00</name>
  </author>
  <author>
    <name>cooltexture 2025-01-14 10:43:44.829000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2025/4055_Pruning-non-transaction-data-instead-of-pruning-whole-blocks-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/4054_Pruning-non-transaction-data-instead-of-pruning-whole-blocks-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Pruning non-transaction data instead of pruning whole blocks?</title>
    <updated>2025-01-15T02:16:24.489588+00:00</updated>
    <link href="https://delvingbitcoin.org/t/pruning-non-transaction-data-instead-of-pruning-whole-blocks/1385" rel="alternate"/>
    <summary>Fragmentation issues arise when parts of a block are removed, diminishing the utility of keeping incomplete blocks due to their incompatibility with peer serving. However, blocks devoid of witness data present an exception, offering potential utility as highlighted by a proposed implementation in a [GitHub pull request](https://github.com/bitcoin/bitcoin/pull/27050). The issue of undesirable content being embedded within the non-witness parts of a block is significant. Applications such as Counterparty and STAMPS have been known to utilize bare multisig `scriptPubKey` for embedding data, which remains on users' hard drives due to its inclusion in the UTXO set stored in the `chainstate` directory. Even with pruning, these outputs may persist indefinitely unless projects like Utreexo are employed to explicitly remove them.

The current pruning functionality in bitcoind, which eliminates block data preceding a specified block height while retaining headers, does not address the storage of non-transaction data, including unspendable outputs and arbitrary data insertions. The suggestion for a new pruning mode aims to exclude such non-transaction data, potentially reclaiming significant storage space from protocols that heavily utilize block space, like ordinals. This approach raises questions about its implications for data storage efficiency and the operational characteristics compared to traditional pruned nodes or Simplified Payment Verification (SPV) clients. 

Given the capacity for blockchain technology to store any form of data, including potentially objectionable content, a refined pruning mechanism offers a solution for node operators who prefer not to retain certain types of information. By selectively removing data unrelated to transactions, node operators could better manage their storage resources while mitigating concerns over hosting undesirable content.</summary>
    <published>2025-01-14T13:37:09.603000+00:00</published>
  </entry>
</feed>

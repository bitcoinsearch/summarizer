<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Contract-level Relative Timelocks</title>
  <updated>2025-01-03T02:23:19.025943+00:00</updated>
  <author>
    <name>instagibbs 2025-01-02 19:35:31.228000+00:00</name>
  </author>
  <author>
    <name>instagibbs 2025-01-02 19:30:47.726000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2025/3919_Contract-level-Relative-Timelocks.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/3924_Contract-level-Relative-Timelocks.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Contract-level Relative Timelocks</title>
    <updated>2025-01-03T02:23:19.025982+00:00</updated>
    <link href="https://delvingbitcoin.org/t/contract-level-relative-timelocks/1353/2" rel="alternate"/>
    <summary>The discourse on enhancing the efficiency and reliability of Eltoo, a protocol for Bitcoin's Lightning Network, centers around addressing the complication introduced by the resetting of relative timelocks with each update transaction. This reset not only prolongs the lockup of funds but also extends the expiry of Hashed Time-Locked Contracts (HTLCs), adversely affecting network utility. A novel solution proposed involves the use of a Contract-Level Relative Timelock (CLRT) UTXO that remains static until the challenge period concludes. This approach mandates that the contract state output and the relative timelock output be spent together, effectively preventing the reset issue.

In an extension to the Eltoo protocol, a new transaction type termed as "kickoff" is introduced. This transaction incorporates an additional CLRT output that commits to a relative delay for the challenge period before settlement can occur. The CLRT output, being of minimal value, is designed to be spent concurrently with an Eltoo state output. To facilitate this, a recursive proof mechanism is suggested, linking back to the kickoff transaction's state output, ensuring mutual spending of both outputs as a prerequisite for settlement.

The proposal also briefly discusses the implications of TXID stability on this setup. With stable transaction IDs, the process simplifies significantly, allowing the CLRT output to serve as a connector that can be reattached through consensus signatures from channel participants. However, in the absence of TXID stability, a more complex proof system is required to establish the connection between transactions within the update chain, raising issues related to proof construction and potential consensus changes.

An alternative perspective is provided through John Law's payment channel constructions, which utilize two separate relative timelocks with TXID stability to manage different aspects of channel operations. This method offers a simpler solution by segregating timeouts for revocation and HTLC purposes, ensuring neither timelock resets the other, thereby maintaining operational integrity without the complexities introduced by unstable transaction IDs.

The blog post incorporates insights from a discussion on the [Delving into Bitcoin forum](https://delvingbitcoin.org/t/contract-level-relative-timelocks/1353) and references John Law's work on [LN-hierarchical channels](https://github.com/JohnLaw2/ln-hierarchical-channels), highlighting both the challenges and innovative solutions proposed for evolving the Lightning Network's functionality through improved timelock mechanisms.</summary>
    <published>2025-01-02T19:35:31.228000+00:00</published>
  </entry>
</feed>

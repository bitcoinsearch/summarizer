<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Stats on compact block reconstructions</title>
  <updated>2025-01-24T02:16:35.563931+00:00</updated>
  <author>
    <name>jungly 2025-01-23 08:49:12.690000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Stats on compact block reconstructions</title>
    <updated>2025-01-24T02:16:35.563964+00:00</updated>
    <link href="https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052/10" rel="alternate"/>
    <summary>The discussion revolves around the innovative approach of not deleting transactions from the pool of received transactions, which is a significant departure from traditional practices. Instead, the proposition involves backing the mempool with a database store, allowing for transactions that are pushed out by those with higher fees to be stored on disk or in a database rather than being deleted. This method offers a potential solution to improve transaction handling and accessibility by storing ejected transactions for later retrieval directly from the database, eliminating the need for fetching them from peers.

This approach draws inspiration from the libbitcoin system, which notably does not delete any received transactions. Libbitcoin maintains a single transactions table that includes all received transactions, whether they are spent or unspent, thereby facilitating the construction of new blocks with unspent transactions without the need to delete them. This methodology contrasts with the current practice in Core, where managing transactions involves deleting them from the mempool once they are spent, a process that incurs a performance penalty.

Considering the implementation of this system requires addressing how to handle spent transactions in the mempool backup store effectively. The challenge lies in developing a mechanism to delete transactions once they are spent to maintain system efficiency. Furthermore, the proposal acknowledges the necessity of implementing robust defenses against spam transactions, similar to those currently employed to protect the mempool. By adopting such measures, the system can safeguard against spam while accommodating the proposed changes in transaction management.</summary>
    <published>2025-01-23T08:49:12.690000+00:00</published>
  </entry>
</feed>

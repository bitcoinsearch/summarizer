<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Contract-level Relative Timelocks (or, let's talk about ancestry proofs and singletons)</title>
  <updated>2025-01-15T02:15:35.027422+00:00</updated>
  <author>
    <name>ademan 2025-01-14 14:38:30.196000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Contract-level Relative Timelocks (or, let's talk about ancestry proofs and singletons)</title>
    <updated>2025-01-15T02:15:35.027458+00:00</updated>
    <link href="https://delvingbitcoin.org/t/contract-level-relative-timelocks-or-lets-talk-about-ancestry-proofs-and-singletons/1353/17" rel="alternate"/>
    <summary>The discussion focuses on the potential for immediate settlement in an @ademan channel, specifically concerning the last allowed update. It is pointed out that the format for this final update currently aligns with those preceding it. However, there's a suggestion to integrate the settlement transaction directly into this last update for efficiency. This approach, especially noted for scenarios where N=2, bears a resemblance to Daric, suggesting that this similarity may not be coincidental. The strategy under consideration could optimize the process by reducing the delay to `(N - 1) * shared_delay`, acknowledging that each party must still have the opportunity to make an update in the worst-case scenario. This implies a significant improvement in the settlement times within the channel by streamlining the final steps of the transaction process.</summary>
    <published>2025-01-14T14:38:30.196000+00:00</published>
  </entry>
</feed>

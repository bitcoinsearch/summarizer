<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Stats on compact block reconstructions</title>
  <updated>2025-01-20T02:17:31.039989+00:00</updated>
  <author>
    <name>ismaelsadeeq 2025-01-19 15:21:50.002000+00:00</name>
  </author>
  <author>
    <name>sipa 2025-01-19 13:26:01.385000+00:00</name>
  </author>
  <author>
    <name>0xB10C 2025-01-19 11:03:42.929000+00:00</name>
  </author>
  <author>
    <name>xBC  . 2024-08-08 10:17:20.354000+00:00</name>
  </author>
  <author>
    <name>CryptiQ  . 2024-08-06 13:41:52.443000+00:00</name>
  </author>
  <author>
    <name>xBC  . 2024-08-04 15:45:21.037000+00:00</name>
  </author>
  <author>
    <name>xBC  . 2024-08-02 12:08:52.409000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2025/4078_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/4077_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2025/4076_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2024/2928_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2024/2920_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2024/2913_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2024/2911_Stats-on-compact-block-reconstructions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Stats on compact block reconstructions</title>
    <updated>2025-01-20T02:17:31.040052+00:00</updated>
    <link href="https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052" rel="alternate"/>
    <summary>The discussion delves into the intricacies of Bitcoin Core's compact block reconstruction capability, emphasizing the critical role of the extra transactions pool designed to enhance this process. It is noted that within Bitcoin Core documentation, particularly under command line options, the `-blockreconstructionextratxn` parameter is highlighted. This parameter dictates the number of additional transactions retained in memory to facilitate the reconstruction of compact blocks, with a default setting of 100 transactions. This feature underscores a methodical approach to improving blockchain efficiency and reliability through internal mechanisms, distinct from variations in mempool sizes across nodes, which may impact network performance differently.

The conversation further explores the significance of understanding how "extra pool sizes" influence block reconstruction, along with the complexities involved in estimating a peer's pool size by tracking their `feefilter`. Despite the challenges posed by calculation methods and privacy concerns, these insights are crucial for managing blockchain network interactions and optimizing transaction processing. The effectiveness of the `feefilter` is discussed, considering factors like its half-life, differences in memory usage by various mempool maps, and intentional rounding for user privacy.

An analysis into compact block reconstructions reveals a distinction between low-bandwidth and high-bandwidth modes, noting that the former typically requires more frequent requests for additional transaction information. High-bandwidth mode, accounting for approximately 75% of compact block deliveries, suggests a more efficient block reconstruction process, as it involves preemptive sending of a `cmpctblock` message before block validation. Interestingly, almost all compact blocks come pre-filled only with the coinbase transaction, indicating potential optimization areas, especially for low-bandwidth mode to reduce the need for additional transaction requests. Despite existing optimizations, a [TODO in the Bitcoin Core codebase](https://github.com/bitcoin/bitcoin/blob/2aff9a36c352640a263e8b5de469710f7e80eb54/src/blockencodings.cppL24-L25) hints at unimplemented improvements, which could further streamline low-bandwidth compact block delivery and reconstruction.

Further examination of block reconstruction statistics, using `debug=cmpctblock` logging, presents an analysis of block reconstructions' efficiency on the Bitcoin network. This includes assessing the necessity for additional `getblocktxn` -&gt; `blocktxn` round-trips during the reconstruction process due to missing transactions. Various node configurations were observed, including adjustments made to improve performance or adjust transaction handling policies, such as increasing maximum connections or adopting `mempoolfullrbf=1`. These changes impacted the rate of compact block reconstructions requiring no additional transaction requests, especially during periods of heightened mempool activity. It was noted that enabling `mempoolfullrbf` by default could potentially expedite block propagation times across the network. Additionally, the exploration raises questions about the effects of different extra pool sizes on reconstruction efficiency and the potential for further optimizations to enhance block reconstruction processes network-wide.</summary>
    <published>2025-01-19T15:21:50.002000+00:00</published>
  </entry>
</feed>

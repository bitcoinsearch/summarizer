<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
  <updated>2025-01-01T02:26:22.430844+00:00</updated>
  <author>
    <name>moonsettler 2025-01-01 00:19:49.539000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
    <updated>2025-01-01T02:26:22.430875+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-op-templatehash-and-op-inputamounts/1344/5" rel="alternate"/>
    <summary>The discussion revolves around the operational functionality and design decisions concerning `OP_INPUTAMOUNTS` and `OP_TEMPLATEHASH`. Specifically, `OP_INPUTAMOUNTS` has the capability to return values up to the total supply cap. There is a choice to be made regarding whether this operation should execute in a compact form or if it should always employ 64 bits padded with zeros. Opting for a compact form would facilitate arithmetic operations on amounts smaller than 42 BTC within transaction sizes, an aspect that might be appealing to some while possibly being less favorable to others due to varying preferences and needs.

Furthermore, the `OP_TEMPLATEHASH` operation is designed to accept amounts up to 64 bits and is generally accommodating towards all numeric inputs presented in a compact integer format. This inclusivity towards numerical inputs underscores a flexible approach towards handling various types of data, potentially enhancing the operation's utility and applicability across different scenarios.</summary>
    <published>2025-01-01T00:19:49.539000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Pluggable Channel Factories</title>
  <updated>2024-12-03T02:39:29.671460+00:00</updated>
  <author>
    <name>ZmnSCPxj 2024-12-02 16:11:13.963000+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj  . 2024-11-14 15:04:03.807000+00:00</name>
  </author>
  <author>
    <name>renepickhardt  . 2024-11-14 12:45:29.445000+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj  . 2024-11-11 16:24:40.356000+00:00</name>
  </author>
  <link href="delvingbitcoin/Dec_2024/3676_Pluggable-Channel-Factories.xml" rel="alternate"/>
  <link href="delvingbitcoin/Nov_2024/3515_Pluggable-Channel-Factories.xml" rel="alternate"/>
  <link href="delvingbitcoin/Nov_2024/3514_Pluggable-Channel-Factories.xml" rel="alternate"/>
  <link href="delvingbitcoin/Nov_2024/3507_Pluggable-Channel-Factories.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Pluggable Channel Factories</title>
    <updated>2024-12-03T02:39:29.671508+00:00</updated>
    <link href="https://delvingbitcoin.org/t/pluggable-channel-factories/1252/4" rel="alternate"/>
    <summary>The discussion centers around the critical need for plugin software within the Lightning Network to independently monitor unilateral exits from channel factories on the blockchain. This requirement stems from the fact that even if the factory layer closes and channels are published directly on-chain, they can still operate independently. While the base node software continues to observe the blockchain for activity related to these channels, ensuring a smooth transition from a factory setting to direct on-chain presence, there are certain conditions under which closing a factory could also terminate the hosted channels. For example, scenarios like a SuperScalar instance timing out necessitate communication between the factory plugin and the base node software to disregard the affected in-factory channel. Additionally, the conversation revisits a previous proposal that aimed at improving nodes' gossip about channels by linking gossip capabilities to proof of shared control over on-chain funds, addressing the Bitcoin blockchain's UTXO set limitations on network expansion. The dialogue suggests foundational changes to gossip protocols before tackling the complexities of factory-hosted channels are needed.

Furthermore, an innovative concept named "sidepools" is introduced, proposing a hybrid model that combines direct on-chain N=2 mechanisms with off-chain N&gt;2 mechanisms. This approach aims to capitalize on the strengths of both systems, maintaining the simplicity of direct on-chain channels while enhancing liquidity management through more sophisticated off-chain mechanisms. Sidepools could facilitate more efficient liquidity use, allowing for just-in-time rebalancing to optimize channel capacity utilization without requiring modifications to the existing gossip protocol. This strategy represents a concerted effort to address the scalability and efficiency challenges of channel management within the Lightning Network by leveraging the Bitcoin UTXO set.

Exploring the potential of channel factories in addressing the challenges faced by Lightning Service Providers (LSPs) reveals a keen interest in adopting them as a practical solution. Channel factories, especially when combined with mechanisms like the SuperScalar proposal VTXOs in Ark, offer a promising approach to funding transactions for channels. However, the technical complexities of channel factories present visibility and operability challenges within the network. The current guidelines in [BOLT7](https://github.com/lightning/bolts/blob/aa5207aeaa32d841353dd2df3ce725a4046d528d/07-routing-gossip.md) indicate that channels within a factory are not observable on the blockchain, complicating their announcement and monitoring. This highlights the need for adjustments or extensions to BOLT7 to effectively accommodate channel factories. Further investigation into this area suggests that integrating channel factories into the network's routing nodes through a dedicated API could significantly improve the Lightning Network's liquidity management and payment facilitation capabilities.

Lastly, the concept of "pluggable channel factories" is proposed to increase the Lightning Network's flexibility by enabling offchain hosting of channels through various designs, including the SuperScalar model. This integration would be compatible with existing Lightning Network node software, supporting plugins or extensions while adhering to the BOLT specification for channel state management and payment forwarding. The proposal also underscores the necessity of adapting code for channel state management to account for the operational changes brought about by channel factories. Drawing parallels with the challenges of channel splicing, it suggests leveraging techniques from the splicing process to ensure the integrity and functionality of channels hosted by factories, highlighting the dynamic nature of channel factories and the importance of maintaining efficient operation despite these complexities.</summary>
    <published>2024-12-02T16:11:13.963000+00:00</published>
  </entry>
</feed>

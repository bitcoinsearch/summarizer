<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Unspendable keys in descriptors</title>
  <updated>2024-12-04T02:35:58.253751+00:00</updated>
  <author>
    <name>andrewtoth 2024-12-03 03:33:40.002000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Unspendable keys in descriptors</title>
    <updated>2024-12-04T02:35:58.253792+00:00</updated>
    <link href="https://delvingbitcoin.org/t/unspendable-keys-in-descriptors/304/28" rel="alternate"/>
    <summary>The discussion revolves around the standardization requirements for wallet policies, particularly in handling taproot addresses and the associated public keys (`pubkeys`). The challenge mentioned involves wallet policies that may list the same `@i` multiple times. To address this issue, a method of sorting and removing duplicate extended public keys (xpubs) before concatenating them and applying a SHA256 hash is suggested as the simplest implementation strategy. This approach necessitates a restriction where all xpubs adhere to the specific format `xpub/&lt;0;1&gt;/*`, explicitly excluding the use of [optional derivation paths](https://github.com/bitcoin/bips/blob/532c4c10f2e04b3dca7d39ce1b1a4bdbf0c88e52/bip-0388.mediawiki). The rationale behind this limitation is to streamline the process, considering that legacy wallets, which might require such optional paths, would unlikely support taproot features. This proposal aims at creating a uniform standard for internal xpubs across descriptors and wallet policies by eliminating redundancies, thereby facilitating a more efficient and simplified system for managing public keys within wallet software.</summary>
    <published>2024-12-03T03:33:40.002000+00:00</published>
  </entry>
</feed>

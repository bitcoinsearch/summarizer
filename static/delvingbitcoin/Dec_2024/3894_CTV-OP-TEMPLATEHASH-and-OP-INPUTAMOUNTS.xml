<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
  <updated>2024-12-31T02:19:20.413819+00:00</updated>
  <author>
    <name>moonsettler 2024-12-30 12:34:21.017000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS</title>
    <updated>2024-12-31T02:19:20.413848+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-op-templatehash-and-op-inputamounts/1344" rel="alternate"/>
    <summary>Developers have faced significant challenges when working with `CTV`, particularly in relation to Vaults, leading to the creation of `OP_TX` and `OP_TXHASH/VERIFY` as solutions to specific issues. These solutions, however, introduce complexities such as the reliance on 64-bit integer arithmetic for handling amounts. In an effort to offer alternative approaches that avoid state-carrying covenants or extensive introspection while still providing functional benefits, a new method leveraging a specialized hash function has been proposed to enhance amount flexibility within `CTV`. This method does not require the addition of new template types in the style of `TXHASH`, thereby sidestepping the associated advantages and disadvantages.

The proposal introduces two additional opcodes to augment `OP_CHECKTEMPLATEVERIFY`: `OP_TEMPLATEHASH` and `OP_INPUTAMOUNTS`. The `OP_TEMPLATEHASH` opcode generates a `CTV` template hash from stack items, iterating through inputs and outputs. On the other hand, `OP_INPUTAMOUNTS`, which is exclusive to Taproot, calculates the sum of input amounts based on a provided parameter, offering various functionalities depending on the parameter's value. This opcode enables more sophisticated contracts, such as those allowing the combination of UTXOs locked by the same script for withdrawals from Vault contracts to staging addresses, facilitating operations with any amount UTXOs and enabling endogenous fee payments and change address registrations.

This approach, documented in a [shared gist](https://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5), credits several contributors to the development of these ideas, including Jeremy Rubin, James O'Beirne, and Salvatore Ingala, among others who have explored covenant design and specifically `CTV`. Their work underpins the solutions provided, aiming to mitigate the complexities and limitations encountered with existing methods, thus broadening the applicability and functionality of `CTV` in blockchain programming and contract design.</summary>
    <published>2024-12-30T12:34:21.017000+00:00</published>
  </entry>
</feed>

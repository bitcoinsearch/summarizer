<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Timewarp attack 600 second grace period</title>
  <updated>2024-12-19T02:25:25.739891+00:00</updated>
  <author>
    <name>ajtowns 2024-12-18 17:01:40.336000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Timewarp attack 600 second grace period</title>
    <updated>2024-12-19T02:25:25.739923+00:00</updated>
    <link href="https://delvingbitcoin.org/t/timewarp-attack-600-second-grace-period/1326/9" rel="alternate"/>
    <summary>The discussion revolves around the technical nuances of manipulating the `nTime` parameter in blockchain mining, particularly focusing on its implications and the mathematical calculations behind optimizing mining efficiency. The core concern addressed is the potential risk associated with adjusting the `nTime` value beyond a certain threshold, which might lead to blocks being considered invalid. However, it's argued that as long as the adjustment doesn't exceed 600 seconds in either direction, the risk remains minimal. This is because any block timestamped too far in the future would be rejected by nodes due to its parent block's timestamp, ensuring that overly futuristic timestamps do not benefit malicious attempts to disrupt the blockchain.

Further mathematical elaboration provides insight into how different strategies for rolling `nTime`, combined with adjustments allowed by BIP320, can dramatically increase mining hash rates from gigahashes per second (GH/s) up to petahashes per second (PH/s). For instance, a nuanced approach of bumping `nTime` once every second can yield 4GH/s, while strategic adjustments leveraging both `nNonce` and `nTime` alterations could achieve as much as 280TH/s. To reach into the PH/s range, a tactic involving only providing new work every 30 seconds while allowing for a 128-second roll on `nTime` could result in 1.2PH/s. This strategy escalates further when considering more frequent provision of new work or multiple units of work within short time frames.

Additionally, the conversation touches upon the concept of introducing rules to regulate the timestamp of the first block of a new period, suggesting it should be bounded below by both the median time and a specific offset from the previous block's `nTime`. This proposal aims to mitigate risks associated with continuous `nTime` bumping by mining software, which could eventually produce blocks exceeding the acceptable upper bound, rendering them invalid. The suggested bounds involve a combination of delays derived from median time lag and additional hours to accommodate slow block propagation, aiming for a balance that prevents invalid block production while still allowing for some degree of `nTime` manipulation for optimization purposes.</summary>
    <published>2024-12-18T17:01:40.336000+00:00</published>
  </entry>
</feed>

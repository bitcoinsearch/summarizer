<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>PPLNS with job declaration</title>
  <updated>2024-12-18T02:28:11.776258+00:00</updated>
  <author>
    <name>sjors 2024-12-17 13:27:21.833000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>PPLNS with job declaration</title>
    <updated>2024-12-18T02:28:11.776288+00:00</updated>
    <link href="https://delvingbitcoin.org/t/pplns-with-job-declaration/1099/50" rel="alternate"/>
    <summary>The discussion focuses on a vulnerability within the consensus mechanism where an attacker can send numerous block proposals that require extensive validation time, posing a risk of a free attack due to the potential for these blocks to be invalid. This issue is highlighted in detail on [DelvingBitcoin.org](https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710). To mitigate such attacks, two primary strategies are recommended. The first involves delaying the validation process until a certain threshold of shares has been received, which helps in prioritizing the validation of potentially legitimate blocks over fraudulent ones. The second strategy suggests prohibiting non-standard transactions within the template to reduce the chance of processing potentially problematic or malicious transactions.

Further examination of the problem reveals that merely verifying transactions against the JDS mempool is insufficient for ensuring the validity of a block proposal. This is because it does not account for unknown transactions that could be introduced through an sv2 message. These transactions, even if fetched and included, might still be slow to validate or could involve high-value fake coins, complicating the validation process. Additionally, conflicts within the JDS mempool may necessitate the eviction of other transactions to accommodate new ones, further complicating the procedure.

To robustly determine the validity of proposed blocks, it's suggested that nodes should verify them as they would any standard block but without requiring proof-of-work (PoW). Currently, the lack of an RPC method for such a verification process poses a challenge, as existing methods like `submitblock` demand PoW. Introducing a new RPC method that allows for the verification of blocks without PoW could significantly enhance the system's resilience against such attacks by streamlining the validation process for proposed blocks without compromising security measures.</summary>
    <published>2024-12-17T13:27:21.833000+00:00</published>
  </entry>
</feed>

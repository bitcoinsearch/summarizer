<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>PPLNS with job declaration</title>
  <updated>2024-12-22T02:24:03.021754+00:00</updated>
  <author>
    <name>sjors 2024-12-21 10:26:28.178000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>PPLNS with job declaration</title>
    <updated>2024-12-22T02:24:03.021793+00:00</updated>
    <link href="https://delvingbitcoin.org/t/pplns-with-job-declaration/1099/54" rel="alternate"/>
    <summary>To ensure the integrity of proposed blocks without necessitating proof-of-work (PoW), a novel approach has been suggested. This method involves the verification of blocks akin to standard procedures but omits the PoW check. The absence of an existing Remote Procedure Call (RPC) method that facilitates this process highlights a potential gap in current functionalities. Specifically, while the `submitblock` RPC requires PoW, the proposition introduces a `checkblock` RPC designed for Bitcoin Core, as demonstrated in a proof-of-concept implementation available at [Sjors's GitHub](https://github.com/Sjors/bitcoin/pull/75). This innovative RPC can effectively validate block templates that lack PoW. 

Furthermore, it incorporates a `multiplier` argument, which allows for the adjustment of the target threshold for so-called weak blocks. This feature is inspired by research conducted by @instagibbs, detailed at [DelvingBitcoin.org](https://delvingbitcoin.org/t/second-look-at-weak-blocks/805), albeit serving a distinct purpose. The integration of such a mechanism not only broadens the applicability of block validation processes but also introduces flexibility in handling blocks with varying degrees of computational proof strength. Through these enhancements, the proposal aims to fortify the blockchain's security and integrity mechanisms while accommodating a wider range of block types.</summary>
    <published>2024-12-21T10:26:28.178000+00:00</published>
  </entry>
</feed>

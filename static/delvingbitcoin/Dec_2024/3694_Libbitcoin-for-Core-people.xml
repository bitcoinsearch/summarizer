<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Libbitcoin for Core people</title>
  <updated>2024-12-03T02:36:26.233861+00:00</updated>
  <author>
    <name>evoskuil 2024-12-02 20:41:46.507000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Libbitcoin for Core people</title>
    <updated>2024-12-03T02:36:26.233889+00:00</updated>
    <link href="https://delvingbitcoin.org/t/libbitcoin-for-core-people/1222/38" rel="alternate"/>
    <summary>Analyzing the flamegraph of Bitcoin Core during the Initial Block Download (IBD) process reveals significant time consumption in looking up input prevouts. This observation suggests that parallelizing this aspect of the IBD could result in a noticeable performance enhancement. However, completely bypassing this step is not viable as it would lead to the absence of a utxo set upon completion, an issue not encountered by libbitcoin. The implication here is that although skipping the lookup of input prevouts seems like a shortcut, it would undermine the integrity of the process, contrasting with libbitcoin's architecture which apparently does not face this limitation. This situation presents an opportunity for material improvement in the efficiency and speed of the Bitcoin Core IBD process by exploring parallelization strategies, while still maintaining the necessary construction of the utxo set for the system's functionality.</summary>
    <published>2024-12-02T20:41:46.507000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Optimistic ZK verification using MATT</title>
  <updated>2024-08-01T02:12:14.093906+00:00</updated>
  <author>
    <name>halseth 2024-07-31 12:54:53.365000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Optimistic ZK verification using MATT</title>
    <updated>2024-08-01T02:12:14.093944+00:00</updated>
    <link href="https://delvingbitcoin.org/t/optimistic-zk-verification-using-matt/1050" rel="alternate"/>
    <summary>Elftrace, initially introduced as a tool for creating Bitcoin Scripts to verify RISC-V execution, has received significant updates aimed at enhancing its functionality and user experience. Originally designed to facilitate the verification of RISC-V execution within Bitcoin's scripting capabilities, Elftrace's development team has worked on expanding its utility by simplifying the process involved in compiling Rust programs. This advancement negates the previously required step of writing custom assembly code for new programs, streamlining the development process significantly.

Moreover, Elftrace now supports standard input/output operations, broadening the scope of programs that can interact with it. This update is particularly noteworthy as it enables the compilation of the Winterfell STARK library as a dependency. The inclusion of the Winterfell STARK library is a critical development, as it allows users to verify Zero-Knowledge (ZK) proofs directly within Bitcoin Script. However, it's important to note that utilizing this feature still demands the use of CAT and a covenant.

For those interested in exploring Elftrace's newly introduced capabilities, especially its application in verifying ZK proofs within Bitcoin Script, a comprehensive write-up along with example code has been made available. This resource provides valuable insights into leveraging Elftrace for more complex cryptographic verification tasks and can be accessed [here](https://github.com/halseth/elftrace/blob/831f537bc1509bd45c350e103f7fc73aa818f7dd/docs/zk_verifier.md). The document elaborates on the technical intricacies involved in the process, offering a detailed guide for developers looking to integrate these advanced features into their projects.</summary>
    <published>2024-07-31T12:54:53.365000+00:00</published>
  </entry>
</feed>

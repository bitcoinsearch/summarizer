<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Zero-fee commitments for mobile wallets</title>
  <updated>2025-02-21T02:21:18.867538+00:00</updated>
  <author>
    <name>t-bast 2025-02-20 08:43:54.342000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Zero-fee commitments for mobile wallets</title>
    <updated>2025-02-21T02:21:18.867572+00:00</updated>
    <link href="https://delvingbitcoin.org/t/zero-fee-commitments-for-mobile-wallets/1453/11" rel="alternate"/>
    <summary>The discussion revolves around the implementation of a new feature in mobile wallets concerning Lightning Service Providers (LSPs) and their management of transaction fees. The proposed solution suggests that LSPs, which run Bitcoin nodes and are always online, should decide on the feerate for transactions due to their more accurate view of the current feerate compared to mobile wallet users. This approach is considered simpler and aims to mitigate the issue of force-closes. However, it acknowledges a potential drawback during spikes in feerate that the LSP might not adjust to in time, possibly selecting a too low feerate. Given the inherent limitations in predicting feerate changes and the imperfect nature of mobile wallet users' view of the mempool/feerate, this compromise is seen as an improvement over the existing anchor output channels despite not being a flawless solution.

It is suggested that to accommodate for this imperfection, mobile wallet users should opt for a longer `min_final_expiry_delta` than currently used. The typical range mentioned is between 24 and 36 blocks for Phoenix wallets, implying that a longer window could provide more time for HTLC-success transactions to be confirmed during volatile fee periods. 

The conversation also touches on the broader challenge of securing mobile wallet transactions against dishonest LSP behavior. While acknowledging that no solution can guarantee 100% security without the adoption of additional measures like watch-towers, which remains unlikely among most users, the goal stated is to enhance security protocols to make cheating by LSPs as difficult as possible without overly complicating the protocol.

Finally, the addition of a new NACK mechanism is mentioned as a pending update to an existing PR (Pull Request), attributed to the PR not having been updated recently. The expectation is that this feature will be incorporated once work resumes on implementing this specific functionality. This aspect points towards ongoing development efforts aimed at refining and improving the protocol to address identified issues and user needs.</summary>
    <published>2025-02-20T08:43:54.342000+00:00</published>
  </entry>
</feed>

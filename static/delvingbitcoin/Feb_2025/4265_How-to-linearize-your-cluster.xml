<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How to linearize your cluster</title>
  <updated>2025-02-11T02:19:06.669308+00:00</updated>
  <author>
    <name>stefanwouldgo 2025-02-10 16:50:11.817000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How to linearize your cluster</title>
    <updated>2025-02-11T02:19:06.669341+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-to-linearize-your-cluster/303/37" rel="alternate"/>
    <summary>The discussion revolves around the comparison of different algorithmic approaches, specifically PBFS, as described in a [paper](https://arxiv.org/pdf/2410.15920), and GGT. The complexity bounds of PBFS appear to be worse than those of GGT on a theoretical basis. However, experimental evidence suggests that PBFS outperforms both FP (referred to as DS in the PBFS paper) and GGT in practical settings. These findings are significant, especially considering that the experiments were conducted on instances much larger than what might typically be needed; the smallest example involved around 5,000 nodes and was processed in 11 milliseconds. Extrapolating from these results, it's suggested that an instance with 500 nodes could potentially be executed in under 50 microseconds, assuming cubic runtime.

This leads to the conclusion that while asymptotic analysis is valuable, the actual performance of these algorithms in practice can diverge significantly from theoretical predictions. This divergence is largely attributed to the constants involved in the complexity formulas, which are heavily dependent on specific implementation details. Therefore, for smaller instances, which are more relevant to the current interest, a straightforward implementation of DS/FP, coupled with an efficiently tuned min-cut algorithm, may indeed offer the most optimal solution. This assessment underscores the importance of considering practical experimentation and fine-tuning of algorithms based on specific use cases, rather than relying solely on theoretical complexity bounds.</summary>
    <published>2025-02-10T16:50:11.817000+00:00</published>
  </entry>
</feed>

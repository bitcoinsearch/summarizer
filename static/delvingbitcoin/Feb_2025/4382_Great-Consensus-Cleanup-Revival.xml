<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Great Consensus Cleanup Revival</title>
  <updated>2025-02-27T02:22:02.316473+00:00</updated>
  <author>
    <name>Chris_Stewart_5 2025-02-26 17:50:27.221000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Great Consensus Cleanup Revival</title>
    <updated>2025-02-27T02:22:02.316504+00:00</updated>
    <link href="https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/73" rel="alternate"/>
    <summary>The document presents a detailed examination of 64-byte transactions in the Bitcoin network, highlighting their characteristics, limitations, and the implications of a proposed Bitcoin Improvement Proposal (BIP) aimed at making these transactions consensus-invalid. Initially, it outlines the structure of a 64-byte transaction, which includes fields like version, vin size, outpoint, scriptSig, sequence, vout size, value, scriptPubKey, and locktime. The specific format of these transactions indicates that they are pre-Segwit, given their inability to include a digital signature within the `scriptSig` field due to size constraints, as digital signatures must be at least 9 bytes long post the activation of [BIP66](https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0066.mediawikider-encoding-reference).

A significant limitation of 64-byte transactions is their incapacity to spend raw scripts protected by public keys or supported hash functions, given no known `scriptPubKey` can be both 4 bytes long and thus secure. Consequently, outputs generated by such transactions are essentially `ANYONECANSPEND`, making them trivially claimable by miners, albeit this objective can also be accomplished with transactions of other sizes.

The analysis further delves into the compatibility of 64-byte transactions with various Bitcoin Script outputs, such as nonstandard, P2SH, and SegWit outputs. It notes the absence of non-standard, non-zero-value outputs that could be exclusively satisfied by a 64-byte transaction, as well as the impracticality of using 64-byte transactions for P2SH outputs due to the redeem script's size requirements. Similarly, spending native SegWit programs with 64-byte transactions is constrained by the requirement for exactly 4-byte `scriptPubKeys`. This constraint extends to both native SegWit v0 and v1 programs and highlights the impossibility of broadcasting 64-byte transactions without custom modifications to `bitcoind`, as evidenced by [testing observations](https://github.com/bitcoin/bitcoin/blob/e486597f9a57903600656fb5106858941885852f/src/validation.cppL798).

The proposal's potential impact on future SegWit versions is also considered, suggesting that disallowing 64-byte transactions would prevent certain types of SegWit transactions, specifically those paying to 2-byte witness programs, without seemingly causing any issues. However, the document acknowledges a lack of extensive discussion on this aspect within existing literature. This comprehensive analysis underscores the technical nuances and implications of the proposed BIP on the Bitcoin network's transactional dynamics, particularly concerning security, efficiency, and future scalability.</summary>
    <published>2025-02-26T17:50:27.221000+00:00</published>
  </entry>
</feed>

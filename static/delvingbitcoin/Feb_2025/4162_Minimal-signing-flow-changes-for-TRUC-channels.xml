<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Minimal signing flow changes for TRUC channels</title>
  <updated>2025-02-05T02:23:45.764305+00:00</updated>
  <author>
    <name>ajtowns 2025-02-04 05:58:35.383000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Minimal signing flow changes for TRUC channels</title>
    <updated>2025-02-05T02:23:45.764340+00:00</updated>
    <link href="https://delvingbitcoin.org/t/minimal-signing-flow-changes-for-truc-channels/1414/7" rel="alternate"/>
    <summary>The discussion from October 2021 introduced an innovative approach to handling commitment transactions within a payment channel, aiming to improve the efficiency of updates. This method divides the commitment transaction into two distinct outputs: one for Alice's balance and her HTLCs (Hashed Time-Locked Contracts) to Bob, and another for Bob's corresponding balances and HTLCs. This division allows for half-round-trip-time (0.5 RTT) updates for either party's output with only one party's signature required, thereby not invalidating the other party's signatures on their latest spend. However, when it comes to reshuffling the balances after payments have been successfully made, a full 1.5 round trips are necessary. This more significant update is suggested to be done during quieter periods or less frequently to manage the overhead.

The structure of these transactions is outlined using a `mermaid` diagram which visually represents the relationships between different components such as Commitment, AliceCmt (Alice's commitment), and HTLC-X-Claim/Refund. In this setup, the HTLC-X-Claim path demands signatures from both Alice and Bob, ensuring a commitment to version 3 of the transaction format. Conversely, the HTLC-X-Refund path requires only Alice's signature along with a timeout condition, without committing to a specific transaction version. This flexibility in signature requirements facilitates smoother updates by allowing Bob to update his commitment (BobCmt) without impacting the validity of the signatures pertaining to Alice's side of the transaction.

Additionally, the consideration of PTLCs (Point Time-Locked Contracts) over HTLCs introduces a requirement for both Alice and Bob's signatures on the claim transaction. This requirement aims to compel Bob to reveal the PTLC preimage, aligning with the original motivation behind this structured transaction approach. The detailed breakdown and explanation of this methodology shed light on attempts to streamline payment channel operations while maintaining security and efficiency in the update mechanisms.</summary>
    <published>2025-02-04T05:58:35.383000+00:00</published>
  </entry>
</feed>

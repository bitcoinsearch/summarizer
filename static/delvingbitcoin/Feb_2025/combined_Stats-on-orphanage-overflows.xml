<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Stats on orphanage overflows</title>
  <updated>2025-02-06T02:25:17.571466+00:00</updated>
  <author>
    <name>0xB10C 2025-02-05 15:58:33.718000+00:00</name>
  </author>
  <author>
    <name>0xB10C 2025-02-05 14:48:07.439000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2025/4183_Stats-on-orphanage-overflows.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2025/4182_Stats-on-orphanage-overflows.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Stats on orphanage overflows</title>
    <updated>2025-02-06T02:25:17.571504+00:00</updated>
    <link href="https://delvingbitcoin.org/t/stats-on-orphanage-overflows/1421" rel="alternate"/>
    <summary>In an intriguing observation of network behavior on September 14, 2024, data revealed that there was an exceptionally high rate of orphan transaction removals across various nodes, with figures exceeding 10 million. Specifically, instances were recorded where more than 100,000 orphans were being cleared per minute from a single node named Alice. This unusual activity suggested the possibility of a deliberate attempt to flood the network with orphan transactions, thereby overwhelming the system's capacity to handle these unparented entities efficiently.

Further examination of the transactions involved indicated a significant portion had weights of either 501 or 502 WU and bore resemblance to specific transactions associated with runestone mints, as exemplified by one [transaction](https://mempool.space/tx/ac8990b04469bad8630eaf2aa51561086d81a241deff6c95d96d27e41fa19f90). An additional review disclosed that these transactions were not unsolicited but rather appeared to have been requested by the node itself. The node had logged over 10 million lines containing `Requesting tx`, pointing towards an operational anomaly where it inadvertently re-requested the same transactions multiple times, tallying up to approximately 200,000 unique transaction identifiers (txids) for that day alone. This suggests a potential flaw in the mechanism responsible for managing orphan transactions, possibly leading to unnecessary network congestion and inefficiency.

On a related note, the management of orphan transactions within Bitcoin Core involves a function known as `LimitOrphans()`, accessible through the provided [link](https://github.com/bitcoin/bitcoin/blob/33932d30e382d1296be438ec5365fa0a56cf0864/src/txorphanage.cppL123), which is executed each time an orphan is added to a node's orphanage. This function plays a crucial role in maintaining the orphanage's size within manageable limits by removing expired orphans and, if necessary, randomly selecting additional orphans for removal once the capacity exceeds the maximum threshold, set by default at 100 transactions. This threshold can be adjusted using the `-maxorphantx=n` parameter. Such operations are critical for preventing the orphanage from becoming overloaded, ensuring that the system remains resilient against potential abuses that could lead to performance degradation.</summary>
    <published>2025-02-05T15:58:33.718000+00:00</published>
  </entry>
</feed>

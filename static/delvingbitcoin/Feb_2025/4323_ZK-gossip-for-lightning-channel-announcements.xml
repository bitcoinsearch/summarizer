<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>ZK-gossip for lightning channel announcements</title>
  <updated>2025-02-19T02:18:38.777709+00:00</updated>
  <author>
    <name>halseth 2025-02-18 21:43:39.633000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>ZK-gossip for lightning channel announcements</title>
    <updated>2025-02-19T02:18:38.777745+00:00</updated>
    <link href="https://delvingbitcoin.org/t/zk-gossip-for-lightning-channel-announcements/1407/28" rel="alternate"/>
    <summary>The discussion revolves around an innovative method focused on enhancing the efficiency of signature verification processes by utilizing a blinded key. This strategy allows for the offloading of intensive Elliptic Curve (EC) operations from the Zero Knowledge (ZK) environment, thereby addressing performance bottlenecks associated with these computations. The conversation is detailed in a GitHub issue, which can be explored further through this [link](https://github.com/halseth/output-zero/issues/10). It is noted that after implementing this new approach, the SHA-512 hashing required for verifying the utreexo proof has become the primary factor affecting runtime performance.

In light of the above, there's an exploration into potential solutions for mitigating the impact of SHA-512 hashing on performance. Two possibilities are suggested: firstly, the adoption of the `poseidon2` hash function as an alternative to SHA-512, and secondly, leveraging the Risc0 precompile specifically designed for SHA-512 hashing. The latter option is mentioned in the context of the existing implementation, which currently utilizes the `bitcoin_hashes::Sha512` library. This shift in hashing methodology poses questions regarding the feasibility and ease of integration of these alternatives into the existing system, aiming to optimize the verification process while maintaining or improving upon current security and performance standards.</summary>
    <published>2025-02-18T21:43:39.633000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sharing block templates</title>
  <updated>2025-08-15T02:56:40.697103+00:00</updated>
  <author>
    <name>ajtowns 2025-08-14 21:52:52.753000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sharing block templates</title>
    <updated>2025-08-15T02:56:40.697136+00:00</updated>
    <link href="https://delvingbitcoin.org/t/sharing-block-templates/1906/7" rel="alternate"/>
    <summary>The concept of set reconciliation in the context of blockchain transactions and peer-to-peer communication has garnered interest, particularly with the application of minisketch and BIP330. These tools represent potential methods for optimizing data transfer between nodes, specifically regarding transaction sets within block templates. However, there are notable challenges that accompany their implementation. Firstly, BIP330 is still under development, as indicated by its ongoing discussion on [GitHub](https://github.com/bitcoin/bips/blob/9a55a542cc5efc8fe1884dcb4d839623fcdd8ace/bip-0330.mediawiki). This means that leveraging an existing, stable version of this protocol for immediate use is not feasible. Additionally, the computational efficiency of minisketch decreases significantly with larger datasets, following an $O(n^2)$ scaling issue. This becomes problematic considering the discrepancy between the number of transactions typically found in a block template compared to those in the INV queue, making it less suitable for efficiently determining a new peer's template.

Despite these hurdles, the necessity for complex set reconciliation for updating peers on the latest template may not be as critical as presumed. Given that a sending peer retains knowledge of the last template shared with each receiving peer, a simpler method could be employed. Specifically, the sending peer could inform the receiving peer of which transactions to omit (by position) and which new transactions to add (by short ID and new position). This approach could substantially reduce the size of the template message required for transmission. For instance, rather than sending a full 20kB message that includes around 3000 six-byte short IDs, the message could be condensed to approximately 2.5kB. This reduction would be achieved by only transmitting 250 two-byte positions alongside the corresponding 250 six-byte short IDs or two-byte positions, thereby streamlining the update process.</summary>
    <published>2025-08-14T21:52:52.753000+00:00</published>
  </entry>
</feed>

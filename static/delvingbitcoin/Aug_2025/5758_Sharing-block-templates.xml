<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sharing block templates</title>
  <updated>2025-08-27T02:33:31.068117+00:00</updated>
  <author>
    <name>gmaxwell 2025-08-21 22:14:16.210000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sharing block templates</title>
    <updated>2025-08-27T02:33:31.068148+00:00</updated>
    <link href="https://delvingbitcoin.org/t/sharing-block-templates/1906/14" rel="alternate"/>
    <summary>The discussion revolves around the computational cost dynamics between sender and receiver in handling transaction identifiers (txids) within a blockchain context. The sender incurs a constant computational cost regardless of the number of txids in a block. Conversely, the receiver might face significantly higher computational burdens, potentially having to process several hundred times more work if unable to effectively cache these txids. However, this setup introduces a vulnerability wherein the receiver's long-lived identifier becomes an easy target for attackers capable of constructing 48-bit colliding transactions. This risk necessitates a continuous defensive posture against such attacks.

Furthermore, the conversation touches upon the protective mechanism inherent in compact blocks, which are safeguarded by the necessity for a matching root hash. This feature ensures that any failure or anomaly, such as a collision, is detectable. A proposed solution to mitigate the impact of collisions involves senders transmitting a small minisketchâ€”specifically, an 8 element minisketch based on the last 64-bits of each txid. This approach would enable receivers to detect failures and recover from a small number of collisions without the need for a minisketch decoder, assuming they can identify the colliding transactions. This method suggests a low-cost strategy for enhancing reliability and integrity in transaction processing.</summary>
    <published>2025-08-21T22:14:16.210000+00:00</published>
  </entry>
</feed>

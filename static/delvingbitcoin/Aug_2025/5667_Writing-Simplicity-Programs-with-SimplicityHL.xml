<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Writing Simplicity Programs with SimplicityHL</title>
  <updated>2025-08-07T03:09:48.895668+00:00</updated>
  <author>
    <name>sanket1729 2025-08-06 22:37:56.383000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Writing Simplicity Programs with SimplicityHL</title>
    <updated>2025-08-07T03:09:48.895702+00:00</updated>
    <link href="https://delvingbitcoin.org/t/writing-simplicity-programs-with-simplicityhl/1900/3" rel="alternate"/>
    <summary>The discussion highlights an innovative approach in the realm of SimplicityHL, a programming model that traditionally mandates the commitment to programs during the address creation phase. It introduces the concept of utilizing a custom sighash implementation, which diverges from this standard by allowing decisions regarding program commitment to be deferred until the time of signing. This flexibility is made possible through an extension known as *delegation*. 

Despite the theoretical feasibility of incorporating a more adaptable sighash-based check into SimplicityHL programs, leveraging what is referred to as the [universal sighash](https://blog.blockstream.com/simplicity-taproot-and-universal-sighashes/) mode, such an implementation has yet to materialize. The absence of technical impediments suggests that the adaptation of this mechanism could enhance the utility and versatility of SimplicityHL, although it remains unexplored in practice.</summary>
    <published>2025-08-06T22:37:56.383000+00:00</published>
  </entry>
</feed>

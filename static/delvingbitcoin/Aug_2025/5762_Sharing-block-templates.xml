<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Sharing block templates</title>
  <updated>2025-08-27T02:33:19.768635+00:00</updated>
  <author>
    <name>ajtowns 2025-08-22 04:46:39.787000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Sharing block templates</title>
    <updated>2025-08-27T02:33:19.768665+00:00</updated>
    <link href="https://delvingbitcoin.org/t/sharing-block-templates/1906/15" rel="alternate"/>
    <summary>The concept of using a minisketch, an 8-element sketch over the last 64-bits of each transaction identifier (txid), presents an innovative approach to enhancing the efficiency and reliability of transaction template reception and reconstruction in blockchain technology. This method offers several key benefits that address the challenges associated with transaction collisions and the optimization of template reconstruction processes.

One primary advantage of implementing a minisketch is its ability to detect unknown collisions effectively. In instances where there is a discrepancy between the sender's and receiver's view of a transaction's identifier—where one has wtxid A and the other has wtxid B, yet both map to the same seeded shortid—the minisketch can identify and report each A/B value. This functionality allows for the accurate identification of B transactions within a recovered template, enabling the request and retrieval of the corresponding A values. Such a mechanism ensures that fewer than four such errors can be reliably detected and addressed, enhancing the integrity and reliability of transaction processing.

Furthermore, the use of minisketch facilitates the resolution of known collisions without necessitating additional communication rounds. If a receiver is aware of two wtxids, A and B, mapping to identical shortids, the system can determine which transaction to include directly. This capability streamlines the process, reducing the time and resources required to achieve consensus on transaction inclusion.

Another significant application of minisketch lies in optimizing the reconstruction of transaction templates. By calculating the shortids for transactions deemed highly likely to be included in a block or template and then utilizing the minisketch to identify missing wtxid suffixes, participants can efficiently look up these transactions in the mempool. This process allows for the quick verification of shortids and completion of the template reconstruction with minimal reliance on the full mempool data. For optimal results in this context, a larger sketch size, such as 64 or 128 elements (corresponding to sketches of 512 or 1024 bytes), may be desirable to accommodate the volume of transactions being processed.

The potential for bandwidth savings through strategic communication is also highlighted. By initially exchanging shortids and a sketch, followed by direct requests for 64-byte wtxid suffixes if the sketch fails to resolve all issues, and finally requesting the full transactions only when necessary, the system can significantly reduce the amount of data transmitted. This tiered approach to data exchange and problem resolution could lead to more efficient use of network resources and faster transaction processing times.</summary>
    <published>2025-08-22T04:46:39.787000+00:00</published>
  </entry>
</feed>

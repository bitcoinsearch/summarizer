<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Confidential Script: Emulate soft forks using stateless TEEs</title>
  <updated>2025-08-31T02:41:15.961757+00:00</updated>
  <author>
    <name>josh 2025-08-30 20:26:41.735000+00:00</name>
  </author>
  <author>
    <name>JeremyRubin  . 2025-08-18 02:45:37.348000+00:00</name>
  </author>
  <author>
    <name>stutxo  . 2025-08-18 02:37:52.830000+00:00</name>
  </author>
  <author>
    <name>josh  . 2025-08-16 02:51:53.063000+00:00</name>
  </author>
  <author>
    <name>sanket  . 2025-08-15 05:09:15.910000+00:00</name>
  </author>
  <author>
    <name>josh  . 2025-08-12 21:11:24.910000+00:00</name>
  </author>
  <link href="delvingbitcoin/Aug_2025/5789_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2025/5734_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2025/5733_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2025/5723_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2025/5715_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2025/5695_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Confidential Script: Emulate soft forks using stateless TEEs</title>
    <updated>2025-08-31T02:41:15.961817+00:00</updated>
    <link href="https://delvingbitcoin.org/t/confidential-script-emulate-soft-forks-using-stateless-tees/1918" rel="alternate"/>
    <summary>The email discussion highlights significant advancements and collaborative efforts in the field of blockchain technology, specifically focusing on smart contract development and Bitcoin's kernel enhancements. It introduces two key resources that contribute to the ongoing development in this domain. The first is a guide to the CTV emulator, which serves as an invaluable tool for developers by offering a sandbox environment for testing and refining smart contracts before their deployment on the blockchain. This resource can be found at [https://learn.sapio-lang.org/ch05-01-ctv-emulator.html](https://learn.sapio-lang.org/ch05-01-ctv-emulator.html). The second resource is a scholarly paper presenting a theoretical framework for covenant-oracle with script as key tweak paradigm, accessible at [https://rubin.io/public/pdfs/unfedcovenants.pdf](https://rubin.io/public/pdfs/unfedcovenants.pdf). This document explores the integrity checks using BitVM, providing a sophisticated approach to smart contract integrity beyond conventional methods.

The sender also discusses their contribution towards integrating new operation codes into Bitcoin's kernel, emphasizing the implementation of op_ctv, op_csfs, and op_cat through a fork. This initiative aims to enhance Bitcoin's functionality by incorporating covenants, thereby advancing its capabilities. The project's GitHub repository, which hosts the covenant-enabled Bitcoin kernel fork, is shared for review and collaboration at [GitHub Repository](https://github.com/stutxo/rust-bitcoinkernel-covenants/tree/covenants_enabled). The emphasis on simplicity within the project reflects a commitment to security, user-friendliness, and the facilitation of peer-reviewed soft fork proposals, particularly those involving financial transactions.

Further discussed is the deployment of a library within a Trusted Execution Environment (TEE), highlighting the potential for diverse applications given the various expertise other collaborators might bring. An openness to enhancing the `rust-bitcoinkernel` repository with support for additional functionalities like various soft forks and Simplicity suggests a strategic approach to consolidating resources and efforts for efficient and scalable deployments within TEEs.

A notable innovation mentioned is the "confidential-script-lib" library, unveiled at the BTC++ hackathon in Austin. This architecture aims to enable confidential execution of scripts not yet supported by the Bitcoin protocol, facilitating tests of features such as `OP_CAT`, `OP_CTV`, `OP_CCV`, and Simplicity on the mainnet in a permissionless manner. The role of TEEs, particularly AWS's Nitro Enclave, is emphasized for securing code execution against external threats while enabling reliable attestations. The integration with AWS's Key Management System (KMS) is portrayed as a robust framework for securing funds, albeit requiring trust in AWS as the operator.

The library employs a two-step emulation and signing process that enhances privacy and functionality with minimal trust reliance. A failsafe mechanism ensures fund recovery if the primary execution path becomes unavailable. Support for experimenting with proposed soft fork upgrades via the `rust-bitcoinkernel` API is also highlighted, recommending a setup within a Nitro Enclave integrated with AWS KMS for maximum security. This configuration stresses the importance of irrevocable KMS policies for key creation, ensuring access is strictly reserved for specific, verified enclaves.

In essence, the email conversation sheds light on innovative approaches and collaborative efforts aimed at enhancing the security, functionality, and user-friendliness of blockchain technology and smart contracts. Through the use of TEEs and sophisticated frameworks like the "confidential-script-lib" library, the discussions underscore the potential for advancing Bitcoin's capabilities and the broader application of these technologies in secure and trust-minimized environments.</summary>
    <published>2025-08-30T20:26:41.735000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Confidential Script: Emulate soft forks using stateless TEEs</title>
  <updated>2025-08-16T02:49:10.472314+00:00</updated>
  <author>
    <name>sanket1729 2025-08-15 05:09:15.910000+00:00</name>
  </author>
  <author>
    <name>josh  . 2025-08-12 21:11:24.910000+00:00</name>
  </author>
  <link href="delvingbitcoin/Aug_2025/5715_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2025/5695_Confidential-Script-Emulate-soft-forks-using-stateless-TEEs.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Confidential Script: Emulate soft forks using stateless TEEs</title>
    <updated>2025-08-16T02:49:10.472353+00:00</updated>
    <link href="https://delvingbitcoin.org/t/confidential-script-emulate-soft-forks-using-stateless-tees/1918" rel="alternate"/>
    <summary>The "confidential-script-lib" library was unveiled at the BTC++ hackathon in Austin, offering a new architecture designed to confidentially execute complex scripts that the Bitcoin protocol does not currently support. This innovative approach aims to facilitate developer testing of features such as `OP_CAT`, `OP_CTV`, `OP_CCV`, and Simplicity on the mainnet in a way that is permissionless and relies minimally on trust. It represents a potential compromise in ongoing discussions about soft forks by demonstrating real demand for certain upgrades. Central to this system is the use of a Trusted Execution Environment (TEE), specifically AWS's Nitro Enclave, which provides a secure space for code execution isolated from external threats, thereby protecting sensitive information from side-channel and physical attacks. This secure environment also offers reliable attestations regarding the executed code and its outcomes.

The library operates through a two-step emulation and signing process. Initially, it creates a transaction with an input spending a real previous outpoint but emulates a script-path spend from a P2TR `script_pubkey`. This transaction is then validated through a Verifier compatible with `rust-bitcoinkernel`, allowing for the emulation of Bitcoin protocol features not yet adopted. If validation succeeds, the transaction is signed using a derived child private key from the parent private key and the merkle root of the emulated script path. This methodology decouples script execution from on-chain settlement, improving privacy and enabling new functionalities with minimal trust dependence. Additionally, a failsafe mechanism through a backup script path ensures fund recovery if the primary TEE-based execution path fails.

For security, developers are advised to run the library within a Nitro Enclave tightly integrated with AWS Key Management System (KMS). This configuration secures the master private key and allows any AWS account to deploy a similar enclave, making the deployment nearly permissionless. It highlights the crucial role of irrevocable KMS policies for key creation, which prevent deletion and restrict access exclusively to specific, verified enclaves.

In essence, the "confidential-script-lib" introduces an advanced method for executing Bitcoin scripts confidentially and securely. By leveraging TEEs like AWS's Nitro Enclave and integrating with AWS KMS, it offers a powerful platform for developers to experiment with and implement new features on the Bitcoin mainnet, maintaining high security standards and minimal trust requirements.</summary>
    <published>2025-08-15T05:09:15.910000+00:00</published>
  </entry>
</feed>

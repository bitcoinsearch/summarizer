<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Writing Simplicity Programs with SimplicityHL</title>
  <updated>2025-08-27T02:31:58.142328+00:00</updated>
  <author>
    <name>instagibbs 2025-08-26 14:01:55.976000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Writing Simplicity Programs with SimplicityHL</title>
    <updated>2025-08-27T02:31:58.142363+00:00</updated>
    <link href="https://delvingbitcoin.org/t/writing-simplicity-programs-with-simplicityhl/1900/7" rel="alternate"/>
    <summary>In an exploration of the SimplicityHL repository and its compilation outcomes, a programmer has highlighted an intriguing aspect regarding the computational efficiency and serialization of Simplicity code. Specifically, when compiling an example from the SimplicityHL repo, the resulting program was estimated to require 447 Work Units (WU) excluding witness data. This raises a pertinent question about the potential for compressing Simplicity code serialization without infringing on the costing allocated to underlying JET operations. For instance, the [output amount](https://docs.rs/simfony-as-rust/latest/simfony_as_rust/jet/transaction/fn.output_amount.html) operation is costed at merely 298 milliWork Units (mWU), yet its serialized script version might be significantly larger, potentially by orders of magnitude, reaching up to 15 WU as per the calculation provided. This discrepancy between the operational cost and the serialized script size opens up discussions on optimizing the serialization process to potentially achieve greater efficiency in the use of Simplicity code.</summary>
    <published>2025-08-26T14:01:55.976000+00:00</published>
  </entry>
</feed>

<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script</title>
  <updated>2025-11-01T02:48:18.937553+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>Abdel  .</author>
      <timestamp>2025-10-14 10:55:51.298000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="1">
      <author>instagibbs  .</author>
      <timestamp>2025-10-14 16:09:26.470000+00:00</timestamp>
    </message>
    <message id="msg_3" depth="0" position="2">
      <author>Abdel  .</author>
      <timestamp>2025-10-16 16:45:25.792000+00:00</timestamp>
    </message>
    <message id="msg_4" depth="0" position="3">
      <author>ftw  .</author>
      <timestamp>2025-10-17 14:38:17.246000+00:00</timestamp>
    </message>
    <message id="msg_5" depth="0" position="4">
      <author>Abdel  .</author>
      <timestamp>2025-10-29 13:49:36.191000+00:00</timestamp>
    </message>
    <message id="msg_6" depth="0" position="5">
      <author>instagibbs</author>
      <timestamp>2025-10-31 15:44:02.036000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/Oct_2025/6071_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6080_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6097_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6100_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6156_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6178_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script</title>
    <updated>2025-11-01T02:48:18.938571+00:00</updated>
    <link href="https://delvingbitcoin.org/t/proposal-op-stark-verify-native-stark-proof-verification-in-bitcoin-script/2056/6" rel="alternate"/>
    <published>2025-10-14 10:55:51.298000+00:00</published>
    <summary>The recent proposal to introduce a new opcode, `OP_STARK_VERIFY`, into Tapscript aims at integrating zero-knowledge proof verification capabilities directly into Bitcoin. This initiative seeks to support applications such as Validity rollups, post-quantum signatures, and privacy-preserving transactions through the direct on-chain verification of STARK proofs. The choice of vanilla STARKs, specifically the Stone prover, is motivated by their transparent, post-quantum-secure assumptions, poly-logarithmic verification complexity, and sublinear proof sizes. However, the proposal acknowledges several challenges, including the neutrality of choosing a specific STARK protocol, the comparatively large proof sizes, and the technical and consensus risks of integrating a particular proof system into Bitcoin.
Alternatives to `OP_STARK_VERIFY` are considered, focusing on `OP_CAT`-based verifiers and arithmetic opcodes for constructing a verifier within Script. These methods offer flexibility and vary in efficiency and degree of protocol enshrinement but come with complexities and potential inefficiencies. The proposed opcode represents a straightforward solution aimed at simplifying runtime and policy by specifying a concrete proof system and format. Key considerations include setting strict bounds on proof size for DoS safety, ensuring predictable runtime through fixed verifier parameters, and imposing policy limits on resource usage.
The discussion also highlights the practical considerations of implementing proof systems, emphasizing the trade-offs between proof sizes and verification times. Large proof sizes pose challenges for decentralized block building and relay activities due to mining timing unpredictability. On-chain verification time, consuming a significant portion of a block's verification budget, necessitates a carefully defined target for average block size. Circle STARKs, while feasible, are described as inefficient and complex, raising questions about their integration with Bitcoin Script and compatibility with Simplicity.
Exploring the feasibility of STARK on Bitcoin involves optimizing between proving speed, proof size, and verification efficiency. A multistage pipeline is employed to balance these factors, with techniques varying from fast proving for initial payload jobs to maximizing proof compression in later stages. Different proof compression approaches yield varying proof sizes and verification times, influencing the on-chain costs associated with these proofs. The analysis underscores the importance of balancing proof size, proving and verification speeds, and on-chain costs in the practical deployment of STARK proofs on Bitcoin.
An alternative strategy proposes using a metaprotocol layered over Bitcoin to implement ZK verification functionality, avoiding direct base protocol modifications. This approach leverages existing witness space for embedding STARK proofs, with open-source indexers verifying proofs off-chain. Advantages include reduced risk of adding cryptographic primitives directly to the base layer, market-driven adoption, and the flexibility for various proof systems to compete. This model supports organic consensus formation around specific implementations without necessitating a soft fork. Document [wtf.rich/w.pdf](wtf.rich/w.pdf) provides insights into leveraging current protocol rules for building on Bitcoin.
Despite skepticism towards metaprotocols, Starknet's success in processing transactions and securing significant volume illustrates the technical feasibility and security of systems built on STARK proofs. This example contrasts theoretical security concerns with empirical achievements, offering a nuanced perspective on the debate over metaprotocols versus established technologies like Starknet.</summary>
  </entry>
</feed>
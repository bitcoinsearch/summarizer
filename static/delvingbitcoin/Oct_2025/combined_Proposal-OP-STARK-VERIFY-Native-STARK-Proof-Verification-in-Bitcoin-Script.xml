<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script</title>
  <updated>2025-10-17T02:29:10.307752+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>Abdel  .</author>
      <timestamp>2025-10-14 10:55:51.298000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="1">
      <author>instagibbs  .</author>
      <timestamp>2025-10-14 16:09:26.470000+00:00</timestamp>
    </message>
    <message id="msg_3" depth="0" position="2">
      <author>Abdel</author>
      <timestamp>2025-10-16 16:45:25.792000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/Oct_2025/6071_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6080_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6097_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script</title>
    <updated>2025-10-17T02:29:10.308337+00:00</updated>
    <link href="https://delvingbitcoin.org/t/proposal-op-stark-verify-native-stark-proof-verification-in-bitcoin-script/2056/3" rel="alternate"/>
    <published>2025-10-14 10:55:51.298000+00:00</published>
    <summary>The proposal to introduce a new opcode, `OP_STARK_VERIFY`, into Tapscript for the Bitcoin blockchain aims to enhance its functionality by enabling on-chain verification of STARK (Scalable Transparent ARgument of Knowledge) proofs. This development is motivated by the potential for various applications such as Validity rollups, post-quantum signatures, and privacy-preserving transactions, which could significantly benefit from direct zero-knowledge proof verification capabilities within Bitcoin. The initiative focuses on leveraging vanilla STARKs, particularly those exemplified by the Stone prover, due to their transparent and post-quantum-secure nature, along with their poly-logarithmic verification complexity and sublinear proof sizes relative to computation size. These features are deemed critical for scaling Bitcoin's Layer 1, facilitating post-quantum signature aggregation, and implementing privacy enhancements through shielded transactions.
Despite the promising aspects of `OP_STARK_VERIFY`, the proposal acknowledges numerous challenges, including maintaining credible neutrality when selecting a specific STARK protocol, managing the relatively large proof sizes associated with STARKs compared to other systems like SNARKs, and addressing the technical and consensus risks of integrating a particular proof system into Bitcoin's consensus mechanism. To address these concerns, alternative methods such as `OP_CAT`-based verifiers and arithmetic opcodes for constructing a verifier within Script are discussed. These alternatives present varying degrees of efficiency, flexibility, and protocol integration complexity but also introduce their own set of challenges and inefficiencies.
The proposed implementation strategy for `OP_STARK_VERIFY` involves incorporating the Stone verifier, a univariate STARK verifier implemented in C++, into Bitcoin Core. This approach emphasizes the need for stringent limits on proof size to ensure denial-of-service (DoS) safety, predictable runtime via fixed verifier parameter sets, and policy limits to manage resource usage effectively. However, this proposal does not come without risks, including the complexity of integrating the verifier's C++ code into Bitcoin, the challenge of ensuring credible neutrality, and the broader implications of enshrining a specific proof system into the Bitcoin consensus model.
Further analysis highlights the practical considerations of implementing such proof systems, especially concerning proof sizes and verification times. There's an emphasis on understanding how these factors affect the decentralization and efficiency of blockchains. Proof sizes, which can vary significantly and may be reduced through compression techniques, play a crucial role in the feasibility of decentralized block building and relay activities. Verification times, consuming a significant portion of the verification budget of a block, are also under scrutiny, underscoring the importance of establishing targets for &quot;average&quot; block sizes and verifying times to maintain consistency across different scenarios.
In conclusion, while the introduction of `OP_STARK_VERIFY` presents a forward-looking approach to enhancing Bitcoin's capabilities with native zero-knowledge proof verification, it raises important considerations regarding flexibility, security, and neutrality. The proposal calls for further discussion and feedback on various aspects, including scope, parameter bounding, pricing, alternatives, and the technical challenges ahead, aiming to refine and optimize the integration of STARK proofs within Bitcoin.</summary>
  </entry>
</feed>
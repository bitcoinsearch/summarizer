<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script</title>
  <updated>2025-10-15T02:32:46.012210+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>Abdel</author>
      <timestamp>2025-10-14 10:55:51.298000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="1">
      <author>instagibbs</author>
      <timestamp>2025-10-14 16:09:26.470000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/Oct_2025/6071_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6080_Proposal-OP-STARK-VERIFY-Native-STARK-Proof-Verification-in-Bitcoin-Script.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script</title>
    <updated>2025-10-15T02:32:46.012656+00:00</updated>
    <link href="https://delvingbitcoin.org/t/proposal-op-stark-verify-native-stark-proof-verification-in-bitcoin-script/2056/2" rel="alternate"/>
    <published>2025-10-14 10:55:51.298000+00:00</published>
    <summary>The proposal for adding an `OP_STARK_VERIFY` opcode to Tapscript in Bitcoin Script aims to enable the on-chain verification of STARK (Scalable Transparent ARgument of Knowledge) proofs, facilitating zero-knowledge proof applications such as validity rollups, post-quantum signatures, and privacy-preserving transactions. The introduction of this opcode is intended to bypass the complexities and limitations associated with off-chain computation and on-chain challenge mechanisms currently employed by solutions like BitVM-style optimistic fraud proofs. The proposed implementation would specifically verify vanilla STARKs, leveraging their post-quantum secure, transparent nature, and efficient verification process that scales logarithmically with computation size.
The motivation behind integrating STARK verification directly into Bitcoin stems from its ability to support a range of applications that could enhance Bitcoin's functionality and scalability. This includes enabling state transition verification for scaling Bitcoin's Layer 1 through validity rollups, aggregating post-quantum signatures into a single succinct proof, and facilitating privacy features like shielded transactions. Furthermore, potential use cases extend to proving reserves or liabilities for platforms like Cashu, enabling account abstraction, and supporting peer-to-peer exchanges between BTC and fiat currencies using zero-knowledge proofs.
However, the proposal acknowledges several limitations and challenges. These include the larger proof sizes associated with STARKs compared to pairing-based SNARKs, which could increase transaction weight and fees; the risk of enshrining a specific proof system, potentially limiting flexibility; the requirement of a soft fork and the associated risks; and the variability in verification times due to the non-constant time nature of the verification process. The issue of credible neutrality arises from the necessity of choosing a particular STARK protocol, highlighting the importance of selecting a well-understood, generic protocol close to the original STARK paper.
Alternatives to a native `OP_STARK_VERIFY` opcode include utilizing `OP_CAT`-based verifiers or arithmetic opcodes to construct a verifier within script, each presenting various trade-offs in terms of efficiency, complexity, and protocol enshrinement. The proposed approach aims for a balance by enshrining a single verification algorithm with strict bounds, offering a clean runtime and policy framework while acknowledging the need for careful consideration regarding pricing, resource usage, and potential DoS vectors.
In summary, the integration of STARK verification into Bitcoin through an `OP_STARK_VERIFY` opcode presents an opportunity to advance Bitcoin's capabilities in terms of scalability, security, and privacy. Despite the identified challenges and the need for further discussion and consensus within the community, the proposal sets the stage for exploring the practical implications and technical feasibility of enhancing Bitcoin's script capabilities to accommodate advanced cryptographic proofs.</summary>
  </entry>
</feed>
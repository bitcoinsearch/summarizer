<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Persisting Mutable Storage Inside The &quot;T&quot;EE</title>
  <updated>2025-10-11T02:21:45.789859+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>ZmnSCPxj  .</author>
      <timestamp>2025-10-07 17:50:26.165000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="1">
      <author>ZmnSCPxj  .</author>
      <timestamp>2025-10-08 11:29:24.545000+00:00</timestamp>
    </message>
    <message id="msg_3" depth="0" position="2">
      <author>ZmnSCPxj  .</author>
      <timestamp>2025-10-08 16:13:19.116000+00:00</timestamp>
    </message>
    <message id="msg_4" depth="0" position="3">
      <author>ZmnSCPxj</author>
      <timestamp>2025-10-10 06:21:59.582000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/Oct_2025/6011_Persisting-Mutable-Storage-Inside-The-T-EE.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6022_Persisting-Mutable-Storage-Inside-The-T-EE.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6024_Persisting-Mutable-Storage-Inside-The-T-EE.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2025/6038_Persisting-Mutable-Storage-Inside-The-T-EE.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Persisting Mutable Storage Inside The &quot;T&quot;EE</title>
    <updated>2025-10-11T02:21:45.790525+00:00</updated>
    <link href="https://delvingbitcoin.org/t/persisting-mutable-storage-inside-the-t-ee/2029/4" rel="alternate"/>
    <published>2025-10-07 17:50:26.165000+00:00</published>
    <summary>The exploration and analysis of Trusted Execution Environments (TEEs) highlight a significant vulnerability in their design, specifically regarding persistent mutable storage. This vulnerability is critical as it exposes TEEs to rollback attacks, which are particularly threatening to applications dealing with cryptocurrencies like Bitcoin. The core issue stems from the lack of internal persistent mutable storage within TEEs, forcing reliance on external storage solutions that must be protected against such attacks. A novel solution proposed to address this challenge involves creating auditable, persistent mutable storage using multiple TEEs. This approach leverages the ephemeral nature of TEE RAM to create a resilient array through strategic distribution and erasure coding, which ensures data recovery despite potential failures. It utilizes the encryption capabilities inherent to TEEs for securing data both at rest and in transit, reinforcing data integrity and confidentiality.
The technical implementation of this proposed storage solution is detailed, redefining conventional storage device terminology to suit the context of cryptocurrency applications and networked TEEs. The discussion includes an examination of sector sizes and the alignment challenges with Transmission Control Protocol (TCP) standards, suggesting an optimal sector size that balances efficiency with cryptographic requirements. Furthermore, a refined disk interface is introduced to mitigate the RAID5 write hole phenomenon. Through provisional write commands and a rigorous commit/rollback protocol, the proposal ensures consistency and integrity across the array, even in scenarios involving partial updates or system crashes. This method not only addresses the atomicity of write operations but also enhances the reliability of the storage array under adverse conditions. Additionally, the use of XOR-based erasure coding presents a performance-optimized solution for parity calculation and recovery, extending support beyond traditional two-parity schemes and leveraging unpatented approaches based on Reed Solomon codes and Galois Field mathematics.
The auditability of the storage configuration is highlighted as a key advantage, where the simplicity of the storage TEE programs allows for thorough scrutiny to ensure adherence to operational protocols without unauthorized rollbacks. This auditing process is crucial for verifying the integrity and proper functioning of the entire storage array, thereby increasing confidence in its capability to securely manage and store sensitive information.
Furthermore, the debate around the optimal management of storage devices and ensuring data integrity and security introduces a TEE-based solution emphasizing resilience against device failure. This approach reduces operational complexity by running signer code with ephemeral keys across storage devices. The storage TEE program, devoid of private key management responsibilities, validates requests from an authorized main program concerning reading, writing, optionally copying, and securely erasing sectors. This model guarantees high availability and security, enabling stateless operation with respect to private keys and facilitating easy updates and maintenance.
Lastly, the integration of LUKSv2, comprising dm-crypt and dm-integrity, is discussed as an effective equivalent to an AE scheme. However, the complexity of ensuring atomicity of updates poses challenges, notably the &quot;log on a log&quot; problem associated with having a logged layer atop another. ZFS is presented as an exemplary solution, utilizing a single atomicity logging layer for addressing the RAID5 write hole and ensuring transactional filesystem operations, including cryptography-quality checksums and encryption. This consolidation simplifies the architecture, reducing redundancy and enhancing efficiency by treating the entire disk as a log. The discussion underscores the importance of collapsing log layers into one to avoid multiple writes and ensure efficient, secure data management and storage.</summary>
  </entry>
</feed>
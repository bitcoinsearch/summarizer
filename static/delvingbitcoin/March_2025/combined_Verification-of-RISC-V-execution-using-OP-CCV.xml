<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Verification of RISC-V execution using OP_CCV</title>
  <updated>2025-03-27T02:28:42.779025+00:00</updated>
  <author>
    <name>sjors 2025-03-26 14:08:28.692000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2023-12-21 13:59:05.005000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2025/4633_Verification-of-RISC-V-execution-using-OP-CCV.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/846_Verification-of-RISC-V-execution-using-OP-CCV.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Verification of RISC-V execution using OP_CCV</title>
    <updated>2025-03-27T02:28:42.779063+00:00</updated>
    <link href="https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313" rel="alternate"/>
    <summary>In the domain of Bitcoin script development, there's a notable discussion surrounding the implementation and potential enhancements in scripting capabilities, particularly with the utilization of certain op codes including `OP_CCV` and `OP_CAT`. A significant point of interest is the limitation posed by `CScriptNum`, which currently caps at 31 bits, posing challenges for emulating a 32-bit system within the Bitcoin scripting environment. This constraint has led to inquiries about whether allowing slightly larger numbers could simplify code and result in more compact script outputs. The dialogue extends to considerations of the Great Script Restoration project, which ambitiously aims for 64-bit support, suggesting that even minor extensions beyond the current limit could offer substantial benefits.

A recent development in this field is the introduction of a proof of concept tool designed for tracing RISCV-32 binaries execution and generating Bitcoin script for on-chain verification. This tool leverages the OP_CHECKCONTRACTVERIFY (OP_CCV) covenant opcode, as per the MATT proposal, to facilitate the inclusion of a dynamic data element in transaction outputs—a merkle root—while maintaining a static taptree structure. The utility of OP_CCV in this context underscores its capability to enforce covenants in Bitcoin scripts effectively. However, it is acknowledged that alternative covenant proposals might also be viable for achieving similar objectives. The creation and functionalities of this tool are documented and available for community feedback, with further insights accessible through a provided [GitHub repository](https://github.com/halseth/elftrace) and an overview shared via [Twitter](https://twitter.com/johanth/status/1737778712987287990). This innovation marks a step forward in exploring how Bitcoin's scripting capabilities can be expanded and optimized for more complex computational tasks and verification processes.</summary>
    <published>2025-03-26T14:08:28.692000+00:00</published>
  </entry>
</feed>

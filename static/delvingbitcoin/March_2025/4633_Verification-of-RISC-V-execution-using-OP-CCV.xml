<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Verification of RISC-V execution using OP_CCV</title>
  <updated>2025-03-27T02:28:30.996829+00:00</updated>
  <author>
    <name>sjors 2025-03-26 14:08:28.692000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Verification of RISC-V execution using OP_CCV</title>
    <updated>2025-03-27T02:28:30.996859+00:00</updated>
    <link href="https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313/2" rel="alternate"/>
    <summary>The discussion revolves around the utilization of `OP_CCV` and `OP_CAT` opcodes while primarily relying on existing ones within a programming project. A notable challenge arises from emulating a 32-bit system, particularly due to the [31-bit limitation](https://bitcoin.stackexchange.com/a/122944/4948) imposed by `CScriptNum`. This constraint complicates the code, potentially making it less efficient and leading to the production of bulkier leaves in the system's output.

The inquiry suggests that a modest increase in the numerical capacity beyond the current limit could significantly simplify the code structure and enhance its performance, without necessarily requiring a leap to a 64-bit system as proposed in the Great Script Restoration project. This latter initiative is detailed further at [Rusty Russell's blog](https://rusty.ozlabs.org/2024/01/19/the-great-opcode-restoration.html), which advocates for a comprehensive restoration of previously disabled opcodes to a 64-bit context.

Moreover, the conversation opens the floor to discussing the potential benefits of re-enabling other currently disabled opcodes. Such a move is implied to possibly offer additional solutions or workarounds to the existing limitations faced in emulation efforts and overall code efficiency. The dialogue underscores a search for optimal coding practices within the constraints of the system and the exploration of how slight modifications in opcode capabilities could yield substantial improvements in system design and functionality.</summary>
    <published>2025-03-26T14:08:28.692000+00:00</published>
  </entry>
</feed>

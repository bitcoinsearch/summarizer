<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
  <updated>2025-03-15T02:23:14.833223+00:00</updated>
  <author>
    <name>instagibbs 2025-03-14 17:01:34.406000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
    <updated>2025-03-15T02:23:14.833261+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants/1509/39" rel="alternate"/>
    <summary>The discussion revolves around the integration and potential challenges of incorporating legacy scripting within modern blockchain protocols, particularly focusing on a specific use-case deemed less compelling due to these challenges. The author suggests that if legacy script support is considered crucial, it should be introduced as a new segregated witness (segwit) output type. This approach would allow it to be evaluated based on its own merits independently from existing features. Drawing from personal experience with the P2A proposal, the writer underscores the practicality of segregating such features to facilitate clearer assessment and integration.

Further technical recommendations are made for a post-segwit/taproot environment, emphasizing two main strategies. Firstly, the transition to OP_SUCCESSx CTV, which pushes to stack in tascript++, is advocated. This method signifies a move towards more efficient and streamlined scripting processes. Secondly, the proposition of a P2CTV softfork is detailed, specifying its structure: it should either consist of a single &lt;32 bytes data&gt; segment for an upgrade hook (to ensure it wasn't intended for alternate uses), or a combination of &lt;2&gt; and &lt;32 bytes data&gt;, accommodating an unknown witness version with address capabilities. Both scenarios require empty witness data or scriptSig upon spend, maintaining identical hashing checks on spending transactions. These suggestions aim to simplify the handling of legacy scripts by removing the need to consider them, thereby streamlining the review process and enhancing overall protocol efficiency.</summary>
    <published>2025-03-14T17:01:34.406000+00:00</published>
  </entry>
</feed>

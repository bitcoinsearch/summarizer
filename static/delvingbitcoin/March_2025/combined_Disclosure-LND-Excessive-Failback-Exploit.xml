<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Disclosure: LND Excessive Failback Exploit</title>
  <updated>2025-03-05T02:24:59.823152+00:00</updated>
  <author>
    <name>ariard 2025-03-04 19:59:03.208000+00:00</name>
  </author>
  <author>
    <name>morehouse 2025-03-04 15:58:58.986000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2025/4412_Disclosure-LND-Excessive-Failback-Exploit.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2025/4411_Disclosure-LND-Excessive-Failback-Exploit.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Disclosure: LND Excessive Failback Exploit</title>
    <updated>2025-03-05T02:24:59.823194+00:00</updated>
    <link href="https://delvingbitcoin.org/t/disclosure-lnd-excessive-failback-exploit/1493" rel="alternate"/>
    <summary>The handling of HTLCs (Hashed Time-Locked Contracts) within the Lightning Network (LN) is a complex and critical aspect that ensures the security and efficiency of transactions. A recent specification patch addresses a scenario where a local node has offered an HTLC output that isn't included in the latest commitment transaction. The proposal suggests failing the corresponding received HTLC on the incoming pair of commitment transactions. This mechanism, aimed at addressing certain attacks, raises concerns regarding its economic viability due to potential disproportionate costs between the HTLC value and the on-chain fee for force-closing the channel. Despite discussions among LN developers, there was no consensus on whether this should be left to implementation policies or node settings. However, there's acknowledgment that a description of correct behavior in BOLT5 could be beneficial.

A critical bug, known as the Excessive Failback Bug, was identified in versions of LND (Lightning Network Daemon) up to 0.17.5. This bug arises from incorrect handling of on-chain resolution logic, potentially allowing attackers to steal funds by exploiting a momentary vulnerability during the update of commitment transactions. Specifically, the bug occurs when an HTLC is forwarded and later claimed by revealing the preimage, but the counterparty refuses to revoke the previous commitment. This leads LND to fail back the HTLC incorrectly if the node restarts before resolving the incoming HTLC fully, thereby causing loss of funds. An attacker can exploit this by forcing a node restart and stealing the value of the HTLC.

The issue was addressed in LND version 0.18.0 with a fix that prevents failback of HTLCs when the preimage is known, thus avoiding incorrect failure messages and potential fund loss. This solution was part of a significant overhaul of LND's sweeper system. The vulnerability's discovery and subsequent fix underline the importance of thorough audits and the need for updating the BOLT specifications to cover such edge cases.

Other lightning implementations, including CLN, eclair, and LDK, independently identified and mitigated similar vulnerabilities by incorporating checks for preimage availability in their failback logic. These proactive measures highlight the fragmented approach to addressing security issues across different implementations. The incident suggests that keeping the BOLT specifications updated with discovered vulnerabilities and their resolutions could significantly enhance the security and interoperability of LN implementations.

Users are advised to update their LND nodes to version 0.18.0 or above to protect against this vulnerability. This case exemplifies the ongoing challenges in maintaining the security of decentralized protocols like the Lightning Network and the critical role of community collaboration and open-source contribution in identifying and rectifying potential threats.</summary>
    <published>2025-03-04T19:59:03.208000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
  <updated>2025-03-18T02:27:07.593237+00:00</updated>
  <author>
    <name>instagibbs 2025-03-17 14:43:03.965000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
    <updated>2025-03-18T02:27:07.593266+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants/1509/51" rel="alternate"/>
    <summary>The discussion revolves around the complexities and considerations involved in upgrading Bitcoin script functionalities, specifically focusing on the VERIFY opcode and its implications for upgradeability. The conversation points out that without the &lt;32-byte-hash&gt; parameter, it becomes challenging to make the opcode upgradeable. However, there's an acknowledgment that the abundance of unused opcode space in a tapscript context might mitigate this concern, suggesting a readiness to leverage these upgrade hooks despite potential challenges.

A significant portion of the dialogue delves into the use-cases for the CTV (CHECKTEMPLATEVERIFY) combined with CSFS (cross-script fragment sharing), highlighting how this combination could optimize transactions by eliminating the need to include the hash within the witness data, thereby saving around 32WU (witness units). This optimization is particularly relevant for various types of transactions such as state channels, payment channels, statechains, pre-signed HTLC (Hashed Time-Locked Contract) transactions, and PTLC (Point Time-Locked Contracts) transactions, among others. The trade-off discussed involves a minor increase in complexity for tapscript CTV cases, like Ark, Timeout Trees, and settlement paths in ln-symmetry, where precommitment rather than authorization is required.

Further, the conversation touches upon the possibility of introducing a softfork NOP (No Operation) in tapscript circumstances if VERIFY behavior remains desirable, indicating a nuanced approach to integrating CTV in a way that doesn't solely focus on its standalone benefits but also considers its potential in combination with CSFS.

There's a critical examination of the legacy script system (non-segwit, excluding NOPs), described unfavorably as a "dumpster fire" that should be avoided unless absolutely necessary. This perspective is rooted in concerns about the inefficiency, safety, and clarity of changes that do not contribute to vbyte savings, enhance operational security, or simplify review processes for changes to the Bitcoin script.

Lastly, the narrative expresses a strategic viewpoint on future-proofing Bitcoin against potential chain space shortages, advocating for congestion control mechanisms as a thoughtful contingency. Despite a generally skeptical stance towards the bare CTV proposal due to its perceived lack of motivation and potential for complicating Bitcoin script maintenance, there's an openness to its implementation provided it minimizes harm and retains known capabilities from the original design philosophy.</summary>
    <published>2025-03-17T14:43:03.965000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
  <updated>2025-03-13T02:26:38.588006+00:00</updated>
  <author>
    <name>instagibbs 2025-03-12 15:36:31.830000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CTV+CSFS: Can we reach consensus on a first step towards covenants?</title>
    <updated>2025-03-13T02:26:38.588054+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants/1509/18" rel="alternate"/>
    <summary>The discussion revolves around the integration and potential benefits of TXHASH, CAT, and CSFS for committing a single signature to both a transaction and the publication of data, aiming to minimize wasted bytes without necessitating the relay of random data in the annex. The method proposed involves obtaining the desired transaction hash on the stack, appending the specified data, and signing it. This process is highlighted as an efficient alternative to using adaptor signatures for on-chain transactions, though it presents challenges in transitioning from conceptualization to practical implementation. The complexity of this approach becomes more apparent when considering multiparty settings, where the reasoning becomes significantly harder compared to a simpler 32 WU scenario.

The conversation also touches on the advantages of separating out the PTLC calculation for the transaction's overall signing, which eliminates the need for adaptor signatures and requires only a single calculation rather than one per channel update. The use of APO/(CTV/TXHASH+CSFS) is mentioned as a way to achieve this efficiency, with the added benefit of not needing adaptor signatures and potentially binding it to a specific sighash. However, there are suggestions that completely discarding BIP 119 in favor of developing a new, more efficient TXHASH BIP might be worthwhile. The current TXHASH BIP includes special TxFieldSelector options designed for flexibility but at the cost of simplicity and efficiency.

The least compelling aspect of the current approach, according to the discussion, seems to be the "bare CTXHV," which offers a modest reduction in witness bytes compared to p2tr and p2wsh but requires dealing with complexities associated with legacy scripting. A suggestion is made to consider this feature as a new segwit output type, evaluated independently based on its own merits. This proposal mirrors a similar decision made with P2A due to concerns over complexity and legacy scripting issues.</summary>
    <published>2025-03-12T15:36:31.830000+00:00</published>
  </entry>
</feed>

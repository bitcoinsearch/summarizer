<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Stats on compact block reconstructions</title>
  <updated>2025-03-25T02:27:38.776965+00:00</updated>
  <author>
    <name>0xB10C 2025-03-24 19:26:58.876000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Stats on compact block reconstructions</title>
    <updated>2025-03-25T02:27:38.777002+00:00</updated>
    <link href="https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052/24" rel="alternate"/>
    <summary>In an effort to optimize Bitcoin network performance, particularly during periods of high mempool activity, modifications and updates were applied to various nodes managed by the programmer. The adjustment of one node, referred to as `alice`, involved setting the `blockreconstructionextratxn` parameter to `10000` early in February, which led to improved performance noted from February 6th and was particularly effective between February 21st and March 6th. This enhancement suggests that handling extra transactions in block reconstruction can significantly benefit node efficiency during times when the mempool is filled with unconfirmed transactions.

Additionally, two nodes named `charlie` and `erin` were updated to incorporate a new approach for orphan transaction resolution, detailed in a GitHub pull request ([p2p: track and use all potential peers for orphan resolution 31397](https://github.com/bitcoin/bitcoin/pull/31397)). This update, however, did not show immediate improvements in their performance. Another node, `ian`, underwent a software version upgrade from Bitcoin Core `v26.1` to `v29.0rc1`, addressing previous shortcomings such as the lack of default support for `mempoolfullrbf`, which had resulted in inferior performance compared to other nodes.

The analysis also highlighted the limitation of nodes like `mike`, which do not accept inbound connections, thereby restricting the number of peers that can share transaction data with them. This limitation is juxtaposed with the observation that nodes which allow inbound connections usually perform better due to having more peers to exchange transaction information with, suggesting that the network's overall health benefits from well-connected nodes.

Explorations into improving the efficiency of compact block announcements have been initiated, focusing on the strategic prefilling of transactions that peers are likely unaware of. This strategy aims to reduce propagation time across nodes that accept inbound connections by ensuring that more nodes are informed about new blocks sooner without unnecessarily wasting bandwidth on transactions already known to peers. This optimization could be especially beneficial during periods of high mempool activity by enhancing the network's resilience and efficiency.

This initiative is currently being implemented in the branch [2025-03-prefill-compactblocks](https://github.com/0xB10C/bitcoin/commits/2025-03-prefill-compactblocks/) with ongoing work. It includes limiting the prefill amount to avoid excessive bandwidth usage and incorporating debug logging to monitor the effectiveness of this strategy in reducing wasted bandwidth. Future plans involve conducting Warnet simulations to assess the impact of these changes under various network conditions, underlining the commitment to improving Bitcoin network performance through technical innovation and strategic adjustments.</summary>
    <published>2025-03-24T19:26:58.876000+00:00</published>
  </entry>
</feed>

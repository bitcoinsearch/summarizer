<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How to linearize your cluster</title>
  <updated>2025-03-27T02:26:44.354356+00:00</updated>
  <author>
    <name>sipa 2025-03-26 15:17:30.023000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How to linearize your cluster</title>
    <updated>2025-03-27T02:26:44.354392+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-to-linearize-your-cluster/303/62" rel="alternate"/>
    <summary>In discussing the complexities and potential vulnerabilities of transaction linearization in network security, a significant point is raised about how an attacker could exploit these systems by creating multiple conflicting versions of a transaction. This action could effectively partition the network into clusters, each aware of only one version of the attacked transaction. This scenario complicates the relay of honest transactions across these partitions, especially when linearization information, which is crucial for ensuring the integrity and order of transactions, is required from senders who might not be fully aware of the specific cluster dynamics at play.

Furthermore, there's an advancement in handling such network complexities through a new implementation of the GGT (Generic Graph Theoretic) algorithm. This implementation adopts a max-height active node selection strategy, aiming to optimize the process of transaction linearization. The source code for this has been made available for review and testing on GitHub ([sipa/bitcoin commits](https://github.com/sipa/bitcoin/commits/min_cut_linearization)). Initial benchmarks of this implementation show promising results, with the ability to handle up to 64 transactions within 5-15 µs, and scaling up to 60 µs for 99 transactions. These performance metrics reflect a slight decrease in speed due to enhancements aimed at improving scalability and robustness but remain competitive when compared to previous algorithms like the spanning-forest linearization method. Despite being slower by a factor of 1.5x after incorporating concurrent reverse execution, the trade-off is deemed acceptable given the significant improvement in handling worst-case scenarios. Estimations based on the number of iterations performed suggest that the algorithm could operate in the "few ms" range for 64 transactions, highlighting its potential efficacy as a background optimizer, though its suitability for real-time application during relay remains questionable.</summary>
    <published>2025-03-26T15:17:30.023000+00:00</published>
  </entry>
</feed>

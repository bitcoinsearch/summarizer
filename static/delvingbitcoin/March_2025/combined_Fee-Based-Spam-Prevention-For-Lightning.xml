<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Fee-Based Spam Prevention For Lightning</title>
  <updated>2025-03-19T02:27:38.467773+00:00</updated>
  <author>
    <name>harding 2025-03-18 15:11:31.870000+00:00</name>
  </author>
  <author>
    <name>JohnLaw  . 2025-03-14 23:58:49.861000+00:00</name>
  </author>
  <link href="delvingbitcoin/March_2025/4568_Fee-Based-Spam-Prevention-For-Lightning.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2025/4541_Fee-Based-Spam-Prevention-For-Lightning.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Fee-Based Spam Prevention For Lightning</title>
    <updated>2025-03-19T02:27:38.467815+00:00</updated>
    <link href="https://delvingbitcoin.org/t/fee-based-spam-prevention-for-lightning/1524" rel="alternate"/>
    <summary>The critique pointed out by ClaraShk highlights a significant vulnerability within the Lightning Network (LN), particularly concerning the handling of Hashed Time-Locked Contracts (HTLCs). The issue arises when a downstream node, such as Mallory in the given example, deliberately fails to respond to an HTLC, thus forcing the upstream node, Bob, to incur hold fees and potentially substantial onchain transaction fees should he opt for a force close of the channel. This situation benefits the malicious actor financially while penalizing nodes that adhere to cooperative principles. The scenario becomes more complex when involving Just-In-Time (JIT) channels, where a fake customer, part of the malicious scheme, causes the Lightning Service Provider (LSP) to pay hold fees until a possible double spend of the channel opening transaction is confirmed. 

In response to these challenges, there have been advancements based on initial proposals by Jager and Teinturier, which aimed at incorporating upfront fees and time-dependent reverse hold fees to cover routing costs effectively. These enhancements, further developed with inputs from Riard and Naumenko, introduce mechanisms like secrets for payment confirmation and burn outputs within transactions to prevent fee misappropriation and foster cooperation among nodes. The revised protocols outline three types of fees - upfront fees, hold fees, and success fees - each designed to fairly compensate for the operational costs, delays, and successful payment processing within the LN.

The methodologies for calculating upfront fees involve either the use of hash preimages or discrete logarithms to ensure privacy while enabling accurate fee distribution. Hold fees, conversely, are approached through a staking mechanism where nodes anticipate maximum fees against potential delays, with actual fees calibrated according to the delay period exceeding a set grace period. The strategy for fund burning under certain violations or unilateral channel closures aims to minimize losses by encouraging adherence to protocol and cooperative behavior.

Overall, these protocol improvements represent a strategic effort to mitigate spam and improve efficiency and security within the Lightning Network. By addressing vulnerabilities and incentivizing positive participation, the LN moves closer to achieving a secure, efficient, and cooperative ecosystem, essential for its long-term success and adoption.</summary>
    <published>2025-03-18T15:11:31.870000+00:00</published>
  </entry>
</feed>

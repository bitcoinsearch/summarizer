<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
  <updated>2024-10-10T02:19:32.999846+00:00</updated>
  <author>
    <name>ZmnSCPxj 2024-10-09 14:04:01.350000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
    <updated>2024-10-10T02:19:32.999877+00:00</updated>
    <link href="https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/27" rel="alternate"/>
    <summary>In the complex scenario of the "Inversion of Timelock Default" within cryptographic payment protocols, a unique strategy emerges for handling unilateral exits and HTLC (Hash Time-Locked Contracts) timeouts. This strategy revolves around the interaction between a client and a Lightning Service Provider (LSP), especially when a client chooses to passively wait for a timelock to expire, thereby compelling the LSP to initiate and finance a unilateral exit. The critical point here is that the client, unless acting as a forwarder which is not the usual case, isn't obligated to enforce HTLC timeouts for outgoing payments. This approach leverages the inherent structure of HTLCs and the timeout mechanisms to protect the interests of end-users.

Should an HTLC's timeout period be shorter than the overall timeout tree, the LSP faces a conundrum. If the LSP fails to forward the payment to its final destination and also refuses to fail the HTLC, it essentially denies service to the client. In such instances, clients have the leverage to force a passive unilateral exit to reclaim their funds, including those tied in outgoing HTLCs. This situation underscores a fundamental principle: the LSP gains no advantage from withholding service or failing to act because the repercussions directly impact their relationship with the client, possibly leading to loss of business.

Moreover, if the LSP attempts to forward the payment after the client's HTLC has expired, in hopes of learning the preimage, they do so at their own peril. The client might still possess the necessary onchain funds to cover exogenous fees, and can utilize P2A outputs. A scenario where a client, particularly one without sufficient funds, could switch to a competing LSP offering to penalize the non-compliant LSP, further illustrates the delicate balance of incentives and risks within this system. Hence, LSPs are incentivized to honor HTLC timeouts and fail them before expiration to avoid negative consequences.

The discussion also touches on the assumption that LSPs, even when merely forwarding payments, are expected to manage the financial burden of unilateral closes through onchain fees. This expectation extends to enforcing timeouts on HTLCs offered to the client, emphasizing the role of LSPs in maintaining the integrity and fluidity of transactions within this framework. The underlying assumption remains that the typical client does not engage in forwarding activities, simplifying their interaction within the system and focusing on the direct relationship between client and LSP regarding HTLC management and unilateral exit protocols.</summary>
    <published>2024-10-09T14:04:01.350000+00:00</published>
  </entry>
</feed>

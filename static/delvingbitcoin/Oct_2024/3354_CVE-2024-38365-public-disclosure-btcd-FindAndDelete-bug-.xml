<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
  <updated>2024-10-13T02:23:20.614203+00:00</updated>
  <author>
    <name>AntoineP 2024-10-12 09:22:50.011000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
    <updated>2024-10-13T02:23:20.614235+00:00</updated>
    <link href="https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184/5" rel="alternate"/>
    <summary>The discussion revolves around the intricacies of achieving a chain fork utilizing specific operational codes (opcodes) and the essential role of public key recovery in this process. It's highlighted that merely selecting opcodes such as OP_PICK or OP_ROLL, which facilitate stack inspection, might not suffice for the intended mechanism within the `scriptCode`. The critical aspect underlined is the commitment of the signature to the `scriptCode`, necessitating a reciprocal commitment from the `scriptCode` to the signature itself. This mutual commitment introduces a complexity that might not be easily bypassed without resorting to public key recovery.

Further explanation dives into the limitations of current signature modes, with an emphasis on `ANYPREVOUT` and its unique characteristic of not committing to the `scriptCode`. This feature stands out because it potentially offers a workaround to the mutual commitment challenge mentioned earlier. However, the dialogue opens up a query regarding the feasibility of achieving the desired outcome—creating a chain fork—without relying on public key recovery. The inquiry suggests that there might be an alternative method to accomplish this goal, prompting a detailed explanation on how such a process could be executed absent the public key recovery mechanism.</summary>
    <published>2024-10-12T09:22:50.011000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Libbitcoin for Core people</title>
  <updated>2024-10-30T02:21:34.879819+00:00</updated>
  <author>
    <name>AntoineP 2024-10-29 13:53:22.156000+00:00</name>
  </author>
  <author>
    <name>instagibbs 2024-10-29 13:06:58.632000+00:00</name>
  </author>
  <author>
    <name>AntoineP  . 2024-10-28 19:09:55.723000+00:00</name>
  </author>
  <link href="delvingbitcoin/Oct_2024/3442_Libbitcoin-for-Core-people.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3439_Libbitcoin-for-Core-people.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3432_Libbitcoin-for-Core-people.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Libbitcoin for Core people</title>
    <updated>2024-10-30T02:21:34.879878+00:00</updated>
    <link href="https://delvingbitcoin.org/t/libbitcoin-for-core-people/1222/3" rel="alternate"/>
    <summary>Eric Voskuil's comparison of Libbitcoin's Initial Block Download (IBD) performance with that of Bitcoin Core reveals significantly faster speeds achieved by Libbitcoin, up to 15 times when the `-assumevalid` option is utilized. This notable difference in performance can be attributed to Libbitcoin's unique operational methodologies and database management strategies. Unlike Bitcoin Core, Libbitcoin implements an event-based system that leverages the [Boost ASIO](https://www.boost.org/doc/libs/1_86_0/doc/html/boost_asio/overview/core/async.html) framework to facilitate concurrent operations, a key factor in its enhanced performance.

Libbitcoin’s database is designed to support efficient data management and validation processes, featuring a relational structure with tables for headers, transactions, inputs, and outputs, as well as indices for linking confirmations to headers and transactions to headers and their spending transactions. This architecture enables Libbitcoin to streamline block validation by dividing it into tasks with different sequencing requirements. For instance, initial checks on blocks are performed without needing sequence, while transactions are processed concurrently, allowing for faster script checks and validations that require only partial ordering.

Further enhancing its IBD performance, Libbitcoin processes downloads, validations, and confirmability stages in parallel and employs strategies to omit certain transaction validations, similar to Bitcoin Core's `-assumevalid` feature. The system's approach to reorganization involves simple removals from indices, indicating a flexible adaptation to blockchain changes. Although pruning remains unimplemented and not a priority, the transaction table supports both confirmed and unconfirmed transactions, with future updates expected to address minimum fee rates and conflict graphs akin to Bitcoin Core's mechanisms.

On the networking aspect, Libbitcoin aims to optimize resource utilization by initially connecting with a hundred outbound peers, with plans to make this number dynamic post-IBD. Peer selection prioritizes handshake speed and response rates, incorporating measures against slow or stalled connections. Despite these advancements, Libbitcoin has yet to fully implement DoS protection and must consider its use of an outdated libsecp version and lack of native SHA256 acceleration when comparing performance metrics.

The clarification of terminology, such as distinguishing between "milestone" and `-assumevalid`, highlights the specific features and operations of Libbitcoin's architecture. This exposition of Libbitcoin’s methodology showcases its innovative approach to enhancing efficiency and scalability in the cryptocurrency domain, as illuminated by Voskuil’s insights.</summary>
    <published>2024-10-29T13:53:22.156000+00:00</published>
  </entry>
</feed>

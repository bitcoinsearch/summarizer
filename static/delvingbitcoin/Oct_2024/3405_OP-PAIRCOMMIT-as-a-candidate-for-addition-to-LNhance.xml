<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_PAIRCOMMIT as a candidate for addition to LNhance</title>
  <updated>2024-10-26T02:16:16.804844+00:00</updated>
  <author>
    <name>moonsettler 2024-10-25 19:06:11.290000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_PAIRCOMMIT as a candidate for addition to LNhance</title>
    <updated>2024-10-26T02:16:16.804876+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-paircommit-as-a-candidate-for-addition-to-lnhance/1216/4" rel="alternate"/>
    <summary>In the discussion of Bitcoin script optimizations, a comparison is made between the use of `OP_CAT` to emulate `OP_PAIRCOMMIT` and other existing redundancies within Bitcoin script aimed at smaller optimizations. The complexity and cost implications of using `OP_CAT` for such purposes are acknowledged. Two specific script examples are provided to illustrate the point. The first example demonstrates a more complex sequence involving operations such as `OP_SWAP`, `OP_SIZE`, `OP_ADD`, `OP_TOALTSTACK`, and `OP_CAT`, culminating in multiple concatenations and a final `OP_HASH256` operation. The alternative, simpler approach directly uses three consecutive `OP_HASH256` operations interspersed with `OP_SWAP`. This contrast highlights the trade-offs between complexity and efficiency in script optimization strategies.</summary>
    <published>2024-10-25T19:06:11.290000+00:00</published>
  </entry>
</feed>

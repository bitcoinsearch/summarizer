<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
  <updated>2024-10-03T02:20:48.416186+00:00</updated>
  <author>
    <name>ZmnSCPxj 2024-10-02 16:41:04.524000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
    <updated>2024-10-03T02:20:48.416216+00:00</updated>
    <link href="https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/16" rel="alternate"/>
    <summary>The concept discussed revolves around the structure and functionality of a sub-tree within a Pseudo-Spilman Multiparty Channel Factory, focusing on liquidity transactions without necessitating blockchain interaction. The initial configuration showcases channels between various parties (A, B, C, D, and L), highlighting the ability for A, B, C, and D to procure liquidity from an LSP (Liquidity Service Provider) provided that certain parties are online. This setup aims at facilitating liquidity purchases while mitigating the need for direct blockchain engagement.

An alternative representation of the initial sub-tree is proposed to streamline operations by eliminating one layer of Decker-Wattenhofer, thereby reducing the maximum total relative lock time (nSequence). This modification not only simplifies the transaction process but also allows for similar liquidity buying operations as the original structure without directly interacting with the blockchain. In this model, liquidity purchases by any party (A, B, C, D) from the LSP are conducted through a revised channel layout, effectively removing unnecessary complexity and reducing potential locktime liabilities.

However, the new scheme introduces the risk of unsafe direct transaction replacements in scenarios involving more than two participants, where other participants could potentially be manipulated by the LSP. To counteract this, a mechanism is implemented that obligates the LSP to spend each liquidity stock UTXO only once, thus safeguarding against double-spending and ensuring the integrity of the operation. This approach addresses potential vulnerabilities inherent in real Spilman channels when dealing with multiple participants.

Despite these advancements, the updated wide leaf model bears its own set of challenges, particularly concerning unilateral closes and the management of inbound liquidity. If a client has previously purchased liquidity, any unilateral close would necessitate additional blockchain space, presenting a disadvantage compared to the original sub-tree. Moreover, the introduction of new channels for inbound liquidity complicates the handling of forwarded HTLCs, possibly requiring local multipath solutions.

Further complications arise with the concept of internal splicing, aimed at consolidating liquidity into a single channel. This approach, while theoretically appealing, is deemed unsafe due to the potential for the LSP to invalidate splice transactions, especially if the LSP controls other participant entities. As such, the preference shifts towards using cut-through transactions for replacing existing states, which, unlike splicing, ensures safety and reliability in the operation of offchain mechanisms.

The discussion also explores incentivizing strategies for LSPs to cover mining fees during unilateral exits, introducing an "assisted exit" protocol. This setup encourages the retention of clients within the mechanism until they can perform an assisted exit, at which point the LSP can recover funds from the factory. The protocol involves clients signing two distinct transactions related to the liquidity stock, one for creating new channels (state transaction) and another as a burn transaction to prevent the LSP from retracting funds improperly. This dual-transaction model aims to balance the interests of both the LSP and the clients, ensuring fair and secure operations within the Pseudo-Spilman Multiparty Channel Factory environment.</summary>
    <published>2024-10-02T16:41:04.524000+00:00</published>
  </entry>
</feed>

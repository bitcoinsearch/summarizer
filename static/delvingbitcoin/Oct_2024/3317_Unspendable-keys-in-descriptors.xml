<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Unspendable keys in descriptors</title>
  <updated>2024-10-04T02:19:19.100994+00:00</updated>
  <author>
    <name>andrewkozlik 2024-10-03 15:18:51.917000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Unspendable keys in descriptors</title>
    <updated>2024-10-04T02:19:19.101028+00:00</updated>
    <link href="https://delvingbitcoin.org/t/unspendable-keys-in-descriptors/304/26" rel="alternate"/>
    <summary>The discussion highlights the benefits and approaches for deriving chain code from Extended Public Keys (XPUBs) in a manner that is independent of their order. This method would address concerns related to the sequence in which wallet policies or descriptors are applied, as well as unexpected behaviors observed with certain multi-signature setups. Proposed solutions include sorting the XPUBs before hashing the concatenated list, hashing each XPUB and then applying an XOR operation on the results, and hashing each XPUB followed by addition modulo 2^256. The latter two suggestions aim to overcome the issue where repeated XPUBs might negate each other in the calculation process, with the addition modulo 2^256 explicitly designed to ensure repeated XPUBs do not cancel out.

An alternative suggestion involves simplifying the process by focusing on a specific part of the XPUB, such as the compressed public key or the chain code itself, for direct use in calculations. This could potentially streamline implementation by allowing direct application of XOR or mod 2^256 sums without the need for hashing. However, this raises concerns about the possibility of malicious manipulation of chain codes by participants aiming to skew the resulting value to their advantage. Despite these concerns, it's argued that the risk does not significantly detract from the proposed methods' feasibility, as similar risks exist with the publication of deceptive XPUBs regardless of the calculation method employed.</summary>
    <published>2024-10-03T15:18:51.917000+00:00</published>
  </entry>
</feed>

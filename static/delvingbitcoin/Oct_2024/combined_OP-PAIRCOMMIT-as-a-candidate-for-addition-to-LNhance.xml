<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - OP_PAIRCOMMIT as a candidate for addition to LNhance</title>
  <updated>2024-10-29T02:21:51.142726+00:00</updated>
  <author>
    <name>moonsettler 2024-10-28 12:05:19.886000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2024-10-28 11:16:51.953000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-10-25 21:50:45.243000+00:00</name>
  </author>
  <author>
    <name>bytes  . 2024-10-25 19:22:36.211000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-10-25 19:11:15.643000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-10-25 19:06:11.290000+00:00</name>
  </author>
  <author>
    <name>bytes  . 2024-10-25 17:57:14.444000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-10-25 14:38:37.937000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2024-10-25 14:34:33.286000+00:00</name>
  </author>
  <link href="delvingbitcoin/Oct_2024/3431_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3430_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3409_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3407_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3406_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3405_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3404_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3402_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3401_OP-PAIRCOMMIT-as-a-candidate-for-addition-to-LNhance.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - OP_PAIRCOMMIT as a candidate for addition to LNhance</title>
    <updated>2024-10-29T02:21:51.142799+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-paircommit-as-a-candidate-for-addition-to-lnhance/1216/9" rel="alternate"/>
    <summary>The discussion begins with addressing a potential update to the Bitcoin Improvement Proposal (BIP) concerning CheckTemplateVerify (CTV). It is suggested that having CTV return an error for 0-byte hashes could simplify the verification process by eliminating the need for a `DUP VERIFY` step. This suggestion stems from the observation that there's seldom a legitimate reason to include a 0-size argument for CTV. Additionally, it is mentioned that the PC code on a specific branch was broken, but this issue has since been resolved, as indicated by a link to a pull request on GitHub ([GitHub](https://github.com/lnhance/bitcoin/pull/6)).

The conversation shifts to the topic of optimizing SHA256 iterations, particularly within the context of LN-Symmetry, by focusing on reducing the number of hashing cycles needed in specific scenarios. For instance, when considering a situation involving a 7-byte balance commitment plus a 32-byte CTV hash without any HTLCs in flight, resulting in a total preimage size of 55 bytes, it is proposed that this can fit into a single block with the SHA256 length commitment. Concerns are raised about length redistribution attacks due to the concatenation of two preimages, given CTV's design for only 32-byte templates. A couple of hashing techniques are proposed to mitigate these concerns and enhance security, including one that involves using a custom hash function designed to significantly alter the output for minor changes in input, aimed at mitigating stack element resizing attacks.

The email highlights issues surrounding the integration of new opcodes and their impact on project timelines and complexity. There is a debate over prioritizing simplicity in development versus integrating advanced functionalities like those offered by OP_CAT. The discussion leans towards activating OP_CTV before embarking on more complex opcode integrations. This reflects a broader dialogue on development priorities, suggesting a step-by-step approach might be beneficial in the long run.

Moreover, the utilization of Vector Commitments in LN-Symmetry is discussed as a method to enhance security and simplify contract scripting. Employing `OP_PAIRCOMMIT` to commit to a vector of stack elements is presented as an effective strategy against witness malleability, highlighting the importance of secure scripting practices in blockchain contracts. The detailed exploration into preliminary specifications for managing state templates emphasizes the need for accurate and secure scripting practices, showcasing a structured approach to handling contract states and securing interactions on the blockchain.

Lastly, an optimization technique for SHA256 iterations in LN-Symmetry is outlined, focusing on pre-computing the Tag as a mid-state to reduce validation processes. This technique aims to address concerns related to length redistribution attacks and proposes a solution involving the alteration of expected bit changes in the preimage for enhanced security. A link to a GitHub pull request is provided, offering insights into proposed technical adjustments to improve efficiency and security in the context of LN-Symmetry with CTV.</summary>
    <published>2024-10-28T12:05:19.886000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
  <updated>2024-10-09T02:19:15.075652+00:00</updated>
  <author>
    <name>Greg Sanders 2024-10-08 14:11:40.297000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
    <updated>2024-10-09T02:19:15.075681+00:00</updated>
    <link href="https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/23" rel="alternate"/>
    <summary>The concept of client-side commitment transactions involves leveraging multiple versions with varying feerates, which are primarily funded by the client's own resources, including any HTLCs (Hashed Time-Locked Contracts) they might have offered. This approach was influenced by Peter Todd's suggestion to make transaction fees endogenous, aiming for a more unified and efficient fee structure within a single transaction. However, this method introduces complexities, particularly in how it interacts with the underlying blockchain layer. Since the blockchain cannot definitively ascertain the most current state due to the nature of these transactions, determining the exact amount of "own funds" available for fee allocation during a dispute or challenge period becomes problematic.

This reliance on an uncertain state further complicates the security model, especially considering the penalty mechanisms that are crucial for enforcing honesty within these transactions. The strategy does not fully account for potential collaboration between miners and counterparties, which could lead to exploitation by replaying outdated states with higher attached fees, thereby defrauding the Lightning Service Provider (LSP). 

An alternative mentioned involves utilizing "non-contentious" funds within a transaction tree, as explored in the Timeout Tree paper. These funds, being off-chain, could theoretically simplify the use of funds without the aforementioned complexities. However, this solution would require locking liquidity for each user, a requirement that raises questions about scalability and practicality. The original discussion admits a lack of complete understanding regarding the implementation details of this proposed construction, highlighting the need for further exploration and clarification in developing a viable and secure method for managing client-side commitment transactions.</summary>
    <published>2024-10-08T14:11:40.297000+00:00</published>
  </entry>
</feed>

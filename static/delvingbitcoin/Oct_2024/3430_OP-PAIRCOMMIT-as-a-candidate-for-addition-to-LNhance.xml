<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>OP_PAIRCOMMIT as a candidate for addition to LNhance</title>
  <updated>2024-10-29T02:21:31.301605+00:00</updated>
  <author>
    <name>ajtowns 2024-10-28 11:16:51.953000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>OP_PAIRCOMMIT as a candidate for addition to LNhance</title>
    <updated>2024-10-29T02:21:31.301636+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-paircommit-as-a-candidate-for-addition-to-lnhance/1216/8" rel="alternate"/>
    <summary>The discussion focuses on optimizing the use of SHA256 iterations for LN-Symmetry, highlighting that minimizing these iterations is not seen as crucial by some. It is pointed out that the computational difference in hashing varying byte sizes is minor compared to the operations involved in checking signatures. A proposed method for constructing a hash involves a sequence of operations starting with balance and CTV hash inputs, followed by multiple SHA256 hashes and concatenations. This method accommodates a 7-byte balance commitment combined with a 32-byte CTV hash, yielding a preimage size of 55 bytes which fits within a single SHA256 block.

The concern raised revolves around LN-Symmetry in conjunction with CTV (CHECKTEMPLATEVERIFY), particularly regarding the potential for length redistribution attacks due to the fixed 32-byte template requirement of CTV. This stipulation could inadvertently facilitate upgradeability issues since CTV acts as a no-operation (NOP) for non-32-byte templates, a feature designed for future-proofing. To mitigate these concerns while still supporting the goal of minimal hashing and ensuring compatibility with potential CTV upgrades, an intricate method involving various operations is suggested. This method ensures that only specific preimage sizes are processed, thereby preventing the aforementioned length redistribution attacks.

Further, to accommodate the uncertain nature of future CTV upgradeability without compromising security, an elaborate construction is recommended. This includes a series of duplications, verifications, and conditional checks before finalizing the SHA256 hash. The suggestion also mentions a potential update to the BIP (Bitcoin Improvement Proposal) that could streamline this process by eliminating certain steps if a zero-byte hash results in a CTV error, indicating a more efficient approach to handling such cryptographic operations and maintaining system integrity amidst upgradeability considerations.</summary>
    <published>2024-10-28T11:16:51.953000+00:00</published>
  </entry>
</feed>

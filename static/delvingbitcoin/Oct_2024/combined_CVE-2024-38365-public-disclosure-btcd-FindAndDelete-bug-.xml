<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
  <updated>2024-10-13T02:23:33.575581+00:00</updated>
  <author>
    <name>AntoineP 2024-10-12 09:22:50.011000+00:00</name>
  </author>
  <author>
    <name>ariard  . 2024-10-11 19:13:31.221000+00:00</name>
  </author>
  <author>
    <name>AntoineP  . 2024-10-11 06:47:49.557000+00:00</name>
  </author>
  <author>
    <name>David Harding  . 2024-10-10 23:22:25.205000+00:00</name>
  </author>
  <author>
    <name>AntoineP  . 2024-10-10 09:02:17.756000+00:00</name>
  </author>
  <link href="delvingbitcoin/Oct_2024/3354_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3351_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3349_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3347_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3340_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
    <updated>2024-10-13T02:23:33.575635+00:00</updated>
    <link href="https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184/5" rel="alternate"/>
    <summary>The discussion delves into the intricacies of Bitcoin's scripting capabilities, specifically focusing on the potential to achieve outcomes similar to those facilitated by public key recovery without actually employing it. The conversation touches upon the utility of opcodes such as OP_PICK and OP_ROLL for manipulating or inspecting the stack within the `scriptCode`, suggesting alternative approaches to addressing script-related vulnerabilities. This exploration points to a deeper understanding of Bitcoin's script execution mechanisms and identifies sophisticated methods for script manipulation that could have implications for network consensus and integrity. It raises concerns about how discrepancies in the handling of ECDSA signature lengths and dummy data by different versions of Bitcoin nodes could lead to vulnerabilities, especially given the behavior of pre-0.24.2 btcd peers in removing valid consensus signatures before verification.

A programmer has developed a Bitcoin Core unit test patch designed to generate specific transactions, highlighting hesitance to publicly share this information due to potential misuse by individuals with minimal technical skills. The intention is to initially share the patch privately to mitigate the risk of facilitating malicious activities, with considerations for broader disclosure at a later time. This approach underscores the balance between transparency and security in the dissemination of potentially sensitive information.

Public key recovery is presented as a valuable technique in cryptographic systems, enabling the derivation of a public key from a digital signature independently. Its application extends to creating scripts for signature verification, where it facilitates efficiency in data storage and transmission while enhancing security protocols. This method allows for the validation of transaction authenticity without direct exposure of the public key, offering advantages in environments where anonymity or identity protection is paramount.

Niklas GÃ¶gge and Antoine Poinsot have identified a critical flaw in Btcd software versions prior to 0.24.2, noting a deviation from legacy signature verification consensus rules established by Bitcoin Core. Their discovery centers on the `removeOpcodeByData` implementation in Btcd, which contrasts with the expected behavior of removing only exact matches of the signature being verified, potentially allowing for the exploitation of vulnerable nodes. This vulnerability, stemming from a 2014 commit meant to address a discrepancy highlighted by a new Bitcoin Core unit test, was reported to Olaoluwa Osuntokun, leading to collaborative efforts to resolve the issue. Acknowledged through a bug bounty, the resolution process involved detailed investigation, communication of findings, reservation of CVE identifiers, and the introduction of a covert fix in version 0.24.2 of the software. The responsible disclosure process exemplifies a comprehensive approach to identifying, communicating, and rectifying a significant security concern within the Bitcoin network.</summary>
    <published>2024-10-12T09:22:50.011000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
  <updated>2024-10-11T02:20:02.814953+00:00</updated>
  <author>
    <name>David Harding 2024-10-10 23:22:25.205000+00:00</name>
  </author>
  <author>
    <name>AntoineP 2024-10-10 09:02:17.756000+00:00</name>
  </author>
  <link href="delvingbitcoin/Oct_2024/3347_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Oct_2024/3340_CVE-2024-38365-public-disclosure-btcd-FindAndDelete-bug-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
    <updated>2024-10-11T02:20:02.814996+00:00</updated>
    <link href="https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184/2" rel="alternate"/>
    <summary>Niklas GÃ¶gge and Antoine Poinsot have highlighted a significant issue in the implementation of legacy signature verification by btcd nodes prior to version 0.24.2. Their collaborative research unveils that the incorrect execution of consensus rules for legacy signature verification could potentially allow an individual to exclude vulnerable btcd nodes from the network at negligible cost. This problem stems from the way the script interpreter of a Bitcoin node reconstructs the signed message and verifies the signature against it, where the original algorithm is detailed extensively on a [Bitcoin wiki page](https://en.bitcoin.it/wiki/OP_CHECKSIGHow_it_works). The core of the issue lies in the `removeOpcodeByData` function used by btcd, which, unlike Bitcoin Core's `FindAndDelete` method, removes any data push from the executed Script containing the signature, leading to a discrepancy in handling transactions.

This vulnerability was introduced in 2014 through a specific commit, identified to address a previously demonstrated consensus incompatibility with a new Bitcoin Core unit test. Utilizing public key recovery, it is possible to craft a Script containing both a signature check and an additional data push with the signature and extraneous padding. Such Scripts can be committed to in a P2SH output, spendable by a standard transaction deemed valid by Bitcoin Core but invalid by affected btcd nodes. This discovery underscores the critical nature of precise implementation in consensus algorithms to maintain network integrity.

The issue's acknowledgment led to a coordinated effort to rectify the vulnerability, culminating in the reservation of CVE identifiers [CVE-2024-36051](https://www.cve.org/CVERecord?id=CVE-2024-36051) through Mitre and [CVE-2024-38365](https://github.com/btcsuite/btcd/security/advisories/GHSA-27vh-h6mc-q6g8) through GitHub by the researchers. A covert fix was integrated and released in btcd version 0.24.2, ensuring compatibility and security are upheld. The timeline of events from the initial discussion to public disclosure showcases the diligent and responsive actions taken by all parties involved to mitigate the risk posed by this vulnerability.</summary>
    <published>2024-10-10T23:22:25.205000+00:00</published>
  </entry>
</feed>

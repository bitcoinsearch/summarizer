<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Unspendable keys in descriptors</title>
  <updated>2024-10-03T02:19:10.346214+00:00</updated>
  <author>
    <name>andrewtoth 2024-10-02 15:40:06.265000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Unspendable keys in descriptors</title>
    <updated>2024-10-03T02:19:10.346251+00:00</updated>
    <link href="https://delvingbitcoin.org/t/unspendable-keys-in-descriptors/304/25" rel="alternate"/>
    <summary>The discussion centers around a technical challenge associated with the use of left-to-right ordering in programming, specifically in the context of key arrangement. The problem arises when implementing `sortedmulti_a`, a descriptor that is sensitive to the sequence in which keys are added. Ideally, a descriptor like `sortedmulti_a(k,KEY_1,KEY_2,..,KEY_N)` should be functionally equivalent to one where the keys are arranged in reverse order, such as `sortedmulti_a(k,KEY_N,KEY_N-1,..,KEY_1)`. However, under the current approach, altering the order of keys leads to the generation of different chaincodes. This issue highlights a significant concern regarding the consistency and predictability of outputs in systems relying on key ordering, necessitating a review or modification of the method to ensure that the order in which keys are introduced does not impact the resulting chaincode.</summary>
    <published>2024-10-02T15:40:06.265000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
  <updated>2024-10-16T02:22:55.867829+00:00</updated>
  <author>
    <name>AntoineP 2024-10-15 08:57:22.931000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)</title>
    <updated>2024-10-16T02:22:55.867854+00:00</updated>
    <link href="https://delvingbitcoin.org/t/cve-2024-38365-public-disclosure-btcd-findanddelete-bug/1184/7" rel="alternate"/>
    <summary>Exploring the intricacies of Bitcoin's scripting mechanisms, a critical understanding emerges around the use of `OP_CODESEPARATOR` in relation to Segregated Witness (SegWit) transactions. The discussion highlights that a signature does not necessarily need to commit to the `scriptCode`. This is particularly significant because by leveraging `OP_CODESEPARATOR`, a user can extract the signature from the `scriptCode`. This method effectively circumvents potential vulnerabilities associated with the `FindAndDelete` function, primarily because once the signature is separated using `OP_CODESEPARATOR`, it becomes immune to the `FindAndDelete` discrepancy as there is no signature within the `scriptCode` for it to locate and manipulate. This aspect of Bitcoin's scripting language underscores a nuanced layer of security provided against certain types of exploits through its design, ensuring robustness in transaction integrity.</summary>
    <published>2024-10-15T08:57:22.931000+00:00</published>
  </entry>
</feed>

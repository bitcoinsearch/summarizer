<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Expanding on BOLT12</title>
  <updated>2024-10-06T02:24:30.334043+00:00</updated>
  <author>
    <name>andyschroder 2024-10-05 15:57:36.582000+00:00</name>
  </author>
  <author>
    <name>andyschroder  . 2024-09-30 06:32:47.142000+00:00</name>
  </author>
  <author>
    <name>andyschroder  . 2024-09-29 04:18:33.934000+00:00</name>
  </author>
  <link href="delvingbitcoin/Oct_2024/3326_Expanding-on-BOLT12.xml" rel="alternate"/>
  <link href="delvingbitcoin/Sept_2024/3304_Expanding-on-BOLT12.xml" rel="alternate"/>
  <link href="delvingbitcoin/Sept_2024/3280_Expanding-on-BOLT12.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Expanding on BOLT12</title>
    <updated>2024-10-06T02:24:30.334100+00:00</updated>
    <link href="https://delvingbitcoin.org/t/expanding-on-bolt12/1167/3" rel="alternate"/>
    <summary>The discussion opens with the observation that in BOLT12 specifications, there is no human-readable prefix defined for invoices, leading to the proposal of using `lni` as a prefix. This suggestion is underscored by its current utilization in CLN's fetchinvoice and pay RPC commands, as detailed in their documentation. The proposal itself is considered more appropriate as a Bitcoin Lightning Improvement Proposal (bLIP) rather than an amendment to the existing BOLT specifications, highlighting its optional nature and ensuring that the foundational operations of BOLT12 are not impacted for users who may opt out of this feature. For those interested in exploring this concept further, a detailed examination is provided at [delvingbitcoin.org](https://delvingbitcoin.org/t/bolt-12-trusted-contacts/1046), offering insights into the implementation of trusted contacts within BOLT12 that aims to extend its capabilities without compromising its core functionality.

The narrative progresses by acknowledging a significant milestone in BOLT12's development, marked by its integration into the main repository, an action documented in a specific [pull request](https://github.com/lightning/bolts/pull/798). This incorporation signifies the beginning of its practical application and opens discussions on potential enhancements to refine its utility. A focal point of these discussions is the structural flexibility of BOLT12, particularly the requirement for `invoice_request` and `invoice` writers to duplicate all fields from their predecessors, including unknown ones. This aspect suggests a pathway for introducing additional backward-compatible fields. Among the notable suggestions is the inclusion of a `user` field within the `invoice_request`, alongside the proposition of a boolean `refund_invoice_required` field for `offer` writers, aimed at simplifying the refund process by automating it through encoded invoices prefixed with `lni`.

Further proposals include the establishment of an `offer_max_amount` within the `offer` structure to set transaction limits, addressing operational concerns such as inventory and liquidity issues, and managing customer expectations. While direct enforcement through HTLCs might be challenging, setting clear upfront limits could mitigate attempts to exceed agreed transaction volumes. Additionally, the absence of an expiration mechanism for `invoice_request`s is highlighted, suggesting the need for an expiry similar to that of `offers` and `invoices` to manage offer lifecycles more effectively and ensure transaction relevance remains within a mutually understood timeframe.

In summary, these discussions and proposals reflect a concerted effort within the community to enhance BOLT12, inviting feedback to guide its evolution in addressing the diverse needs and challenges faced in real-world implementations.</summary>
    <published>2024-10-05T15:57:36.582000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Proving UTXO set inclusion in zero-knowledge</title>
  <updated>2024-09-18T02:15:15.814592+00:00</updated>
  <author>
    <name>halseth 2024-09-17 08:50:38.823000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Proving UTXO set inclusion in zero-knowledge</title>
    <updated>2024-09-18T02:15:15.814626+00:00</updated>
    <link href="https://delvingbitcoin.org/t/proving-utxo-set-inclusion-in-zero-knowledge/1142/6" rel="alternate"/>
    <summary>The utilization of the utreexo data structure over a regular merkle tree for handling the UTXO set is highlighted as a strategic choice due to its straightforward conversion into a deterministic, per-block utreexo representation. This decision underscores the importance of ensuring that data structures not only accommodate current needs but are also seamlessly adaptable to specific requirements such as determinism in block representation. 

The challenge of proving the continuous openness of a channel is acknowledged, suggesting a potential solution could involve requiring proofs to be periodically updated, or "refreshed," every predetermined number of blocks. Additionally, incorporating a proof of the channel's age could enhance the robustness of the verification process. This approach addresses concerns regarding the temporal validity of channels, ensuring that proofs remain relevant and accurate over time.

There's an emphasis on the need to prove that the correct public key, rather than a blinded version, is committed within the utreexo structure. This distinction is crucial for maintaining integrity and transparency in transactions, ensuring that the actual public keys involved are verifiable. The current inability to detect the reuse of public keys for multiple proofs is identified as a limitation, particularly for applications like the Lightning Network (LN). Addressing this issue by adding functionality to identify key reuse would significantly improve the system's security and trustworthiness for LN transactions.</summary>
    <published>2024-09-17T08:50:38.823000+00:00</published>
  </entry>
</feed>

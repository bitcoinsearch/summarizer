<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Who will run the CoinJoin coordinators?</title>
  <updated>2024-09-22T02:23:02.474065+00:00</updated>
  <author>
    <name>1440000bytes 2024-09-21 01:44:52.889000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Who will run the CoinJoin coordinators?</title>
    <updated>2024-09-22T02:23:02.474096+00:00</updated>
    <link href="https://delvingbitcoin.org/t/who-will-run-the-coinjoin-coordinators/934/18" rel="alternate"/>
    <summary>Joinstr presents a notable advancement in addressing communication coordination and centralization issues compared to Joinmarket by eliminating the need for hardcoded addresses for bootstrapping. This innovative approach grants users the autonomy to select their relays, significantly enhancing user flexibility and control over their transaction processes. Furthermore, Joinstr leverages the SIGHASH ALL | SIGHASH ANYONECANPAY signature hash type, offering a more versatile and secure method for transaction signing that aligns with users' specific needs.

The potential for upgrading Joinstr to support covenants is another critical aspect of its design, pointing towards a future where users can benefit from even greater security and functionality in their transactions. The incorporation of covenants, as detailed in the provided [link](https://x.com/1440000bytes/status/1821357538899611681), suggests a forward-thinking approach in the development of Joinstr, aiming to address some of the inherent challenges in cryptocurrency transactions and smart contracts. This capability would not only enhance the security features of Joinstr but also expand its use cases, making it a highly adaptable solution for various transaction types and user requirements.</summary>
    <published>2024-09-21T01:44:52.889000+00:00</published>
  </entry>
</feed>

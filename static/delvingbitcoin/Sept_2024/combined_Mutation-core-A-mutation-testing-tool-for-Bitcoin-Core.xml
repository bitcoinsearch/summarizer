<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Mutation-core: A mutation testing tool for Bitcoin Core</title>
  <updated>2024-09-13T02:15:01.236339+00:00</updated>
  <author>
    <name>bruno 2024-09-12 19:06:30.136000+00:00</name>
  </author>
  <author>
    <name>0xB10C 2024-09-12 08:51:38.837000+00:00</name>
  </author>
  <author>
    <name>bruno  . 2024-09-06 19:43:09.267000+00:00</name>
  </author>
  <link href="delvingbitcoin/Sept_2024/3173_Mutation-core-A-mutation-testing-tool-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/Sept_2024/3169_Mutation-core-A-mutation-testing-tool-for-Bitcoin-Core.xml" rel="alternate"/>
  <link href="delvingbitcoin/Sept_2024/3142_Mutation-core-A-mutation-testing-tool-for-Bitcoin-Core.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Mutation-core: A mutation testing tool for Bitcoin Core</title>
    <updated>2024-09-13T02:15:01.236381+00:00</updated>
    <link href="https://delvingbitcoin.org/t/mutation-core-a-mutation-testing-tool-for-bitcoin-core/1119" rel="alternate"/>
    <summary>A new mutation testing tool has been developed specifically for Bitcoin Core, offering advanced features to improve the developers' testing workflow. This tool is now accessible on GitHub under the repository name [mutation-core](https://github.com/brunoerg/mutation-core). It introduces a notable functionality that generates mutants exclusively for code modifications or additions within a specific branch, optimizing the testing of pull requests by focusing solely on recent changes and not on unchanged parts of the codebase such as bench/test/doc etc. folders.

Another significant aspect of this tool is its use of security-based mutation operators to generate mutants, which is particularly useful for fuzz testing. By introducing errors or variations, such as altering boolean values or numerical limits, it helps in evaluating the software's resilience against unexpected or malformed inputs. This approach plays a crucial role in uncovering potential vulnerabilities or weaknesses in the code, thereby enhancing the overall robustness of the software.

The mutation testing tool also aims to increase efficiency by avoiding the generation of unnecessary mutants from comments, `LogPrintf` statements, and other non-functional parts of the code. It further streamlines the testing process by limiting the generation of mutants to one per line of code, thus reducing the total number of mutants created. This feature is especially beneficial for continuous integration/continuous deployment (CI/CD) pipelines. Additionally, the tool supports mutations in functional tests by omitting certain statements and method calls to check if tests still pass, which helps in identifying flawed tests while ensuring critical verification commands in tests are preserved.

The developer behind this innovative tool has put a strong emphasis on community involvement, inviting users to provide feedback and contribute to the tool's development. Detailed documentation has been provided in the README file of the repository, encouraging users to explore the tool's features and potentially enhance its functionality.</summary>
    <published>2024-09-12T19:06:30.136000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Expanding on BOLT12</title>
  <updated>2024-10-01T02:27:48.047473+00:00</updated>
  <author>
    <name>andyschroder 2024-09-30 06:32:47.142000+00:00</name>
  </author>
  <author>
    <name>andyschroder  . 2024-09-29 04:18:33.934000+00:00</name>
  </author>
  <link href="delvingbitcoin/Sept_2024/3304_Expanding-on-BOLT12.xml" rel="alternate"/>
  <link href="delvingbitcoin/Sept_2024/3280_Expanding-on-BOLT12.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Expanding on BOLT12</title>
    <updated>2024-10-01T02:27:48.047512+00:00</updated>
    <link href="https://delvingbitcoin.org/t/expanding-on-bolt12/1167/2" rel="alternate"/>
    <summary>The proposal to classify a new feature as a bLIP (Bitcoin Lightning Improvement Proposal) rather than amending the existing BOLT (Basis of Lightning Technology) documents is driven by its optional nature, ensuring that BOLT12 continues to function as intended regardless of user adoption. The integration of BOLT12 into the main repository, highlighted by a recent [pull request](https://github.com/lightning/bolts/pull/798), marks a pivotal moment in its evolution, showcasing its readiness for real-world application and signaling the commencement of its practical deployment.

A focal point of ongoing development efforts is the structural design of `invoice_request` and `invoice` elements, specifically the requirement for these components to inherit all fields from their precursors, even those unfamiliar to them. This approach not only embodies a degree of flexibility conducive to future enhancements but also suggests a framework that is inherently designed to accommodate additions in a manner that preserves backward compatibility. A significant enhancement under consideration involves the introduction of a `user` field within the `invoice_request`, providing a detailed specification [here](https://github.com/lightning/blips/blob/b6c3e8c17028926f7c5ae254f419456fe3c4bf13/blip-0032.md?plain=1L86).

Further proposed improvements include the implementation of a `refund_invoice_required` field for `offer` creators, which, when activated, obliges `invoice_request` authors to issue a `refund_invoice` containing an encoded refund invoice prefixed by `lni`. This initiative is poised to simplify the refund mechanism, facilitating a more streamlined merchant-consumer interaction by circumventing the need for manual refund requests for each transaction. Another noteworthy suggestion is the establishment of an `offer_max_amount` parameter within offers, aimed at predefining the maximum value acceptable for transactions. This addition addresses operational considerations such as inventory limits, liquidity management, and customer relationship dynamics, thereby preempting potential disputes arising from exceeded transaction expectations.

The current lack of an expiration feature for `invoice_request`s presents a challenge in managing the temporal validity of offers, especially in scenarios where timing is critical. Introducing an expiry mechanism akin to those governing offers and invoices could significantly bolster the operational integrity of the BOLT12 framework, ensuring the relevance and enforceability of transactions within agreed timeframes.

These discussions encapsulate a concerted effort to refine the BOLT12 standard, embodying a community-driven approach to identify and address the complexities of implementing these protocols in diverse real-life contexts. Through active solicitation of feedback and collaborative examination of proposed features, the development of BOLT12 continues to be shaped by a broad spectrum of insights and expertise.</summary>
    <published>2024-09-30T06:32:47.142000+00:00</published>
  </entry>
</feed>

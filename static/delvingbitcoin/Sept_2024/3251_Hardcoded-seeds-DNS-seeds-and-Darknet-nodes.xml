<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Hardcoded seeds, DNS seeds and Darknet nodes</title>
  <updated>2024-09-24T02:20:57.673712+00:00</updated>
  <author>
    <name>virtu 2024-09-23 14:33:41.084000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Hardcoded seeds, DNS seeds and Darknet nodes</title>
    <updated>2024-09-24T02:20:57.673744+00:00</updated>
    <link href="https://delvingbitcoin.org/t/hardcoded-seeds-dns-seeds-and-darknet-nodes/1123/11" rel="alternate"/>
    <summary>A novel method has been developed for encoding various types of network addresses within DNS records, specifically utilizing AAAA records for this purpose. This approach demonstrates a unique way to encode onion (Tor), I2P (Invisible Internet Project), and CJDNS (an encrypted IPv6 network) addresses by leveraging the structure of AAAA records. The encoding efficiency of this method is around 50%, primarily due to the inherent overhead associated with each DNS record. For instance, AAAA records come with approximately 12 bytes of overhead, which includes a ten-byte record overhead in addition to one or two bytes dedicated to a hardcoded restricted IPv6 prefix along with ordering information.

The technique employs the ff00::/8 IPv6 prefix to indicate custom encoding, using the subsequent 8 bits for ordering purposes. While this does present an increase in overhead, it's noted that the method operates seamlessly with standard DNS resolution tools such as `getaddrinfo` and does not affect server-side caching mechanisms negatively. Through this encoding scheme, eleven AAAA records are necessary to represent two addresses each from onion, I2P, and CJDNS networks. 

An example provided showcases how this encoding functions in practice, with a demonstration involving the resolution of custom encoded addresses via a specific DNS query. Regular IPv6 addresses remain unaffected by this scheme, ensuring that standard operations are not disrupted. This innovative approach opens up possibilities for DNS-based applications to integrate alternative network address types seamlessly, albeit with considerations regarding the trade-off between encoding efficiency and the versatility of supported address types.</summary>
    <published>2024-09-23T14:33:41.084000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Mutation-core: A mutation testing tool for Bitcoin Core</title>
  <updated>2024-09-07T02:15:52.169982+00:00</updated>
  <author>
    <name>bruno 2024-09-06 19:43:09.267000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Mutation-core: A mutation testing tool for Bitcoin Core</title>
    <updated>2024-09-07T02:15:52.170016+00:00</updated>
    <link href="https://delvingbitcoin.org/t/mutation-core-a-mutation-testing-tool-for-bitcoin-core/1119" rel="alternate"/>
    <summary>A new mutation testing tool designed specifically for Bitcoin Core has been introduced, aimed at enhancing the testing process for developers. Available publicly on GitHub ([mutation-core](https://github.com/brunoerg/mutation-core)), this tool brings innovative features to the forefront of software testing within the Bitcoin Core ecosystem. One of its key functionalities allows for the generation of mutants exclusively for the code that has been modified or added in a specific branch. This feature is particularly useful for testing pull requests (PRs) as it focuses on the newly introduced changes without wasting time and resources on unaltered parts of the codebase, such as files from bench/test/doc/etc folders.

Moreover, the tool offers the capability to generate mutants utilizing security-based mutation operators. This functionality is deemed beneficial for fuzz testing by introducing errors or variations into the code to test the robustness of software against unexpected or malformed inputs. Examples provided illustrate how simple alterations in the code, like changing boolean values or numerical limits, can be used to assess the software's behavior under mutated conditions. These examples underscore the tool's potential in identifying vulnerabilities or weaknesses in the code.

Additionally, the mutation testing tool is designed to avoid generating unnecessary mutants by skipping over comments, `LogPrintf` statements, and similar non-functional parts of the code. It also emphasizes efficiency by allowing only one mutant per line of code, which significantly reduces the total number of mutants generated. This feature is highly beneficial for continuous integration/continuous deployment (CI/CD) pipelines, as it streamlines the testing process. Furthermore, the tool supports mutations in functional tests by removing certain statements and method calls to evaluate whether tests still pass, thus aiding in the identification of flawed tests. Importantly, it respects the integrity of critical verification commands within tests, ensuring that essential validations remain untouched.

The developer of this tool encourages feedback and has provided detailed documentation in the README file within the repository, inviting users to explore the tool's capabilities further and contribute to its development.</summary>
    <published>2024-09-06T19:43:09.267000+00:00</published>
  </entry>
</feed>

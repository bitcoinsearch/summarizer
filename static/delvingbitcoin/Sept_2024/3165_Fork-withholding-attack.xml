<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>Fork withholding attack</title>
  <updated>2024-09-13T02:16:00.360715+00:00</updated>
  <author>
    <name>Jassu7082 2024-09-12 05:08:09.213000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>Fork withholding attack</title>
    <updated>2024-09-13T02:16:00.360742+00:00</updated>
    <link href="https://delvingbitcoin.org/t/fork-withholding-attack/1128" rel="alternate"/>
    <summary>Jaswanth, a computer science student, is currently concentrating on a project with the goal of enhancing reward mechanisms in mining pools to counteract Fork After Withholding (FAW) attacks. This type of attack involves a pool member deliberately withholding a successfully mined block, which undermines the pool's overall revenue. Unlike simple block withholding, in an FAW attack, the attacker joins a mining pool and submits fake proofs of work (FPoWs) when another miner outside their target pool finds a block, potentially causing a fork in the blockchain if the fraudulent block is accepted. This strategy could allow the attacker to earn up to four times more than through traditional block withholding methods, especially in larger pools.

The proposed solution to mitigate these attacks involves the pool manager actively tracking each miner's reputation by monitoring their submitted Proof of Partial Work (PPoW). If a user's submission leads to a blockchain fork, it would negatively impact their reputation within the pool. However, Jaswanth acknowledges a gap in his practical experience regarding the implementation of such a system within actual mining pools. He seeks advice on simulation tools or other resources that could facilitate the development of this concept. Additionally, he references a study from the ACM Digital Library ([link](https://dl.acm.org/doi/abs/10.1145/3133956.3134019)) for further reading on the subject.</summary>
    <published>2024-09-12T05:08:09.213000+00:00</published>
  </entry>
</feed>

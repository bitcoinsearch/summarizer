<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
  <updated>2024-09-18T02:16:24.925222+00:00</updated>
  <author>
    <name>ariard 2024-09-17 07:28:54.133000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
    <updated>2024-09-18T02:16:24.925248+00:00</updated>
    <link href="https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/4" rel="alternate"/>
    <summary>The timeout condition in question requires clients to establish an online presence before a predetermined deadline, subsequently necessitating their exit from the mechanism. This exit strategy can be executed either independently by the client or in collaboration with the Lightning Service Provider (LSP). However, this approach encounters significant challenges in scenarios involving widespread off-chain force-closures, as detailed under the "Forced Expiration Spam" section within the [lightning paper](https://lightning.network/lightning-network-paper.pdf). Specifically, the implementation of a timeout condition may inadvertently trigger a large-scale migration to on-chain transactions. Such a shift intensifies competition for the already limited block space available on the blockchain. Moreover, there is no protocol-level assurance that the LSP will be online at the critical moment when the timeout expires, which is essential for batch processing of exits. This lack of guaranteed LSP availability at crucial times adds an additional layer of complexity to managing exits under the timeout condition.</summary>
    <published>2024-09-17T07:28:54.133000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
  <updated>2024-09-19T02:17:16.714726+00:00</updated>
  <author>
    <name>ZmnSCPxj 2024-09-18 17:22:08.812000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories</title>
    <updated>2024-09-19T02:17:16.714757+00:00</updated>
    <link href="https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/9" rel="alternate"/>
    <summary>The discussion emphasizes the challenges and strategies associated with using Lightning Service Providers (LSPs) for managing Bitcoin transactions, particularly in the context of optimizing the use of Unspent Transaction Outputs (UTXOs). It is highlighted that for the LSP to effectively provide liquidity while minimizing the number of UTXOs required per user, it operates on a probabilistic basis. This approach assumes that in most cases, users' hardware can be activated on demand, allowing the use of offchain funds.

One of the key points made is the necessity for an LSP to potentially manage up to two channels per client. The first channel operates within the described mechanism, leveraging a single UTXO to back multiple clients. The second, an optional onchain channel, would only be needed for a subset of clients, based on the LSP's assessment that not all clients will require this additional channel at any given time. This method proposes a more efficient use of UTXOs than allocating them on a one-to-one basis for each client.

Furthermore, the text outlines a specific strategy for handling the onchain channel, involving a `CLTV` (CheckLockTimeVerify) condition. This allows the LSP to enforce a move to a new factory, enabling the consolidation of both the offchain and onchain channels into a single channel within a subsequent timeout-tree-structured mechanism. This approach aims to streamline the transaction process and improve the overall efficiency of utilizing blockchain resources.</summary>
    <published>2024-09-18T17:22:08.812000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>The path to general computation on Bitcoin (with OP_CAT)</title>
  <updated>2024-08-30T02:13:27.611924+00:00</updated>
  <author>
    <name>victorkstarkware 2024-08-29 11:21:23.206000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>The path to general computation on Bitcoin (with OP_CAT)</title>
    <updated>2024-08-30T02:13:27.611955+00:00</updated>
    <link href="https://delvingbitcoin.org/t/the-path-to-general-computation-on-bitcoin-with-op-cat/1106" rel="alternate"/>
    <summary>Achieving general computation on Bitcoin has long been a challenging goal due to inherent limitations in Bitcoin's script system, notably its script length and opcode expressibility constraints. However, the landscape began changing with the Taproot upgrade in 2021, which significantly eased the script length limitation and introduced the potential for more complex applications on Bitcoin. The key to unlocking nearly unlimited expressibility lies in re-enabling a simple opcode known as OP_CAT, disabled since 2010. OP_CAT's ability to concatenate elements on the stack, with activation requiring minimal code, presents a non-intrusive method to enhance Bitcoin's computational capabilities through a soft fork.

The essence of computing on Bitcoin revolves around overcoming several primary restrictions. Traditionally, Bitcoin script's capacity for handling complex logic was severely hampered by limitations such as the maximum stack size, lack of support for multiplication, and constraints on the number of opcodes per transaction. These issues made it impractical to perform operations necessary for advanced applications, like those involving cryptographic operations, within a Bitcoin transaction. The recent developments, however, aim to address these challenges by introducing tools like covenants and STARK proofs, which together enable statefulness, flexibility, and expressibility beyond traditional Bitcoin scripts.

Covenants represent a significant step forward, allowing scripts to enforce specific conditions on how bitcoins are spent, thereby enabling stateful smart contracts on Bitcoin. This functionality expands the utility of Bitcoin far beyond simple transactions, facilitating a variety of applications by embedding the contract's logic and state within transaction outputs. Additionally, the introduction of STARK proofs offers a way to execute and verify off-chain computations on-chain, enhancing scalability and safety while maintaining the integrity of the Bitcoin network. StarkWare's Cairo language, designed for efficient proving and verification with STARKs, exemplifies the potential for sophisticated programming on Bitcoin, promising to revolutionize how developers interact with the blockchain.

OP_CAT is central to leveraging both covenants and STARK proofs on Bitcoin. It enables the construction of smart contracts and the efficient verification of off-chain computations, thus significantly broadening Bitcoin's scope of application. Efforts led by innovators like Weikeng Chen and Pingzhou Yuan, including projects within the [Bitcoin Wildlife Sanctuary](https://github.com/Bitcoin-Wildlife-Sanctuary), highlight ongoing developments aimed at integrating these advanced computational capabilities into Bitcoin. Through such initiatives, the community is working towards making Bitcoin a more versatile platform for decentralized applications, promising an exciting future for computation on the blockchain.</summary>
    <published>2024-08-29T11:21:23.206000+00:00</published>
  </entry>
</feed>

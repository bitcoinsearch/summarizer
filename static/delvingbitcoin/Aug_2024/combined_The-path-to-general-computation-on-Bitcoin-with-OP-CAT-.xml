<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - The path to general computation on Bitcoin (with OP_CAT)</title>
  <updated>2025-04-28T02:45:02.403878+00:00</updated>
  <author>
    <name>victorkstarkware 2025-04-27 12:48:37.275000+00:00</name>
  </author>
  <author>
    <name>victorkstarkware 2025-04-27 12:45:15.574000+00:00</name>
  </author>
  <author>
    <name>moonsettler  . 2025-04-15 08:55:58.168000+00:00</name>
  </author>
  <author>
    <name>Lazmv  . 2025-04-06 08:26:53.575000+00:00</name>
  </author>
  <author>
    <name>victorkstarkware  . 2024-08-29 11:21:23.206000+00:00</name>
  </author>
  <link href="delvingbitcoin/April_2025/4879_The-path-to-general-computation-on-Bitcoin-with-OP-CAT-.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4880_The-path-to-general-computation-on-Bitcoin-with-OP-CAT-.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4784_The-path-to-general-computation-on-Bitcoin-with-OP-CAT-.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4714_The-path-to-general-computation-on-Bitcoin-with-OP-CAT-.xml" rel="alternate"/>
  <link href="delvingbitcoin/Aug_2024/3081_The-path-to-general-computation-on-Bitcoin-with-OP-CAT-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - The path to general computation on Bitcoin (with OP_CAT)</title>
    <updated>2025-04-28T02:45:02.403932+00:00</updated>
    <link href="https://delvingbitcoin.org/t/the-path-to-general-computation-on-bitcoin-with-op-cat/1106" rel="alternate"/>
    <summary>The discourse around Bitcoin's scripting capabilities and its potential for supporting complex applications such as smart contracts and STARK proofs has gained considerable momentum, particularly with the exploration of OP_CAT and covenants. The reactivation of OP_CAT, an opcode within Bitcoin's script that was disabled in 2010, is seen as a pivotal enhancement that could significantly expand Bitcoin's computational expressibility. This opcode facilitates the concatenation of elements on the stack, which is a foundational operation for both creating scalable, transparent arguments of knowledge (STARKs) and implementing covenants in Bitcoin. STARKs, which are cryptographic proofs that enable the verification of computations without having to perform the computation itself, require the ability to concatenate and hash data, processes that are well within the capabilities provided by OP_CAT.

Covenants, a concept that has been gaining traction within the Bitcoin community, offer a way to impose restrictions on how bitcoins can be spent, effectively embedding stateful logic into transactions. This allows for a form of smart contracts on Bitcoin, albeit with limitations compared to other blockchain platforms that were designed with native smart contract support. The integration of covenants and multi-commitments through techniques like `CTV` and `CSFS`, along with `PAIRCOMMIT`, proposes a framework for enhancing Bitcoin's script functionality. However, these innovations do not fully address the requirements for implementing functional STARK proofs on Bitcoin, particularly concerning data decommitment and algebraic checks, as well as deriving randomness from a Fiat-Shamir hash accumulation.

Criticism of the original discussion highlights a lack of clarity in defining smart contracts within the Bitcoin ecosystem and questions the feasibility of achieving automatic transaction triggering—an essential feature of smart contracts—without specific opcodes like `OP_CALL`. The critique also emphasizes the necessity of explaining the UTXO model and STARK proof computation more thoroughly, suggesting that the post overlooks key aspects crucial for understanding Bitcoin's capability to support general computation and advanced cryptographic protocols.

Moreover, the conversation brings attention to the practical implementation of these concepts, referencing StarkWare's success in settling over $1 trillion using its proof systems, and questioning the specifics of covenant implementation, including the Schnorr trick for Pay2Taproot outputs and the management of state tracking at the node level. A notable concern raised is the inappropriate use of the term "smart contract" when discussing Bitcoin, recommending the term "covenants" for a more accurate description of the functionality under scrutiny.

In essence, the ongoing discussions about OP_CAT, covenants, and STARK proofs represent a broader narrative about the evolution of Bitcoin's scripting language. These developments signify a move towards expanding Bitcoin's utility beyond simple peer-to-peer transactions, aiming to incorporate features that enhance its programmability and enable more sophisticated forms of decentralized applications. Through initiatives like the Bitcoin Wildlife Sanctuary, the community is actively exploring innovative methods to overcome Bitcoin's inherent script limitations, heralding a potentially transformative era for computational capabilities on the blockchain.</summary>
    <published>2025-04-27T12:48:37.275000+00:00</published>
  </entry>
</feed>

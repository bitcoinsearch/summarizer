<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Great Consensus Cleanup Revival</title>
  <updated>2024-08-08T02:06:54.976144+00:00</updated>
  <author>
    <name>David Harding 2024-08-07 05:49:06.895000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Great Consensus Cleanup Revival</title>
    <updated>2024-08-08T02:06:54.976174+00:00</updated>
    <link href="https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/26" rel="alternate"/>
    <summary>The discussion revolves around the advantages of setting the nLockTime to the block height in Bitcoin transactions, highlighting how it simplifies certain technical processes. By embedding the block height into the nLockTime field at the end of a serialized transaction, it enables a more efficient method for proving the authenticity of a transaction block. Specifically, this approach allows for a simplified extraction and verification process by using a SHA256 midstate. This technique involves providing a 32-byte SHA256 midstate of the coinbase transaction up to its final sections, along with the missing chunks and a partial merkle tree, which collectively are significantly less in size compared to the current method that requires the entire coinbase transaction for proof. The existing method, under BIP30's height commitment, necessitates presenting the full coinbase transaction alongside the partial merkle tree for verifying the block's height, leading to proofs that could potentially reach almost 1 MB in size.

The proposed method drastically reduces the size of the data needed for proof - to approximately 700 bytes - by allowing the recipient to verify the transaction's legitimacy through a smaller dataset that connects back to the merkle root in the block header. This efficiency gain not only streamlines the verification process but also implies potential applications and benefits of incorporating the block height into the nLockTime, despite the original suggestion not being explicitly linked to immediate practical uses. Furthermore, it clarifies a minor correction regarding the size of SHA256 chunks, noting them to be 64 bytes instead of 32, which adjusts the specifics of how the simplified extraction process is described but does not diminish the overall advantage of the proposed method.</summary>
    <published>2024-08-07T05:49:06.895000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How CTV+CSFS improves BitVM bridges</title>
  <updated>2025-04-17T02:38:04.386626+00:00</updated>
  <author>
    <name>AntoineP 2025-04-16 14:21:48.816000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How CTV+CSFS improves BitVM bridges</title>
    <updated>2025-04-17T02:38:04.386656+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/12" rel="alternate"/>
    <summary>The correspondence delves into the intricacies of Bitcoin's script execution, particularly focusing on the utilization of `CHECKSIG` operations within both `scriptSig` and `scriptPubKey`. The writer raises an important technical observation regarding the reuse of signatures across these scripts. It is highlighted that the signature employed by the `CHECKSIG` in the `scriptSig` fundamentally differs from that in the `scriptPubKey` due to the distinct messages being signed in each instance. This distinction arises because the execution environment, or eval script, processes the `scriptSig` and `scriptPubKey` separately, applying different segments of code for their verification. Specifically, the `EvalScript` function treats these scripts with unique handling, as evidenced by the referenced Bitcoin source code links ([EvalScript call](https://github.com/bitcoin/bitcoin/blob/cdc32994feadf3f15df3cfac5baae36b4b011462/src/script/interpreter.cppL1975-L1980) and [the scriptCode in `CHECKSIG` evaluation](https://github.com/bitcoin/bitcoin/blob/cdc32994feadf3f15df3cfac5baae36b4b011462/src/script/interpreter.cppL324-L338)). 

Moreover, the communication suggests a potential oversight in the proposed script, indicating that the intended use of `CHECKSIG` within the `scriptSig` might have been more aptly replaced with `CHECKSIGVERIFY` to ensure proper execution. This suggestion implies a fundamental misunderstanding or misapplication of the script commands, which could invariably lead to execution failure due to one of the `CHECKSIG` operations not fulfilling its requisite conditions. 

The writer also speculates on a creative workaround involving the use of a `CODESEPARATOR` hack. This method would theoretically allow for the duplication of the signature to be circumvented by ensuring that the `scriptCode` remains constant for both the `scriptSig` and `scriptPubKey`, thus facilitating a successful execution without directly addressing the identified problem with `CHECKSIG` usage. This part of the discussion underlines a nuanced understanding of Bitcoin script functionalities and presents an innovative albeit untested solution to the problem at hand.</summary>
    <published>2025-04-16T14:21:48.816000+00:00</published>
  </entry>
</feed>

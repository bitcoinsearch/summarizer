<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How CTV+CSFS improves BitVM bridges</title>
  <updated>2025-04-30T02:42:43.577450+00:00</updated>
  <author>
    <name>ajtowns 2025-04-29 05:54:54.794000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How CTV+CSFS improves BitVM bridges</title>
    <updated>2025-04-30T02:42:43.577480+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/22" rel="alternate"/>
    <summary>Exploring the intricacies of Bitcoin's protocol enhancements, particularly those related to transaction hash specifications and opcode functionalities, reveals a complex landscape of possibilities and limitations. The proposal [PR1500](https://github.com/bitcoin/bips/pull/1500) in the Bitcoin Improvement Proposals (BIPs) repository introduces significant changes but also encounters unique challenges, especially when compared to alternative methods such as the bllsh trick highlighted in a detailed discussion at [Delving into Bitcoin](https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/8). This particular method leverages the capabilities of the proposed opcodes to commit to certain transaction outputs in a more flexible manner than what PR1500 seems to offer at first glance.

The technical dialogue further delves into the limitations of PR1500, noting its inability to directly replicate the functionality facilitated by these newer opcodes. Specifically, it points out that PR1500's framework for requesting transaction hashes is somewhat restrictive, only allowing for the retrieval of a hash for a previous output without enabling access to the individual transaction ID and output index components. Such constraints potentially hinder the implementation of more sophisticated commitment schemes directly within the transaction layer.

However, an innovative workaround is suggested through the creative use of the CAT opcode. By requiring users to manually supply the transaction ID, which can then be concatenated (CAT'ed) with the expected output index (vout), and subsequently hashed, this method proposes a mechanism to indirectly achieve a similar outcome to what direct access to the txid and vout would permit. This process involves comparing the resultant hash with that produced by the TXHASH opcode, effectively simulating the desired functionality across both inputs and outputs. This workaround not only exemplifies the flexibility and adaptability of Bitcoin's scripting language but also highlights the ongoing efforts within the community to overcome technical limitations through ingenuity and collaboration.</summary>
    <published>2025-04-29T05:54:54.794000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Stats on compact block reconstructions</title>
  <updated>2025-04-23T02:41:01.912337+00:00</updated>
  <author>
    <name>Crypt-iQ 2025-04-22 19:58:48.020000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Stats on compact block reconstructions</title>
    <updated>2025-04-23T02:41:01.912370+00:00</updated>
    <link href="https://delvingbitcoin.org/t/stats-on-compact-block-reconstructions/1052/28" rel="alternate"/>
    <summary>In the discussion regarding the optimization of bandwidth usage within Bitcoin's network protocol, a specific focus is placed on the mechanics of transaction announcement and prefilling in compact block messages. The suggestion to limit the prefill amount to approximately 10kB, as outlined in the [BIP152 implementation note 5](https://github.com/bitcoin/bips/blob/02ad0e01c2a9189124e05a52afe97ef90a3b7f1f/bip-0152.mediawikiimplementation-notes), emerges from concerns over potential bandwidth waste. This approach aims to mitigate the inefficiencies that may arise when a node, while making a high-bandwidth announcement, includes an excessive number of well-known transactions within its announcement.

A critical analysis shared by the developer sipa in a semi-related thread ([discussion link](https://github.com/bitcoin/bitcoin/pull/27086issuecomment-1426937832)) points out a possible downside to this prefill strategy. The concern revolves around the enlargement of the CMPCTBLOCK message due to prefilled transactions, which could inadvertently lead to an increased number of TCP packets being sent across the network. This increase may, in turn, impact network performance negatively. Although the original point made by sipa was in relation to the GETBLOCKTXN request potentially causing more network round trips, the underlying issue of optimizing message size for efficiency applies broadly. One speculative solution offered is to cap the total message size for compact blocks, thus balancing the trade-off between prefilling transactions for faster processing and maintaining network efficiency.</summary>
    <published>2025-04-22T19:58:48.020000+00:00</published>
  </entry>
</feed>

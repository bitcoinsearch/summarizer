<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Evolving the Ark protocol using CTV and CSFS</title>
  <updated>2025-04-17T02:40:00.946234+00:00</updated>
  <author>
    <name>stevenroose 2025-04-16 09:22:29.709000+00:00</name>
  </author>
  <author>
    <name>roasbeef  . 2025-04-15 23:26:53.820000+00:00</name>
  </author>
  <author>
    <name>instagibbs  . 2025-04-15 14:46:45.805000+00:00</name>
  </author>
  <author>
    <name>stevenroose  . 2025-04-15 11:54:40.401000+00:00</name>
  </author>
  <link href="delvingbitcoin/April_2025/4798_Evolving-the-Ark-protocol-using-CTV-and-CSFS.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4795_Evolving-the-Ark-protocol-using-CTV-and-CSFS.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4788_Evolving-the-Ark-protocol-using-CTV-and-CSFS.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4785_Evolving-the-Ark-protocol-using-CTV-and-CSFS.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Evolving the Ark protocol using CTV and CSFS</title>
    <updated>2025-04-17T02:40:00.946282+00:00</updated>
    <link href="https://delvingbitcoin.org/t/evolving-the-ark-protocol-using-ctv-and-csfs/1602" rel="alternate"/>
    <summary>The email delves into the complexities of implementing rebindable signatures within the framework of the Ark protocol, specifically leveraging CTV+CSFS (CheckTemplateVerify and CheckSigFromStack). It highlights concerns regarding the potential for replay attacks if the messages are not carefully constructed. There's a focus on the requirement for user interaction in transactions, detailing the steps necessary for users to safely execute a transaction. These steps include acquiring new public keys, updating the VTXO (Virtual Transaction Output) plus connector trees, and obtaining a signature on the new VTXO from the receiver. The discussion raises questions about whether these processes are overly dependent on a trusted server for information transmission or if they adequately leverage the statechains' security model.

The conversation further explores the technical challenges associated with implementing CTV, particularly concerning how rounds are constructed and the unknown status of the "root" CTV hash until all participants have provided their parameters. This necessitates users remaining online throughout the process to ensure their ability to exit by signing their leaf, leading to queries about the feasibility of pre-signing for a new exit transaction without definitive knowledge of its details. Additionally, the email touches upon NO_INPUT/APO capabilities, contrasting them with the proposed model by highlighting the absence of dependency on the outpoint, which introduces flexibility in the signing process. Concerns about how users can pre-sign exit transactions without knowing the deducted fees or the specifics of new transactions are also mentioned, complicating the process under the assumption of `SIGHASH_ALL`.

Moreover, the email presents an innovation in blockchain transactions through the introduction of Timeout Trees, suggesting a method where virtual unspent transaction outputs can be refreshed directly, facilitating seamless channel transfers to a new "Ark" without needing connector or control inputs. This represents a significant step forward in reducing transaction interactivity, making blockchain technology more accessible and efficient.

The innovative variations of the Ark protocol, named Erk and hArk, are introduced, aiming to streamline the process using Bitcoin's `OP_CHECKTEMPLATEVERIFY` and `OP_CHECKSIGFROMSTACK`. Erk and hArk are designed to reduce or eliminate the need for user interaction during transaction rounds, with Erk allowing for offline refreshes by the server on behalf of the user and hArk improving efficiency for transactions involving multiple inputs but not supporting offline refreshes. Both protocols build upon the principles of the Ark protocol to facilitate unilateral exits and extend vtxo expiry times through refresh mechanisms. The introduction of "arkoor txs" is highlighted as a crucial innovation, enabling off-chain transfer of vtxos between users. Erk relies on rebindable signatures to enhance transaction efficiency by enabling the server to refresh vtxos without direct user involvement, while hArk introduces a secret-sharing aspect to secure refreshed vtxos until round completion. These advancements contribute significantly to the development of the Ark protocol, offering solutions that enhance user experience, reduce active participation requirements, and ensure secure and efficient vtxo management.</summary>
    <published>2025-04-16T09:22:29.709000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How CTV+CSFS improves BitVM bridges</title>
  <updated>2025-04-17T02:38:30.620605+00:00</updated>
  <author>
    <name>ajtowns 2025-04-16 11:19:31.759000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How CTV+CSFS improves BitVM bridges</title>
    <updated>2025-04-17T02:38:30.620636+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/10" rel="alternate"/>
    <summary>Incorporating a `CHECKSIG` opcode directly into the scriptSig presents several standardness and technical challenges within Bitcoin's transaction scripting. First, this approach would contravene established standardness rules, specifically the `CONST_SCRIPTCODE` rule, which ensures that the signature is not part of the scriptcode during execution. To remove the signature from the scriptcode and adhere to this rule, one would have to either utilize the `FindAndDelete` function or manually implement an operation akin to `OP_CODESEP`.

Moreover, the necessity for dual `CHECKSIG` operations arisesâ€”a unique inclusion in the scriptSig to accommodate CheckTemplateVerify (CTV) mechanisms and another in the scriptPubKey to prevent the transaction from being considered 'anyone can spend.' This requirement underscores the complexity and potential inefficiency of bypassing Pay-to-Script-Hash (P2SH) for transaction validation.

Additionally, this method demands the repetition of the public key within the transaction script, albeit with the possibility of reusing the signature to mitigate some redundancy. However, eschewing P2SH formats complicates the incorporation of more sophisticated spending conditions, suggesting that adhering to traditional script structures offers better support for complex logic and maintains alignment with Bitcoin protocol standards.</summary>
    <published>2025-04-16T11:19:31.759000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - How CTV+CSFS improves BitVM bridges</title>
  <updated>2025-04-15T02:46:09.305575+00:00</updated>
  <author>
    <name>1440000bytes 2025-04-15 00:00:02.028000+00:00</name>
  </author>
  <author>
    <name>RobinLinus  . 2025-04-11 17:37:20.466000+00:00</name>
  </author>
  <author>
    <name>ekrembal  . 2025-04-10 16:09:12.124000+00:00</name>
  </author>
  <author>
    <name>Cyimon  . 2025-04-10 14:28:23.711000+00:00</name>
  </author>
  <link href="delvingbitcoin/April_2025/4765_How-CTV-CSFS-improves-BitVM-bridges.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4749_How-CTV-CSFS-improves-BitVM-bridges.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4747_How-CTV-CSFS-improves-BitVM-bridges.xml" rel="alternate"/>
  <link href="delvingbitcoin/April_2025/4746_How-CTV-CSFS-improves-BitVM-bridges.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - How CTV+CSFS improves BitVM bridges</title>
    <updated>2025-04-15T02:46:09.305627+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/4" rel="alternate"/>
    <summary>In the realm of Bitcoin transactions, a crucial update has been made regarding the usage of sighash flags for presigning transactions. Originally, it was suggested to use `SINGLE|NONE` as the sighash flag combination for a specific signing scenario, which was incorrect. The accurate combination is now identified as `ANYONECANPAY|NONE`. This correction plays a pivotal role for developers working on Bitcoin transactions that require selective signing. The `ANYONECANPAY` flag allows a signer to indicate they are only signing their own inputs and not concerning themselves with any additional inputs that might be included in the transaction. Meanwhile, the `NONE` option means that no outputs are being signed for, providing flexibility for later modifications or additions of outputs by others. Understanding these sighash flags is essential for creating flexible and secure Bitcoin transaction protocols.

Furthermore, an innovative transaction graph mechanism aims at optimizing collateral utilization for operators within a certain framework. This system requires operators to sign at the deposit phase, specifically indicated by red arrows in the provided diagram. Progression to a "ready-to-reimburse transaction" is contingent upon each kickoff event reaching a finalized state, achievable through either a "challenge timeout transaction" or a "disprove timeout transaction." The design allows for parallel processing of multiple kickoff events, enabling several withdrawals to proceed concurrently from a single collateral source. However, this setup halts all reimbursement processes if any kickoff attempts are disproven.

The system's implementation confronts challenges including the necessity for a Bitcoin light client tasked with verifying payout transaction inclusions and the current state of the sidesystem. Addressing this requirement introduces trust-minimized assumptions vital for maintaining system safety. Moreover, the challenge of publishing all operators' signatures arises due to the limited block space on the Bitcoin network. This limitation underscores the need for alternative solutions to guarantee data availability, ensuring the system's efficient and secure operation. For further details, refer to the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Covenants_Uses).</summary>
    <published>2025-04-15T00:00:02.028000+00:00</published>
  </entry>
</feed>

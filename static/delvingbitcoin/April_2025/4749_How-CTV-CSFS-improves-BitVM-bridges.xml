<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How CTV+CSFS improves BitVM bridges</title>
  <updated>2025-04-12T02:27:12.203586+00:00</updated>
  <author>
    <name>RobinLinus 2025-04-11 17:37:20.466000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How CTV+CSFS improves BitVM bridges</title>
    <updated>2025-04-12T02:27:12.203629+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/6" rel="alternate"/>
    <summary>In discussing the technicalities of Bitcoin transactions, an important correction is necessary regarding the specific sighash flags used to presign a transaction. Initially, it was mentioned that the appropriate sighash flag combination for a particular transaction signing scenario is `SINGLE|NONE`. However, this was incorrect. The correct sighash flags to be used in this context are `ANYONECANPAY|NONE`. This adjustment is crucial for anyone working with Bitcoin transactions where selective signing is involved, as the sighash flag dictates how the transaction is signed by indicating which parts of the transaction are signed and which are not.

The use of `ANYONECANPAY` allows the signer to specify that they are only signing their own inputs, without regard to any other inputs that might be added to the transaction. This is particularly useful in scenarios where multiple parties are contributing inputs to a single transaction, but each party wants to ensure that their contribution is correctly signed without having to sign for the entire transaction. The `NONE` option signifies that no outputs are being signed for, giving further flexibility in constructing transactions that can later have outputs modified or added by others. This correction underscores the importance of understanding the nuanced functionalities provided by Bitcoin's sighash flags, enabling developers to create more flexible and secure transaction protocols.</summary>
    <published>2025-04-11T17:37:20.466000+00:00</published>
  </entry>
</feed>

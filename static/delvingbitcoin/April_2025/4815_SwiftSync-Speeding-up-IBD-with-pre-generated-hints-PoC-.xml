<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>SwiftSync -- Speeding up IBD with pre-generated hints (PoC)</title>
  <updated>2025-04-18T02:30:24.750704+00:00</updated>
  <author>
    <name>sjors 2025-04-17 12:30:18.271000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>SwiftSync -- Speeding up IBD with pre-generated hints (PoC)</title>
    <updated>2025-04-18T02:30:24.750733+00:00</updated>
    <link href="https://delvingbitcoin.org/t/swiftsync-speeding-up-ibd-with-pre-generated-hints-poc/1562/12" rel="alternate"/>
    <summary>The email discussion revolves around the optimization and potential enhancements of certain Bitcoin functionalities, with a particular focus on SwiftSync and `MuHash` performance. The sender expresses a heightened interest in the SwiftSync variant, which notably reduces assumptions compared to the `-assumevalid` feature. To facilitate a practical examination, they suggest that integrating this as a `-reindex` could be beneficial, leveraging existing undo data stored on disk. This approach aims to simplify the proof of concept phase by utilizing available resources.

Moreover, the conversation delves into the performance aspects of `MuHash`, a cryptographic accumulator used within the Bitcoin protocol. The sender references two GitHub pull requests ([#19181](https://github.com/bitcoin/bitcoin/pull/19181) and [#21590](https://github.com/bitcoin/bitcoin/pull/21590)) that have contributed to performance improvements in handling `MuHash`. Particularly, the latter pull request is highlighted for its significant enhancement of `MuHash` processing speed, an upgrade already incorporated into the recipient's branch. Additionally, it is mentioned that employing libgmp for computing inverses could potentially double the speed, indicating further areas for optimization. This insight suggests that while notable progress has been made, there remains untapped potential for improving `MuHash` efficiency, underscoring an ongoing opportunity for development within Bitcoin's cryptographic operations.</summary>
    <published>2025-04-17T12:30:18.271000+00:00</published>
  </entry>
</feed>

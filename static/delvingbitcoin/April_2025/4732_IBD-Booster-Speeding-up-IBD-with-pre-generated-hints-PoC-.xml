<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>IBD Booster -- Speeding up IBD with pre-generated hints (PoC)</title>
  <updated>2025-04-09T02:41:08.207694+00:00</updated>
  <author>
    <name>harding 2025-04-08 18:54:43.714000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>IBD Booster -- Speeding up IBD with pre-generated hints (PoC)</title>
    <updated>2025-04-09T02:41:08.207719+00:00</updated>
    <link href="https://delvingbitcoin.org/t/ibd-booster-speeding-up-ibd-with-pre-generated-hints-poc/1562/9" rel="alternate"/>
    <summary>The discussion revolves around the security concerns related to the exposure of the salt used in the context of SwiftSync, a process involved in blockchain transactions. The primary argument posits that keeping the salt secret might not be as crucial as initially thought, provided certain conditions are met. It is suggested that if the hints file, which plays a critical role in the SwiftSync process, commits to the chaintip at its conclusion, and assuming the user has access to this file or a commitment to it by the time they choose their salt, the potential for an attacker to exploit knowledge of the salt is significantly mitigated. The rationale behind this assertion is grounded in the immutable nature of the chaintip, which incorporates all past transaction IDs (txids), thereby rendering them unalterable without raising more significant systemic issues.

Furthermore, the discussion highlights that after the initial block download (IBD), nodes cease to use SwiftSync, implying that an attacker cannot generate new transaction outputs (TXOs) by leveraging knowledge of the salt. This underscores the belief that the known salt poses no inherent risk under normal operational conditions. However, a notable exception to this assessment is raised concerning scenarios where there might be a switch in the hints file during SwiftSync, such as through an upgrade of node versions mid-IBD. This could lead to discrepancies between what was once considered an unspent transaction output (UTXO) turning into a spent transaction output (STXO), based on the differing data in the new hints file. To mitigate such risks, it is advised that switching hints files during SwiftSync should be strictly prohibited to maintain the integrity and consistency of the transaction outputs.</summary>
    <published>2025-04-08T18:54:43.714000+00:00</published>
  </entry>
</feed>

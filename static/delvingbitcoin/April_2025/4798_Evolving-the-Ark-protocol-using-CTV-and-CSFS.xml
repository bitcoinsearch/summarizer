<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Evolving the Ark protocol using CTV and CSFS</title>
  <updated>2025-04-17T02:39:39.504225+00:00</updated>
  <author>
    <name>stevenroose 2025-04-16 09:22:29.709000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Evolving the Ark protocol using CTV and CSFS</title>
    <updated>2025-04-17T02:39:39.504257+00:00</updated>
    <link href="https://delvingbitcoin.org/t/evolving-the-ark-protocol-using-ctv-and-csfs/1602/4" rel="alternate"/>
    <summary>The discussion revolves around the intricacies of implementing a secure and efficient transaction system using CTV (CheckTemplateVerify) hashes, focusing on preventing replay attacks and ensuring user interaction is minimized. The message being signed with the CTV hash of the transaction does not commit to specific inputs but rather to the number of inputs and their index. This approach aims to mitigate the risk of replay attacks while allowing for certain refund transactions to be replayable under controlled conditions. To further enhance security, the system employs timelocks in a perpetual refresh scheme, preventing the sequential application of refund transactions by the server, which, although deemed uneconomical, adds an additional layer of protection against potential misuse.

One of the main goals of this system is to reduce the need for synchronous user interactions, which can be detrimental if one participant's actions negatively affect the others. This is particularly relevant in scenarios where senders must learn receiver public keys and inform receivers about their new virtual transaction outputs (vtxo). In the case of Erk and hArk protocols, the reduction of such interactions is emphasized, with hArk providing a more streamlined process for in-round payments compared to Erk, which is better suited for send-to-self refreshes. Notably, the concept of connectors is eliminated, simplifying the communication between senders and receivers regarding vtxos.

Furthermore, the system addresses the challenge of constructing rounds without a known "root" CTV hash until all participants have provided their parameters. This necessitates participants remaining online until the round is fully constructed to ensure their ability to exit the round. However, it's clarified that in the context of Ark, Erk, and hArk, there is no requirement for individual leaf signatures as all leaves are committed using CTV, allowing users to submit their inclusion request and be informed of their participation post-round construction.

Another critical aspect discussed is the use of NO_INPUT/APO rebindable signatures, facilitated by combining CTV with CSFS (Commitment Scheme For Signatures), to overcome the limitations associated with signing transactions whose exact details, such as the transaction ID and output scripts, may not yet be finalized. This method allows for pre-signing of refund transactions, assuming the fee is known in advance or communicated during the signup for the round. This pre-signing ensures that users can commit to a refund transaction even without knowing specifics about future transactions, thereby safeguarding their assets while enabling efficient transaction processing within this framework.</summary>
    <published>2025-04-16T09:22:29.709000+00:00</published>
  </entry>
</feed>

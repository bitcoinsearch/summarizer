<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>How CTV+CSFS improves BitVM bridges</title>
  <updated>2025-04-17T02:39:06.971636+00:00</updated>
  <author>
    <name>ajtowns 2025-04-16 09:48:04.727000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>How CTV+CSFS improves BitVM bridges</title>
    <updated>2025-04-17T02:39:06.971667+00:00</updated>
    <link href="https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/8" rel="alternate"/>
    <summary>In exploring advanced cryptocurrency transaction structures, a novel approach has been discussed that leverages the CTV (CheckTemplateVerify) protocol to enforce specific spending conditions. The methodology involves creating a situation where one input, referred to as inputA, is only spendable in conjunction with another specified input, known as inputB. This relationship is established by defining inputB as a legacy Pay to Script Hash (P2SH) output and creating a presigned signature with a `NONE|ANYONECANPAY` sighash. This special type of signature commits exclusively to inputB without committing to any other transaction inputs, due to its placement in inputBâ€™s scriptSig and the nature of P2SH not being part of the Segregated Witness (SegWit) protocol.

However, this setup has raised concerns regarding its effectiveness and the potential for circumvention. It appears that because the commitment is only from inputA to inputB and not vice versa, an alternative UTXO (Unspent Transaction Output) could be constructed to replace inputB in the transaction. An example provided illustrates how a UTXO with a non-standard scriptPubKey could be used in place of inputB, allowing inputA to be spent through the CTV path regardless of the state or existence of inputB. This undermines the intended enforcement mechanism, as it would enable the spending of inputA without the required association with inputB, thus violating the protocol's constraints.

The discussion further explores the limitations of achieving a two-way commitment between inputs due to hash cycles, which are cryptographically impractical if not impossible. A suggestion is made that a more viable solution could involve utilizing generic introspection opcodes. These opcodes would allow for checking the transaction ID (txid) of inputs within a transaction, enabling a form of conditional logic based on the relationship between inputs and outputs within a single transaction framework. Such a mechanism would not suffer from the same limitations as the CTV-based approach, offering a more flexible and potentially secure method for enforcing complex spending conditions.

An executable example demonstrating the application of generic introspection opcodes is provided in a [repository](https://github.com/ajtowns/bllsh/blob/5c981a57607452be8cb6dc4d83cb8bae7842cf99/examples/test-sibling-prevout), showcasing how these opcodes can be utilized to implement transaction conditions that require inputs and outputs to have specific relationships. This approach, while more sophisticated, requires a thorough understanding of the transaction structure and the ability to manipulate transaction elements dynamically, highlighting the evolving nature of cryptographic and blockchain technologies in addressing transaction security and flexibility.</summary>
    <published>2025-04-16T09:48:04.727000+00:00</published>
  </entry>
</feed>

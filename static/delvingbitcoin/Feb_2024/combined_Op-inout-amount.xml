<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Op_inout_amount</title>
  <updated>2025-05-09T02:44:22.008836+00:00</updated>
  <author>
    <name>salvatoshi 2025-05-08 19:41:45.428000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_5 2025-05-08 18:35:01.919000+00:00</name>
  </author>
  <author>
    <name>salvatoshi 2025-05-08 14:09:29.385000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2025-05-07 17:16:31.067000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2025-05-02 17:37:51.549000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2025-03-13 21:08:20.247000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2024-02-27 14:02:08.104000+00:00</name>
  </author>
  <author>
    <name>Chris_Stewart_  . 2024-02-12 15:05:39.857000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2025/4965_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4964_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4962_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4956_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4923_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2025/4521_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1718_Op-inout-amount.xml" rel="alternate"/>
  <link href="delvingbitcoin/Feb_2024/1520_Op-inout-amount.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Op_inout_amount</title>
    <updated>2025-05-09T02:44:22.008907+00:00</updated>
    <link href="https://delvingbitcoin.org/t/op-inout-amount/549" rel="alternate"/>
    <summary>The conversation revolves around the development and testing of new Script opcodes designed to enhance Bitcoin's scripting capabilities, specifically concerning the implementation of amount locks in transactions. This discourse is rooted in the exploration of `OP_CHECKCONTRACTVERIFY` (CCV) and a proposed new opcode, `OP_INOUT_AMOUNT`, which aims to directly manage transaction input and output values within the Script. The introduction of 64-bit arithmetic in Script and these opcodes is intended to streamline the enforcement of transaction conditions, particularly those not targeting destination locks but focusing on the value constraints of inputs and outputs.

The discussion touches upon the technical intricacies involved in implementing these proposals, highlighting how they could significantly simplify and expand the flexibility and applicability of amount locks within scripts. It delves into the details of the witness stack for `OP_CCV`, discussing the management of transaction elements such as indices and modes to implement amount locks efficiently. The original `OP_CHECKCONTRACTVERIFY` proposal suggested mode-based amount locks, but the case study proposes a more direct implementation using `OP_IN_AMOUNT` and `OP_OUT_AMOUNT`. This approach simplifies execution and allows for dynamic selection of modes based on the transaction's requirements, demonstrating the adaptability of this method through Python implementations and test cases.

In the discourse, there is also mention of a separate but related case study titled OP_VAULT, which investigates the use of Script opcodes for creating amount locks. This study emphasizes the need for enhancements that allow for more direct support of amount locks within Script, moving away from deferred validations. The proposal showcases `OP_VAULT` and `OP_VAULT_RECOVER` opcodes, focusing on verifying transaction amounts directly within Script and streamlining the recovery transaction process.

Furthermore, the conversation introduces `OP_INOUT_AMOUNT`, inspired by Elements' opcodes, as a means to handle variable size input and output sets in Bitcoin transactions. This opcode interprets stack parameters as bitmaps to guide the summation of specified outputs and inputs, illustrating its utility in scenarios like CoinJoin transactions. However, it acknowledges potential design challenges, such as ensuring comprehensive input-output value awareness and adaptability to varied transaction designs. 

Lastly, the email hints at broader ambitions to leverage these innovations for supporting `[OP_TLUV]`, suggesting ongoing efforts to optimize transaction verification processes. It calls for community feedback on enhancing Script's functionality, indicating a collaborative approach to refining Bitcoin's scripting capabilities.</summary>
    <published>2025-05-08T19:41:45.428000+00:00</published>
  </entry>
</feed>

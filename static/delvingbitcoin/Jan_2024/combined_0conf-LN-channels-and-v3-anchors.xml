<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - 0conf LN channels and v3 anchors</title>
  <updated>2024-02-02T02:03:12.888035+00:00</updated>
  <author>
    <name>morehouse 2024-02-01 22:58:04.876000+00:00</name>
  </author>
  <author>
    <name>tbast  . 2024-01-31 07:30:44.084000+00:00</name>
  </author>
  <author>
    <name>instagibbs  . 2024-01-30 21:13:29.571000+00:00</name>
  </author>
  <author>
    <name>morehouse  . 2024-01-30 20:48:10.596000+00:00</name>
  </author>
  <author>
    <name>MattCorallo  . 2024-01-30 20:10:14.070000+00:00</name>
  </author>
  <author>
    <name>tbast  . 2024-01-30 10:24:58.122000+00:00</name>
  </author>
  <author>
    <name>MattCorallo  . 2024-01-29 22:29:37.666000+00:00</name>
  </author>
  <link href="delvingbitcoin/Feb_2024/1411_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1393_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1389_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1387_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1386_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1379_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1370_0conf-LN-channels-and-v3-anchors.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - 0conf LN channels and v3 anchors</title>
    <updated>2024-02-02T02:03:12.888111+00:00</updated>
    <link href="https://delvingbitcoin.org/t/0conf-ln-channels-and-v3-anchors/494" rel="alternate"/>
    <summary>In recent technical discussions, programmers have been evaluating methods for optimizing transaction handling processes in anticipation of the deployment of version 3 (v3) protocols. The conversation revolves around the challenges associated with Child Pays For Parent (CPFP) mechanisms and the potential integration of a cluster mempool, which could provide significant improvements to v3's capabilities. Presently, in emergency situations, CPFP can be utilized to confirm funding transactions through commitment and anchor spend packages. However, these methods are susceptible to being undermined by a practice known as 'pinning,' where the initial transaction is prevented from confirming.

Looking ahead, developers are considering a future where a combination of cluster mempool, package relay, and a transition to a "[priority opt-in](https://delvingbitcoin.org/t/opt-in-transaction-policies-for-anti-pinning/159transaction-priority-opt-in-5)" policy would enable the mitigation of pinning risks. Under this scenario, funding transactions could adopt the v3 standard and be safeguarded against pinning due to the requirement for descendants of the funding transaction to use a priority fee rate. Despite these advancements, it is acknowledged that during the v3 transitional phase, maintaining the status quo might be the best approach. This involves adding a shared anchor to non-v3 funding transactions, allowing flexibility for CPFP in urgent cases while avoiding worsening the current situation regarding pinning vulnerabilities.

Discussions further delve into strategizing the role of v3 in handling zero-confirmation (0-conf) transactions. It is suggested that initially deploying a simplified version of v3 that addresses immediate concerns, followed by incremental enhancements, could be beneficial. Considering the limitations of Replace-By-Fee (RBF) in zero-confirmation scenarios, the community leans towards CPFP as the safer alternative. A notable proposal includes adjusting zero-confirmation funding transactions to support v3 by incorporating a shared anchor, thus offering parties the ability to initiate CPFP transactions when necessary.

Additionally, the dialogue touches on the importance of analyzing transaction chains, particularly when dealing with unconfirmed splices. There's an inclination towards using RBF for splice bumps; however, reliance on CPFP continues due to its effectiveness in counteracting transaction pinning. To avoid any potential need for a subsequent version upgrade beyond v3, participants advocate reevaluating mempool policies to align closely with the envisioned framework.

Concerns are also raised over the impact of the proposed v3 topology on chaining unconfirmed splices, which is a critical functionality for some users. The current consideration focuses on limiting the funding transaction to confirmed inputs only, simplifying the structure but potentially restricting unconfirmed splice chains. Despite this, the change output workaround on participant B's side for enabling CPFP remains a practical, though non-ideal, solution under v3.

Finally, the recent LN spec call brought attention to issues with v3 transactions and their compatibility with 0conf channels. In a scenario where one party is offline, the dependency of v3 transactions on not having unconfirmed ancestors poses complications. The remedy may involve structuring the transaction chain as A -&gt; B -&gt; {C, D, CPFP bump}, ensuring the funding transaction has only confirmed inputs so that subsequent CPFP-enabled transactions for fee bumps remain permissible.</summary>
    <published>2024-02-01T22:58:04.876000+00:00</published>
  </entry>
</feed>

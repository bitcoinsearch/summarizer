<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - MEOW: Mint eCash On Will</title>
  <updated>2024-01-27T01:54:48.775965+00:00</updated>
  <author>
    <name>1440000bytes 2024-01-26 22:27:20.056000+00:00</name>
  </author>
  <author>
    <name>ursuscamp 2024-01-26 21:25:44.124000+00:00</name>
  </author>
  <author>
    <name>bytes  . 2024-01-23 04:21:49.150000+00:00</name>
  </author>
  <link href="delvingbitcoin/Jan_2024/1355_MEOW-Mint-eCash-On-Will.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1352_MEOW-Mint-eCash-On-Will.xml" rel="alternate"/>
  <link href="delvingbitcoin/Jan_2024/1296_MEOW-Mint-eCash-On-Will.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - MEOW: Mint eCash On Will</title>
    <updated>2024-01-27T01:54:48.776010+00:00</updated>
    <link href="https://delvingbitcoin.org/t/meow-mint-ecash-on-will/466" rel="alternate"/>
    <summary>The main challenge tackled by the proposed eCash protocol is to overcome the custodial risk inherent in previous implementations such as those used by cashu and fedimint. This new solution focuses on ensuring that at no point do issuers or redeemers have custody of user funds, thus enhancing privacy without compromising the security of the users' assets. 

The protocol employs a decentralized approach where multiple parties, namely Bob, Carol, and Dave, serve as redeemers without needing to be trusted entities. Their public keys are utilized, but they don't hold custody of the funds due to the requirement of a `preimage_secret`, which was exemplified using Bob's key. This system differentiates itself from traditional Chaumian eCash by avoiding custodianship, and instead of leveraging HTLCs for secure transactions.

In the provided protocol example, Alice pays Eve using eCash tokens. The transaction process includes minting eCash tokens, creating HTLCs with redeemers, and providing hashes and preimage secrets for validation and re-issuing of eCash by the recipient, Eve. These transactions hide the identities of the sender and recipient from on-chain analysis and allow for privacy-preserving payments. Additionally, the possibility of paying with multiple eCash tokens from various issuers is highlighted, which can be processed in parallel through automation, further abstracting complexity away from the end-users.

The protocol also details what happens if coordination among redeemers fails. In such cases, the eCash would become invalid, and any locked bitcoin would be returned after a set number of blocks (2016 in this case), ensuring users' funds are not permanently lost due to non-compliance by redeemers. The documentation includes Python code snippets for practical implementation and expresses a commitment to ongoing enhancement, inviting feedback to refine the system or correct any potential inaccuracies identified. Notably, the entire system is designed to maintain the anonymity of all participants involved in the issuance and redemption of eCash. 

The information about the protocol and its intricacies, including insights into the development and implementation, can be accessed through the detailed [eCash without custodial risk documentation](https://gist.github.com/moonsettler/42b588fa97a1da3ac0adea0dd16dadf2) and the related [tweet thread](https://x.com/jxpcsnmz/status/1748156002619588791?s=20) for additional context and understanding.</summary>
    <published>2024-01-26T22:27:20.056000+00:00</published>
  </entry>
</feed>

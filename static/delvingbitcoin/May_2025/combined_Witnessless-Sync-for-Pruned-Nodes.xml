<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
  <updated>2025-09-23T13:51:17.161998+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>gmaxwell</author>
      <timestamp>2025-05-31 20:19:40.088000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="0">
      <author>JoseSK999</author>
      <timestamp>2025-05-31 16:19:33.254000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/May_2025/5181_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/5178_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
    <updated>2025-09-23T13:51:17.162725+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <published>2025-05-31 20:19:40.088000+00:00</published>
    <summary>In an insightful analysis, the concept of skipping `assumed-valid` witness downloads for pruned nodes, a topic first introduced with the advent of Segregated Witness and further explored through various community inquiries and proposals, is revisited. The initial discussion on the potential efficiency gains from not verifying signatures during initial block download (IBD) for pruned nodes has evolved with the proposal outlined in a Bitcoin Core pull request, highlighting the significant bandwidth savings—over 40%—that could be achieved. This reduction in bandwidth is not only substantial in terms of data transfer but also complements the `assume-valid` feature by alleviating both CPU and bandwidth bottlenecks, making the synchronization process more efficient.
The primary concern with implementing Witnessless Sync revolves around the security implications of not checking witness data availability during the syncing process. However, the argument presented suggests that the use of `assume-valid` inherently assumes the validity and therefore the availability of witness data at some point in time. Since `assume-valid` trusts that the scripts are correct without verification, it implicitly trusts that the necessary witness data was available to validate those scripts. This logic extends to the premise that if the scripts are assumed valid, the witnesses must have been available, negating the need for redundant data availability checks typically required for pruned nodes during IBD. 
This perspective posits that the approach to Witnessless Sync adheres to the same data-availability model as that of a conventional pruned node, which only necessitates a one-time check of data availability. Given this, downloading witnesses for blocks deemed `assume-valid` may constitute an unnecessary duplication of effort. This innovation promises to streamline the operational efficiency of pruned nodes by significantly reducing their bandwidth requirements, thereby contributing to the broader scalability and sustainability of blockchain infrastructure. The detailed findings and rationale behind this conclusion are thoroughly documented in a comprehensive writeup available [here](https://gist.github.com/JoseSK999/df0a2a014c7d9b626df1e2b19ccc7fb1), inviting further discussion and critique from the community.</summary>
  </entry>
</feed>
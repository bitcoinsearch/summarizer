<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
  <updated>2025-09-21T18:39:45.431583+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>gmaxwell</author>
      <timestamp>2025-05-31 20:19:40.088000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="0">
      <author>JoseSK999</author>
      <timestamp>2025-05-31 16:19:33.254000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/May_2025/5181_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/5178_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
    <updated>2025-09-21T18:39:45.431916+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <published>2025-05-31 20:19:40.088000+00:00</published>
    <summary>The discussion begins by highlighting the potential for bandwidth to become a limiting factor for more nodes in the network, especially with the advent of proposals aimed at optimizing other aspects of the system. It notes that the issue of limited-only nodes being a small number might be interconnected with efforts to reduce bandwidth requirements. A significant reduction in bandwidth (and possibly storage) can be achieved through more efficient serialization of transactions, with savings estimated around one-third.
The core of the analysis revolves around the concept of skipping `assumed-valid` witness downloads for pruned nodes, an idea first hinted at within the context of Segregated Witness benefits but lacked practical application until `assume-valid` came into existence. Following a specific question on Bitcoin Stack Exchange two years ago, a pull request was made on Bitcoin Core to explore this idea further amid concerns over its security implications. The proposed witnessless sync approach promises over 40% bandwidth savings during Initial Block Download (IBD), amounting to significant data reductions. This efficiency is further enhanced when combined with `assume-valid`, shifting the bottleneck away from CPU and bandwidth constraints.
A key argument supporting the safety of Witnessless Sync hinges on the implicit check of data availability through `assume-valid`. If `assume-valid` is used, it's assumed that scripts are valid, which in turn implies that witness data was available since script validation would fail otherwise. This logic suggests that a Witnessless Sync node operates under the same data availability model as a regular pruned node, which only requires a one-time availability check during IBD. The redundancy of downloading witnesses, therefore, seems unnecessary for pruned nodes, echoing the author's belief in the security equivalence between Witnessless Sync and traditional pruned node operations. The analysis invites feedback, aiming to spark further discussion on its findings and implications.</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
  <updated>2025-09-14T21:45:49.731629+00:00</updated>
  <author>
    <name>gmaxwell 2025-05-31 20:19:40.088000+00:00</name>
  </author>
  <author>
    <name>JoseSK999 2025-05-31 16:19:33.254000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2025/5181_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/5178_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
    <updated>2025-09-14T21:45:49.731684+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <summary>The discourse opens with a discussion on the potential for optimizations in bandwidth to become a decisive limit for more nodes, highlighting recent proposals that aim to address this issue. It is suggested that the current situation, where only a small number of nodes are bandwidth-limited, might change if bandwidth usage could be significantly reduced. One approach to reducing bandwidth consumption involves using more efficient serialization methods for transactions, which can lower both bandwidth and storage requirements by approximately one-third.

The main body of the text delves into an analysis conducted by the author regarding the security implications of omitting witness data downloads for pruned nodes in the context of Bitcoin's Segregated Witness (SegWit) technology. The concept of skipping `assumed-valid` witness downloads was initially explored in a document that outlines the efficiencies gained from not verifying signatures, a feature not present at the introduction of `assume-valid`. Following a question raised on Bitcoin Stack Exchange two years ago, a pull request was submitted to Bitcoin Core to consider this optimization, amid concerns over its potential to diminish security. The proposed modification, which would allow pruned nodes to forego downloading witness data, promises to reduce bandwidth usage by over 40% during Initial Block Download (IBD), offering significant network savings. This enhancement is particularly effective when combined with the `assume-valid` feature, as it shifts the bottleneck away from the CPU and towards bandwidth, which is addressed by the proposal.

The author provides a link ([full writeup](https://gist.github.com/JoseSK999/df0a2a014c7d9b626df1e2b19ccc7fb1)) to their detailed analysis but summarizes the key points within the email. A primary concern with Witnessless Sync is the non-verification of witness data availability prior to syncing due to the omission of its download under `assume-valid` blocks. However, the author argues that the use of `assume-valid` implicitly confirms the availability of witness data because: 1) Trusting in the validity of scripts under `assume-valid` presupposes the availability of witnesses at some point, thus negating the need for a redundant check; 2) Pruned nodes necessitate only a one-time check for data availability during IBD, without requiring subsequent downloads for verification purposes. Consequently, the author posits that the safety of Witnessless Sync is comparable to that of traditional long-running pruned nodes, as both approaches inherently rely on the premise that necessary data was available at a past juncture. The author concludes by inviting feedback and criticisms of their findings, indicating an openness to dialogue on the subject.</summary>
    <published>2025-05-31T20:19:40.088000+00:00</published>
  </entry>
</feed>

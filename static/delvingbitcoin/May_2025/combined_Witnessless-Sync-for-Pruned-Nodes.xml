<?xml version="1.0" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
  <updated>2025-09-21T20:01:30.151709+00:00</updated>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <thread>
    <message id="msg_1" depth="0" position="0">
      <author>gmaxwell</author>
      <timestamp>2025-05-31 20:19:40.088000+00:00</timestamp>
    </message>
    <message id="msg_2" depth="0" position="0">
      <author>JoseSK999</author>
      <timestamp>2025-05-31 16:19:33.254000+00:00</timestamp>
    </message>
  </thread>
  <link href="delvingbitcoin/May_2025/5181_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/5178_Witnessless-Sync-for-Pruned-Nodes.xml" rel="alternate"/>
  <entry>
    <id>2</id>
    <title>Combined summary - Witnessless Sync for Pruned Nodes</title>
    <updated>2025-09-21T20:01:30.152472+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <published>2025-05-31 20:19:40.088000+00:00</published>
    <summary>The discussion opens with an exploration of how bandwidth limitations affect node efficiency and suggests that optimizing transaction serialization could significantly reduce both storage and bandwidth requirements by approximately one-third. It then transitions into a detailed analysis regarding the security implications of omitting witness downloads for pruned nodes, a concept initially hinted at in the context of Segregated Witness (SegWit) benefits. This idea gained traction following a question on Bitcoin Stack Exchange and a subsequent proposal made through a GitHub pull request in Bitcoin Core, aimed at reducing bandwidth consumption by over 40% during Initial Block Download (IBD), thus saving hundreds of GBs of data.
The analysis specifically addresses a primary concern related to this optimization: the potential security reduction due to not checking witness data availability directly. However, it argues that using the `assume-valid` feature effectively bypasses this concern. The logic presented is that if a user opts for `assume-valid`, they inherently trust that the block scripts are valid. For these scripts to be deemed valid, their corresponding witness data must have been available at some point, implying that the witness availability check, although not performed in the traditional manner, is implicitly conducted through the assumption of script validity. 
This reasoning leads to the conclusion that the model of data availability used by a node employing Witnessless Sync aligns with that of a regular pruned node. Pruned nodes perform a singular, initial data availability verification during IBD and do not re-download blocks to re-verify this data availability in the future. Thus, since Witnessless Sync essentially includes this initial verification step within its operational logic through `assume-valid`, it is posited to offer a security stance comparable to that of any long-standing pruned node. The author invites feedback on this perspective, indicating a willingness to engage in further discussion on the topic.</summary>
  </entry>
</feed>
<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Dust Expiry: Clean the UTXO set from spam</title>
  <updated>2025-05-21T02:51:57.168453+00:00</updated>
  <author>
    <name>aurelian_btc 2025-05-20 23:28:30.198000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Dust Expiry: Clean the UTXO set from spam</title>
    <updated>2025-05-21T02:51:57.168481+00:00</updated>
    <link href="https://delvingbitcoin.org/t/dust-expiry-clean-the-utxo-set-from-spam/1707/19" rel="alternate"/>
    <summary>The discussion revolves around a proposed change in how transactions are verified within a blockchain network, specifically targeting the way unspent transaction outputs (UTXOs) are managed. The suggestion is for miners to commit to the set of UTXOs deemed expired within each block they mine, as opposed to the current model that requires spenders to provide simplified payment verification (SPV) proofs. This adjustment aims to alleviate the responsibility from wallet users to generate these proofs and allows nodes that have pruned their blockchain data to still validate transactions by keeping track of which UTXOs have been marked as expired.

Further exploration of this idea reveals potential benefits in terms of blockchain storage management and fee structures. By incorporating this method, there's an opportunity to rethink how small, negligible amounts of cryptocurrency ("dust" UTXOs) are treated, suggesting that these could be both pruned from records to save space and deterred by imposing higher fees upon spending. Conversely, UTXOs that are large but presumed not to be spent again (e.g., due to being lost) could be pruned without the need to penalize spenders with additional fees. This approach suggests a nuanced method of handling different types of UTXOs, balancing between encouraging efficient storage use and penalizing unnecessary transactions.</summary>
    <published>2025-05-20T23:28:30.198000+00:00</published>
  </entry>
</feed>

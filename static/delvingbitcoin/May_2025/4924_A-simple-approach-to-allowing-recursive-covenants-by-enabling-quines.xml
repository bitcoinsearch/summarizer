<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>0</id>
  <title>A simple approach to allowing recursive covenants by enabling quines</title>
  <updated>2025-05-03T02:41:11.009170+00:00</updated>
  <author>
    <name>bramcohen 2025-05-02 23:23:13.633000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>0</id>
    <title>A simple approach to allowing recursive covenants by enabling quines</title>
    <updated>2025-05-03T02:41:11.009205+00:00</updated>
    <link href="https://delvingbitcoin.org/t/a-simple-approach-to-allowing-recursive-covenants-by-enabling-quines/1655" rel="alternate"/>
    <summary>The discussion revolves around the introduction of simple opcodes to Bitcoin Script, enhancing its functionality by enabling recursive covenants in a straightforward manner. The proposal includes adding new opcodes that bypass the need for concatenation in quining processes, focusing directly on hashing. This approach not only streamlines the creation of recursive covenants but also reduces the potential bloat caused by using an alternative opcode like OP_CAT, which would effectively double script sizes.

A specific application highlighted is the implementation of a vault with dual keys: a hot key, subject to spending rate limits, and a cold key, without such restrictions. The essence of this Bitcoin Script lies in its ability to differentiate between the two keys and apply corresponding conditions for transactions. For transactions involving the cold key, the script simply verifies the presence of a matching signature. Conversely, transactions initiated with the hot key are subjected to additional checks, including transaction output size regulations, enforcement of a relative timelock to restrict spending rates, and the necessity for the transaction output to mirror the new amount while encapsulating the original script logic.

This example underscores the practicality and utility of incorporating such scripts into the Bitcoin network, facilitating advanced functions like recursive covenants without necessitating overly complex scripting mechanisms. Although the discussion suggests that a loop construct could further benefit smart coin development within Bitcoin Script, it acknowledges the efficiency and sufficiency of the proposed method for executing simpler applications. Through the requirement of a UTXO spend with each iteration, these scripts inherently support loop-like functionalities, albeit in a somewhat constrained manner.</summary>
    <published>2025-05-02T23:23:13.633000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Witnessless Sync for Pruned Nodes</title>
  <updated>2025-09-23T13:51:01.224766+00:00</updated>
  <author>
    <name>JoseSK999 2025-05-31 16:19:33.254000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Witnessless Sync for Pruned Nodes</title>
    <updated>2025-09-23T13:51:01.224793+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <summary>The discussion revolves around the security implications of enabling Witnessless Sync for pruned nodes in Bitcoin's blockchain, a concept that seeks to eliminate the need for downloading witness data by relying on the `assume-valid` feature. This idea was inspired by the potential efficiency gains highlighted in the context of Segregated Witness (SegWit) and has evolved through community feedback and technical proposals, notably through a significant [Bitcoin Core GitHub pull request](https://github.com/bitcoin/bitcoin/pull/27050). The primary motivation behind this proposal is to substantially reduce bandwidth requirements—by over 40% according to estimates—thereby alleviating hundreds of gigabytes of data during the Initial Block Download (IBD) phase. Such an approach not only promises to mitigate bandwidth constraints but also complements the `assume-valid` feature, shifting the performance bottleneck away from CPU and bandwidth limitations.

The core argument in favor of Witnessless Sync pivots on the premise that the `assume-valid` setting inherently confirms the availability and validity of witness data without necessitating its download. This is based on the logic that if a user opts for `assume-valid`, they implicitly trust the validity of scripts within those blocks. For these scripts to be considered valid, their corresponding witnesses must have been available at some point; thus, missing witness data would lead to script evaluation failures, which `assume-valid` assumes does not occur. Consequently, it is argued that since the initial data availability check (performed during IBD) implicitly verifies the presence of witness data, further downloads of such data for validation purposes are redundant. 

This perspective suggests that the process of Witnessless Sync could follow the same data-availability model as that of a standard pruned node, which does not require repeated checks for data availability after the initial verification. Therefore, the proposition is that implementing Witnessless Sync would not compromise security compared to traditional pruned nodes, as both approaches fundamentally rely on the assumption that necessary data was available at some critical juncture. The author of this analysis invites feedback and criticism on these findings, underscoring a collaborative approach to evaluating the safety and efficiency of proposed changes to Bitcoin's network protocol. Further details and the comprehensive analysis can be explored through the provided [gist link](https://gist.github.com/JoseSK999/df0a2a014c7d9b626df1e2b19ccc7fb1).</summary>
    <published>2025-05-31T16:19:33.254000+00:00</published>
  </entry>
</feed>

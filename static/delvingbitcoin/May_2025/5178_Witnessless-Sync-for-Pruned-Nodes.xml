<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Witnessless Sync for Pruned Nodes</title>
  <updated>2025-10-03T02:22:28.820508+00:00</updated>
  <author>
    <name>JoseSK999 2025-05-31 16:19:33.254000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Witnessless Sync for Pruned Nodes</title>
    <updated>2025-10-03T02:22:28.820548+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <summary>The discussion revolves around the concept of Witnessless Sync for pruned nodes in the Bitcoin blockchain, particularly focusing on the security implications and bandwidth savings of skipping `assumed-valid` witness downloads. The original proposition for this method was highlighted in a piece on [Segregated Witness Benefits](https://bitcoincore.org/en/2016/01/26/segwit-benefits/efficiency-gains-when-not-verifying-signatures), which introduced the idea before the `assume-valid` feature was implemented. Following a question on Bitcoin Stack Exchange about why witness data is downloaded during initial block download (IBD) in prune mode, a pull request ([PR](https://github.com/bitcoin/bitcoin/pull/27050)) was submitted to Bitcoin Core to explore this further amid concerns that it might reduce security.

The analysis put forth argues that Witnessless Sync could significantly reduce bandwidth usage by over 40% during IBD, amounting to substantial data savings. This efficiency gain complements the `assume-valid` feature well as it alleviates not just CPU but also bandwidth bottlenecks. The implementation of such a feature has been described as relatively straightforward. A key point of contention, however, is the availability of witness data. Critics suggest that not downloading witness data might compromise the integrity of the verification process since this data isn't checked for availability beforehand.

However, the counterargument presented relies on the premise that using `assume-valid` already implies trust in the validity of scripts within blocks. For these scripts to be valid, their corresponding witnesses must have been available at some pointâ€”meaning that if a block is `assumed-valid`, its witness data was implicitly verified as available. Therefore, the process of Witnessless Sync does not neglect data availability but rather follows the same model as regular pruned nodes, which only require a one-time check of data availability during IBD. This perspective suggests that downloading witness data for blocks marked as `assume-valid` is redundant since their witness availability was inherently confirmed. The proposal concludes that Witnessless Sync should be considered as secure as maintaining a long-running pruned node because the essential check for data availability has been indirectly satisfied. The author invites feedback and criticism on this view, aiming to refine the understanding and application of Witnessless Sync in the context of Bitcoin's network efficiency and security.</summary>
    <published>2025-05-31T16:19:33.254000+00:00</published>
  </entry>
</feed>

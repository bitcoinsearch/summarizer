<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Witnessless Sync for Pruned Nodes</title>
  <updated>2025-09-15T00:53:16.834003+00:00</updated>
  <author>
    <name>JoseSK999 2025-05-31 16:19:33.254000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Witnessless Sync for Pruned Nodes</title>
    <updated>2025-09-15T00:53:16.834037+00:00</updated>
    <link href="https://delvingbitcoin.org/t/witnessless-sync-for-pruned-nodes/1742" rel="alternate"/>
    <summary>The recent analysis delves into the security implications of excluding `assumed-valid` witness downloads for pruned nodes, a concept initially highlighted in relation to Segregated Witness Benefits. The introduction of `assume-valid` brought this possibility into sharper focus, especially following a pertinent Bitcoin Stack Exchange question and the subsequent proposal made via a pull request on Bitcoin Core's GitHub repository. Despite concerns regarding potential security reductions, the proposed witnessless synchronization for pruned nodes promises a significant reduction in bandwidth usageâ€”over 40%, amounting to hundreds of GBs during initial block download (IBD). This efficiency gain is not just in terms of network resources but also complements the `assume-valid` feature by lessening the load on both CPU and bandwidth.

The main critique against witnessless synchronization revolves around the non-verification of witness data availability, given its omission during the downloading phase for `assume-valid` blocks. However, an argument is made that such verification is implicitly conducted through the `assume-valid` process itself. The rationale is as follows: utilizing `assume-valid` implies trust in the validity of scripts; for these scripts to be valid, the associated witnesses must have been available at some point, rendering their data implicitly verified. This logic suggests that witnessless sync operates under the same data-availability model as standard pruned nodes, which require only a single data availability check during IBD. Thus, downloading witness data again would constitute an unnecessary re-verification of what has already been established, making witnessless sync seemingly as secure as the traditional method used by long-running pruned nodes.

For further details, interested parties are encouraged to consult the full writeup available at [this link](https://gist.github.com/JoseSK999/df0a2a014c7d9b626df1e2b19ccc7fb1), which offers a comprehensive examination of the topic. This analysis invites feedback and criticism from the community, aiming to refine the understanding and implementation of witnessless syncing within the context of Bitcoin's evolving technological landscape.</summary>
    <published>2025-05-31T16:19:33.254000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - A simple approach to allowing recursive covenants by enabling quines</title>
  <updated>2025-05-09T02:46:42.325067+00:00</updated>
  <author>
    <name>bramcohen 2025-05-08 06:38:16.682000+00:00</name>
  </author>
  <author>
    <name>ajtowns 2025-05-08 04:39:17.052000+00:00</name>
  </author>
  <author>
    <name>bramcohen  . 2025-05-07 04:32:30.503000+00:00</name>
  </author>
  <author>
    <name>bramcohen  . 2025-05-02 23:23:13.633000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2025/4960_A-simple-approach-to-allowing-recursive-covenants-by-enabling-quines.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4958_A-simple-approach-to-allowing-recursive-covenants-by-enabling-quines.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4952_A-simple-approach-to-allowing-recursive-covenants-by-enabling-quines.xml" rel="alternate"/>
  <link href="delvingbitcoin/May_2025/4924_A-simple-approach-to-allowing-recursive-covenants-by-enabling-quines.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - A simple approach to allowing recursive covenants by enabling quines</title>
    <updated>2025-05-09T02:46:42.325117+00:00</updated>
    <link href="https://delvingbitcoin.org/t/a-simple-approach-to-allowing-recursive-covenants-by-enabling-quines/1655" rel="alternate"/>
    <summary>The proposal discussed aims to refine Bitcoin Script by incorporating P2WSH (Pay to Witness Script Hash) to enhance the scripting capabilities. It suggests that while P2WSH itself remains unchanged, an opcode enforcing the existence of a P2WSH in transactions could be introduced to specify a sha256 of a script, focusing on the potential to facilitate recursive covenants within the scripting language. This approach seeks to maintain simplicity and backward compatibility, crucial for Bitcoin Script's evolution, without necessitating options for taproot integration.

A significant aspect of the proposal is the introduction of 'reverse order' opcodes, designed to allow scripts to interpret subsequent script bytes in reverse order. This innovative feature aims to improve script execution flexibility and functionality. The suggested opcodes, including those capable of reversing the byte order of strings or enabling incremental hashing opcodes to implicitly reverse operated strings, are highlighted as simple yet immediately useful. By adhering to Bitcoin Scriptâ€™s principle of simplicity, these opcodes could serve not only current use cases but also lay the groundwork for future enhancements involving more complex functionalities.

The proposal elaborates on the practical application of these changes through the example of a vault with dual keys: one hot key with spending rate limits and one cold key without such restrictions. It illustrates how the new script capabilities could differentiate between transactions initiated with either key, applying specific conditions accordingly. For cold key transactions, verification of a matching signature suffices. Meanwhile, hot key transactions require additional checks like output size regulations, enforcement of relative timelocks, and ensuring transaction outputs reflect new amounts while retaining the original script logic. This example emphasizes the utility of the proposed opcodes in enabling advanced functionalities such as recursive covenants, without complicating the scripting process.

Furthermore, while acknowledging the potential benefits of a loop construct for smart coin development, the proposal reasons that the suggested method, necessitating a UTXO spend with each iteration, inherently provides loop-like functionality. This constrained approach aligns with the objective of enhancing script capabilities in a measured manner, suggesting that even without direct loop constructs, significant advancements in script functionality can be achieved through the proposed modifications.</summary>
    <published>2025-05-08T06:38:16.682000+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Verification of RISC-V execution using OP_CCV</title>
  <updated>2025-05-20T02:46:01.511945+00:00</updated>
  <author>
    <name>halseth 2025-05-19 16:41:49.747000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Verification of RISC-V execution using OP_CCV</title>
    <updated>2025-05-20T02:46:01.511985+00:00</updated>
    <link href="https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313/3" rel="alternate"/>
    <summary>In the realm of programming, particularly when it comes to emulating unsigned 32-bit RISC-V opcodes within the constraints of Bitcoin Script's 31-bit support, a significant challenge arises. This limitation necessitates the reimagination and reimplementation of bit-by-bit arithmetic entirely within script. The intricacy of this task cannot be understated, as it inherently leads to considerably large scripts. The crux of enhancing performance and efficiency in this context lies in transitioning to 64-bit arithmetics. Such a shift promises not just an improvement but arguably the most substantial leap forward in overcoming the current limitations imposed by the inherent discrepancies between the capabilities of RISC-V opcodes and the Bitcoin Script.</summary>
    <published>2025-05-19T16:41:49.747000+00:00</published>
  </entry>
</feed>

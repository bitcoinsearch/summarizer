<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Withdrawing OP_VAULT (BIP-345)</title>
  <updated>2025-05-16T02:45:37.849097+00:00</updated>
  <author>
    <name>salvatoshi 2025-05-15 09:14:49.252000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Withdrawing OP_VAULT (BIP-345)</title>
    <updated>2025-05-16T02:45:37.849136+00:00</updated>
    <link href="https://delvingbitcoin.org/t/withdrawing-op-vault-bip-345/1670/4" rel="alternate"/>
    <summary>The discussion revolves around the comparison between two opcode proposals, `OP_VAULT` and `OP_CCV`, focusing primarily on their potential for Maximally Extractable Value (MEV) and their functionality differences. It is argued that both opcodes essentially pose the same level of MEV concerns, suggesting that there is little to differentiate them in terms of their vulnerability or resistance to MEV-related issues. This similarity extends to the ability of both opcodes to facilitate certain constructions within blockchain operations, with variations between them being minor and mostly related to ergonomics and cost-efficiency rather than substantive functional differences.

A key feature distinguishing `OP_VAULT` from `OP_CCV` is its capability to propagate multiple pieces of data to the output by prepending them as push opcodes for the next script. This contrasts with `OP_CCV`, which, unless combined with other operations, typically handles a single piece of data at a time. Despite this, the utility of passing multiple pieces of data in the context of vaults and similar scripts is questioned, with the argument made that it may not be a necessary feature given the current understanding and use cases of vault-like structures in blockchain applications.

Furthermore, the flexibility of `OP_CCV` in selecting the next taptree is highlighted as a significant advantage, particularly in scenarios involving vault-like spending conditions for recovery purposes. A practical example provided is the use of `OP_VAULT` for recovery, where the inability to replace more than a single leaf without resorting to complex IF/ELSE branching is seen as a limitation. In contrast, `OP_CCV` allows for the dropping of multiple vault-like leaves in response to any one of them being triggered, offering a more streamlined and potentially more secure mechanism for managing conditional spending paths within vault-like constructs. This distinction underscores `OP_CCV`'s broader applicability and versatility in handling various vault configurations, further supported by the reference to [a detailed explanation of using OP_VAULT for recovery](https://delvingbitcoin.org/t/using-op-vault-for-recovery/150), which illustrates the practical implications and considerations involved in these types of blockchain operations.</summary>
    <published>2025-05-15T09:14:49.252000+00:00</published>
  </entry>
</feed>

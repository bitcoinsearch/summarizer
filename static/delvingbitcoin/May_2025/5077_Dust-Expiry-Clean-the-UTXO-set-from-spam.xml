<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Dust Expiry: Clean the UTXO set from spam</title>
  <updated>2025-05-22T02:50:41.265266+00:00</updated>
  <author>
    <name>gmaxwell 2025-05-21 21:59:12.259000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Dust Expiry: Clean the UTXO set from spam</title>
    <updated>2025-05-22T02:50:41.265297+00:00</updated>
    <link href="https://delvingbitcoin.org/t/dust-expiry-clean-the-utxo-set-from-spam/1707/25" rel="alternate"/>
    <summary>The discussion revolves around the complexities and challenges associated with accumulator proofs, especially when they require updates, highlighting their costliness and inefficiency for those aiming to track them comprehensively, referred to as "index nodes." The concept of excluding certain coins from these proofs is considered advantageous, but concerns arise regarding the complexity of the criteria for exclusion. Simplification through the imposition of an absolute limit on coin value for accumulator inclusion is proposed as a solution, ensuring that coins exceeding this limit are exempt. This approach also inherently caps the size of the non-accumulated UTXO set by dividing the total number of coins by the specified limit, potentially allowing for the preallocation of resources.

Further exploration suggests a hybrid solution to mitigate some of the issues identified with accumulators. This involves combining two different types of proofs: a static txout style proof for verifying coin identity, which remains unchanged, and a dynamic utxotree style proof specifically for the spentness status of coins. This bifurcation could increase the total proof size but offers a significant advantage in reducing the necessity for nodes that only maintain information on spentness to handle the full breadth of proof data. The utxotree proof, focused solely on spentness, might also be more efficient than initially assumed, given the possibility of aggregating multiple spentness commitments under a single leaf, thereby optimizing the process.</summary>
    <published>2025-05-21T21:59:12.259000+00:00</published>
  </entry>
</feed>

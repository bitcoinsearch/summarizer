<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Verification of RISC-V execution using OP_CCV</title>
  <updated>2025-05-20T02:46:15.949710+00:00</updated>
  <author>
    <name>halseth 2025-05-19 16:41:49.747000+00:00</name>
  </author>
  <author>
    <name>sjors  . 2025-03-26 14:08:28.692000+00:00</name>
  </author>
  <author>
    <name>halseth  . 2023-12-21 13:59:05.005000+00:00</name>
  </author>
  <link href="delvingbitcoin/May_2025/5031_Verification-of-RISC-V-execution-using-OP-CCV.xml" rel="alternate"/>
  <link href="delvingbitcoin/March_2025/4633_Verification-of-RISC-V-execution-using-OP-CCV.xml" rel="alternate"/>
  <link href="delvingbitcoin/Dec_2023/846_Verification-of-RISC-V-execution-using-OP-CCV.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Verification of RISC-V execution using OP_CCV</title>
    <updated>2025-05-20T02:46:15.949760+00:00</updated>
    <link href="https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313" rel="alternate"/>
    <summary>The significant advancement in programming projects, specifically those involving emulation of a 32-bit system, is hindered by the limitation of Bitcoin Script, which only supports 31-bit arithmetic. This restriction necessitates the complete reimplementation of bit-by-bit arithmetic within the script, resulting in considerably larger scripts. A modest increase in numerical capacity, as discussed, could simplify the code structure and improve performance without directly shifting to a 64-bit system, as suggested by the Great Script Restoration project. The initiative for restoring disabled opcodes to a 64-bit context, advocated by Rusty Russell, aims at enhancing system design and functionality through the comprehensive restoration of previously disabled opcodes. This effort is detailed further on [Rusty Russell's blog](https://rusty.ozlabs.org/2024/01/19/the-great-opcode-restoration.html).

A novel proof of concept tool, introduced for tracing the execution of RISCV-32 binaries and generating Bitcoin script for on-chain verification, highlights the practical application of such advancements. Available at [Bitcoin Elftrace](https://github.com/halseth/elftrace), this tool leverages the OP_CHECKCONTRACTVERIFY (OP_CCV) covenant opcode, as outlined in the MATT proposal found [here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021182.html). By committing to a single 32-bit hash—specifically, a merkle root—in a transaction's output and allowing for its modification upon spending, the tool underscores the efficacy of OP_CCV in enforcing dynamic data inclusion within outputs, alongside a static taptree. While OP_CCV efficiently fulfills this role, there is openness to exploring other covenant proposals that might serve similar functions. Further insights into this development are shared through a Twitter post available [here](https://twitter.com/johanth/status/1737778712987287990), inviting feedback on this innovative approach.</summary>
    <published>2025-05-19T16:41:49.747000+00:00</published>
  </entry>
</feed>

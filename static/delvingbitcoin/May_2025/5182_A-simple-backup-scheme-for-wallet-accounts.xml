<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>A simple backup scheme for wallet accounts</title>
  <updated>2025-07-01T05:05:51.228646+00:00</updated>
  <author>
    <name>salvatoshi 2025-05-31 22:24:07.511000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>A simple backup scheme for wallet accounts</title>
    <updated>2025-07-01T05:05:51.228678+00:00</updated>
    <link href="https://delvingbitcoin.org/t/a-simple-backup-scheme-for-wallet-accounts/1607/17" rel="alternate"/>
    <summary>The proposed solution to a potential issue in the specifications for hardware signers involves adding a `/T` step to the derivation path of each involved key rather than altering the descriptor template. This approach would allow the current descriptor, such as `tr(musig(@0,@1)/**,{and_v(v:pk(@0/**),older(12960))}`, to remain unchanged, avoiding breaking changes. The addition of the `/T` step would occur within the key origins, ensuring compatibility and flexibility.

The suggestion recognizes that requiring the `T` value to be identical across all keys in a multiparty setting is impractical. Given that participants are likely to provide extended public keys (xpubs) at different times, enforcing uniformity would necessitate additional communication, complicating the process. Moreover, while it might be expected for wallets to store the key origins of other parties, this isn't always feasible. Thus, wallets should ideally not depend on having this information. This approach maintains the integrity of the existing system while introducing a method to accommodate the necessary functionality without imposing undue constraints on participants.</summary>
    <published>2025-05-31T22:24:07.511000+00:00</published>
  </entry>
</feed>

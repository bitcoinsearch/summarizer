<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Dust Expiry: Clean the UTXO set from spam</title>
  <updated>2025-05-21T02:54:05.292171+00:00</updated>
  <author>
    <name>RobinLinus 2025-05-20 07:11:24.650000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Dust Expiry: Clean the UTXO set from spam</title>
    <updated>2025-05-21T02:54:05.292203+00:00</updated>
    <link href="https://delvingbitcoin.org/t/dust-expiry-clean-the-utxo-set-from-spam/1707/9" rel="alternate"/>
    <summary>The discussion revolves around the safety and efficiency of a proposed method for handling unspent transaction outputs (UTXOs) in the context of blockchain reorganizations, commonly known as reorgs. The method under scrutiny utilizes a format to identify UTXOs by their location within the blockchain, denoted as `block_height/TX_index/output_index`. This approach facilitates the easy identification and deletion of UTXOs based on their block height, which becomes particularly useful during a blockchain reorganization. During such an event, all locations with a `block_height` greater than that of the reorganized block are deleted from the expired UTXO set. Additionally, locations spent in blocks that were removed during the reorg are reintroduced, ensuring the integrity and accuracy of the UTXO set post-reorganization.

A significant improvement to this method is suggested, involving the replacement of expired UTXOs with a 20-byte hash. This modification not only simplifies the overall scheme but also reduces the cost associated with spending expired UTXOs. Moreover, it effectively prunes approximately 75% of all spam from the system, enhancing its efficiency.

However, a potential issue is identified with the original proposal concerning how it handles UTXOs that expire on a previous fork but are spent on the reorganizing fork shortly before their expiration. In such cases, those UTXOs would have already been deleted from the set, posing challenges for verifying valid blocks. A solution is offered where the deleted UTXO can be restored using its location, assuming the block in which the UTXO was created is still accessible. If the block is no longer available locally, it can be requested from peers, thereby allowing for the restoration and verification process to proceed. This highlights a critical consideration for maintaining robustness and resilience in the management of UTXOs amidst blockchain reorganizations.</summary>
    <published>2025-05-20T07:11:24.650000+00:00</published>
  </entry>
</feed>

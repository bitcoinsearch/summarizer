<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>1</id>
  <title>Libbitcoin for Core people</title>
  <updated>2024-11-29T02:26:49.221042+00:00</updated>
  <author>
    <name>sjors 2024-11-28 12:13:10.716000+00:00</name>
  </author>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>1</id>
    <title>Libbitcoin for Core people</title>
    <updated>2024-11-29T02:26:49.221079+00:00</updated>
    <link href="https://delvingbitcoin.org/t/libbitcoin-for-core-people/1222/12" rel="alternate"/>
    <summary>The discussion raises intriguing questions about the performance capabilities of blockchain technology, particularly focusing on a benchmark that suggests a potentially significant performance improvement in Initial Block Download (IBD) times. The claim under scrutiny is a 15x performance difference, which, if true, could considerably advance the efficiency of blockchain operations. This performance disparity is especially noteworthy given it persists despite inherent disadvantages such as a native sha256 handicap.

The inquiry also delves into the factors that might influence such performance outcomes, including machine properties and configurations. For instance, the mention of achieving IBD in approximately 5 hours on certain machines highlights the role of high `-dbcache` values and gigabit internet connections. This leads to speculation about whether a library like libbitcoin could further reduce IBD times, possibly to 20 minutes, though skepticism is expressed regarding this figure due to potential disk speed limitations. However, even a threefold improvement in performance on standard consumer hardware, with typical internet bandwidth and modest RAM, is considered significant enough to merit thorough investigation.

The email elaborates on Bitcoin Core's current use of parallel processing during IBD, specifically in block download and script validation. An attempt to enhance this by increasing the parallelization limit (`-par`) from 16 to 32 showed no noticeable difference, suggesting that there might be untapped potential in executing more processes concurrently. Additionally, it discusses the strategy employed by Bitcoin Core to minimize resource expenditure on validating chains that are potentially invalid by attempting to abort these validations as early as possible. This approach contrasts with a more aggressive validation strategy that accepts higher CPU and I/O usage to validate chains with the most proof of work (PoW), indicating room for optimization in parallel processing and resource allocation during IBD.</summary>
    <published>2024-11-28T12:13:10.716000+00:00</published>
  </entry>
</feed>

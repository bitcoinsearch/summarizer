<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - An Idea to Improve Connectivity of the Graph</title>
  <updated>2023-07-31T19:41:34.621665+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-04-12 00:46:16+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-04-11 20:15:41+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-04-11 09:40:11+00:00</name>
  </author>
  <author>
    <name>Alejandro Ranchal Pedrosa 2018-04-11 08:43:28+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-04-06 12:23:45+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-04-05 16:13:19+00:00</name>
  </author>
  <author>
    <name>Alejandro Ranchal Pedrosa 2018-03-29 15:10:37+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-02-05 13:21:54+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-02-04 21:41:10+00:00</name>
  </author>
  <author>
    <name>Abhishek Sharma 2018-02-04 18:21:48+00:00</name>
  </author>
  <link href="lightning-dev/April_2018/001167_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001166_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001161_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001159_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001138_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001135_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001129_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000991_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000987_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2018/000986_An-Idea-to-Improve-Connectivity-of-the-Graph.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - An Idea to Improve Connectivity of the Graph</title>
    <updated>2023-07-31T19:41:34.621665+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/000986.html" rel="alternate"/>
    <summary>In a technical discussion, the issue of invalidations in a branching tree structure was raised. The use of 1 bit sequence diffs was cited as the main cause for an increase in invalidations. A specific example was given where a branching factor of 46 and a tree depth of 11 resulted in 1.48e11 updates. The conversation then turned to the imposition of a total of 288 blocks wait time.ZmnSCPxj shares a technique called `nSequence`d transactions that allows for indefinite lifetime of off-chain outputs while being protected against unresponsive counterparty. This technique involves using a sequence of transactions off-chain, with only the funding transaction on-chain. The kickoff transaction triggers the countdown on the CSV encumbered scripts, and the counter is incremented by replacing the appropriate transaction with one that has a different nSequence value. This technique offers an alternative approach for creating off-chain transactions.Christian points out the advantages of DMCs over LN, including no state asymmetry and no toxic state information leakage. However, long-lasting DMCs require either an initial refund transaction with a very distant relative locktime or periodic updates in the form of a refund transaction pointing to a new refund transaction resetting the initial locktime. This can result in funds being locked for a significant amount of time without penalizing the unresponsive party, leading to decreased worst-case utility of the channel due to accumulative blockchain fees.The issue of retaliatory constructions in multi-party cases is discussed. Pre-committed retaliation transactions have been proposed as a way to identify and punish misbehaving parties, but this solution has its own challenges. Retaliatory constructions do not impose limits on the number of updates allowed to the off-chain "purse," making them more suitable for channels. Rusty shachains require only O(1) storage on the number of updates, making retaliatory constructions more suitable for channels.Abhishek Sharma proposes a modification to the Lightning Network that allows for fewer channels to be open. This involves three parties committing their funds all at once and being able to move their funds between the three open channels if they have the permission of the counterparty. This mechanism allows for routing transactions without opening new channels and waiting for network verification.In summary, there are ongoing discussions on various technical aspects of the Lightning Network and its scalability in multi-party cases. Different techniques such as `nSequence`d transactions and retaliatory constructions are being explored to address issues such as invalidations and channel restructuring. Abhishek Sharma has proposed a modification to minimize the number of channels needed to be open by enabling funds to be moved between multiple open channels. Overall, these developments aim to improve the efficiency and functionality of off-chain transactions.</summary>
    <published>2018-04-12T00:46:16+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Towards a gridlike Lightning Network</title>
  <updated>2023-07-31T19:54:30.686983+00:00</updated>
  <author>
    <name>Benjamin Mord 2018-04-20 20:43:20+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-04-20 03:24:40+00:00</name>
  </author>
  <author>
    <name>Benjamin Mord 2018-04-19 18:21:01+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-04-19 02:04:52+00:00</name>
  </author>
  <author>
    <name>Benjamin Mord 2018-04-18 23:56:17+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-24 12:07:52+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-23 15:29:19+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-03-20 03:19:02+00:00</name>
  </author>
  <link href="lightning-dev/April_2018/001216_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001208_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001206_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001205_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001204_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001118_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001117_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <link href="lightning-dev/March_2018/001108_Towards-a-gridlike-Lightning-Network.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Towards a gridlike Lightning Network</title>
    <updated>2023-07-31T19:54:30.687995+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March/001108.html" rel="alternate"/>
    <summary>In a conversation on the Lightning-dev mailing list, Benjamin and ZmnSCPxj discuss the identification of a 'neighborhood' and establishment of order within that neighborhood for cycle formation in the Lightning Network. Bloom filters are praised as a valuable contribution to defining a neighborhood and maintaining competition and redundancy. However, ZmnSCPxj raises concerns about the robustness of establishing cycle order in a dynamic network.ZmnSCPxj suggests a heuristic where the probability of establishing a channel is proportional to the number of bits in common in the pubkey hash, normalized by the number of observed nodes. This algorithm aims to flatten the number of channels a node will have and reduce centralization while maintaining similar reachability to random selection. The algorithm dynamically sizes neighborhoods to be small, with a high probability of 3-5 member neighborhoods. The main benefit of this algorithm is reducing centralization and flattening the number of channels per node.ZmnSCPxj discusses the possibility of nodes tracking payment routes through their channels to identify under-served nodes and establish direct channels. However, this compromise would require longer minimum routes for privacy.In another thread, the Lightning-dev mailing list discusses the idea of using cyclic superhubs to organize the Lightning Network. An algorithm is proposed that, given a set of nodes extracted from node gossip, returns a peer to connect and fund a channel to. The algorithm involves successive filtering and sorting nodes based on hash values to identify a candidate peer. A bug is identified in a simulation of this algorithm, which affects reachability.ZmnSCPxj suggests better termination conditions for searching for a cyclic superhub and proposes improvements to the algorithm. The algorithm starts with a 32-bit number and iterates over nodes, comparing hash values to find suitable peers. ZmnSCPxj emphasizes the importance of coordination and suggests testing the algorithm's effects through simulations.Benjamin Mord asks if there is a simulation platform and an API to separate strategies from the protocol. He also wonders if there is a place to specify heuristics where coordination can benefit all participants.Overall, the discussions revolve around the identification of neighborhoods and cycle order establishment in the Lightning Network. Various algorithms and heuristics are proposed to enhance network efficiency, reduce centralization, and improve reachability. The need for simulations and coordination mechanisms is also highlighted.ZmnSCPxj has proposed an algorithm to identify peer nodes for connecting and funding channels in the Lightning Network. The algorithm involves starting with a 32-bit number and using a hash algorithm to filter nodes based on their public key. Nodes with a matching highest bit are kept in the set, while others are removed. This process continues until the set has at least three nodes. The remaining nodes are then sorted according to hash, and the next node in the list becomes the candidate for forming a superhub.To address the issue of coordinating cyclic superhubs in the Lightning Network, ZmnSCPxj suggests utilizing node gossip to identify peers with which to form superhubs. The algorithm he proposes utilizes the extracted nodes from node gossip and performs successive filtering based on hash values and matching high bits. The resulting set of nodes is then sorted, and the candidate for forming a superhub is identified.Even if nodes have different local maps of the network, ZmnSCPxj argues that they can still potentially form non-overlapping superhubs based on the algorithm. The author emphasizes the importance of coordination in setting up cyclic superhubs but notes that coordination is only needed to identify peers for forming superhubs.In conclusion, the article discusses the concept of organizing the Lightning Network using cyclic superhubs to allow easy accessibility for all participants. The proposed algorithm utilizes node gossip to identify potential peer nodes for forming superhubs. Despite potential differences in local maps, nodes can still form non-overlapping superhubs based on the algorithm.</summary>
    <published>2018-04-20T20:43:20+00:00</published>
  </entry>
</feed>

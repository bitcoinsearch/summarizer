<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Trampoline Routing</title>
  <updated>2023-07-31T21:51:01.429474+00:00</updated>
  <author>
    <name>ZmnSCPxj 2019-08-09 04:41:17+00:00</name>
  </author>
  <author>
    <name>fiatjaf 2019-08-09 02:35:41+00:00</name>
  </author>
  <author>
    <name>fiatjaf 2019-08-05 12:15:45+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2019-08-05 07:37:52+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-08-03 03:48:48+00:00</name>
  </author>
  <author>
    <name>fiatjaf 2019-08-02 16:29:22+00:00</name>
  </author>
  <author>
    <name>Bastien TEINTURIER 2019-08-02 09:29:25+00:00</name>
  </author>
  <link href="lightning-dev/Aug_2019/002113_Trampoline-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2019/002112_Trampoline-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2019/002110_Trampoline-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2019/002106_Trampoline-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2019/002104_Trampoline-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2019/002102_Trampoline-Routing.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2019/002100_Trampoline-Routing.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Trampoline Routing</title>
    <updated>2023-07-31T21:51:01.429474+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-August/002100.html" rel="alternate"/>
    <summary>Trampoline routing is a concept introduced in Lightning Network to defer payment routing to trampoline nodes. It allows users to send payments without needing knowledge of the entire network graph. Instead, trampoline nodes are used to calculate and forward the route to the recipient. The process involves building an onion with a small trampoline onion inside and sending it through the chosen trampoline nodes until it reaches the recipient. This method simplifies onion routing thanks to variable-length onion payloads.However, there are challenges to address in trampoline routing. Trampoline nodes need to estimate a fee and cltv (Check Lock Time Verify) that allows them to route to any other trampoline node. To tackle this issue, a new node_update message can be exchanged through the existing gossip infrastructure to sync remote trampoline nodes' fees and cltv requirements. Additionally, a filter system similar to BIP37 can be implemented, where users send gossip filters to their peers to receive only updates that match these filters.There are concerns regarding the feasibility of returning calculated routes to the original caller and potential cheating by trampoline nodes. However, it is possible to return the route calculated by trampoline nodes to the original caller, enabling caching of the route and avoiding the need for trampolines in future payments. The returned route would pass through the node that provides the route, maintaining an economic incentive.In the future, as the Lightning Network grows larger, hierarchical/packet switched routing architecture may be required. Trampoline routing can be seen as a first step towards enabling this architecture. Hierarchical storage of network information may be necessary, with a detailed channel map and a rough global map with trampoline-payee association mappings.Overall, trampoline routing offers a promising solution for routing payments in Lightning Network. It enhances payment reliability and ease of use while addressing privacy and scalability concerns. Feedback on the concept, as well as the gossip and fee estimation parts, is welcomed to further improve the implementation.</summary>
    <published>2019-08-09T04:41:17+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
  <updated>2023-08-11T15:50:36.268843+00:00</updated>
  <author>
    <name>Martin Habovštiak 2023-07-16 18:11:58+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2023-07-16 11:32:08+00:00</name>
  </author>
  <author>
    <name>Martin Habovštiak 2023-07-15 20:30:06+00:00</name>
  </author>
  <author>
    <name>fiatjaf 2023-07-13 21:03:11+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2023-07-12 20:04:19+00:00</name>
  </author>
  <author>
    <name>callebtc 2023-07-06 07:22:59+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-07-06 07:10:42+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-06-19 20:34:10+00:00</name>
  </author>
  <author>
    <name>callebtc 2023-06-19 15:26:05+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004012_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004010_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004009_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004008_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004007_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004006_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004005_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003986_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <link href="lightning-dev/June_2023/003983_Potential-vulnerability-in-Lightning-backends-BOLT-11-payment-hash-does-not-commit-to-payment-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Potential vulnerability in Lightning backends: BOLT-11 "payment hash" does not commit to payment!</title>
    <updated>2023-08-11T15:50:36.268843+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-June/003983.html" rel="alternate"/>
    <summary>The LNbits team recently discovered an exploit in how invoices are handled internally, allowing attackers to create fake balances. This exploit has been fixed in LNbits version 0.10.5 and users are advised to update their systems promptly. Similar exploits may be possible in other Lightning applications, particularly those related to custodial wallets, payment processors, and account management software. The attack involves manipulating payment hashes to trick the backend into treating a malicious invoice as legitimate. To mitigate this issue, backends should use unique "checking IDs" for internal payment lookups or implement additional checks to ensure invoice integrity. Developers should prioritize implementing robust security measures and regularly updating their software to prevent such attacks. The recent incident emphasizes the importance of caution and proactive measures to address vulnerabilities in Lightning applications. For more information, please refer to this link: [link].</summary>
    <published>2023-07-16T18:11:58+00:00</published>
  </entry>
</feed>

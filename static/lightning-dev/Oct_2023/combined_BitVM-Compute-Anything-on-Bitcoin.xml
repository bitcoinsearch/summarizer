<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BitVM: Compute Anything on Bitcoin</title>
  <updated>2023-11-01T21:02:09.069414+00:00</updated>
  <author>
    <name>Russell O'Connor 2023-10-17 18:00:26+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-10-15 15:15:49+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-10-10 01:27:08+00:00</name>
  </author>
  <author>
    <name>symphonicbtc 2023-10-10 01:12:28+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2023-10-10 01:06:10+00:00</name>
  </author>
  <author>
    <name>Robin Linus 2023-10-09 13:46:24+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2023/022010_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/021997_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/021985_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/021987_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/021986_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/021984_BitVM-Compute-Anything-on-Bitcoin.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BitVM: Compute Anything on Bitcoin</title>
    <updated>2023-11-01T21:02:09.070411+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/021984.html" rel="alternate"/>
    <summary>The email conversation discusses the potential use of Simplicity's core language to generate circuits for the BitVM. The sender shares their success in compiling Simplicity expressions to polynomial constraints, suggesting that logic gates can be generated in a similar manner. They believe Simplicity could provide ready-made expressions for the BitVM.

Another contributor proposes the idea of a Scriptless Script BitVM using points and scalars instead of hashes and preimages. They explain how bit commitments can be done using public keys and point commitments, and suggest the use of MuSig for logic gate commitments. Adaptor signatures are proposed to ensure correct commitments. This approach would make the BitVM invisible on the blockchain.

The conversation also explores the concept of taking an N-bit claim and providing a NAND circuit to assert its validity. A prover/challenger setup is discussed, where the verifier issues challenges and the prover must respond consistently. Tapleafs are used to encode assertions, allowing spending a transaction via a tapleaf to validate an assertion. Computational costs and cheating detection methods are considered.

Further questions are raised about implementing a high-level language for BitVM, establishing tapleaves, implementing zero-knowledge proofs, and resolving fraud costs. The sender expresses interest in arbitrary smart contracts on Bitcoin and seeks clarification on these aspects.

In response to a question, the sender suggests that existing zero-knowledge proof constructs may not be implementable directly on BitVM. They propose having programs written in a ZKP VM and executing proof verification on BitVM instead.

An example protocol that could be built using BitVM is requested, along with the possibility of exchanging Bitcoin using BitVM. The email provides a link to the BitVM whitepaper for more detailed information.</summary>
    <published>2023-10-17T18:00:26+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
  <updated>2023-11-01T21:13:07.902110+00:00</updated>
  <author>
    <name>Anthony Towns 2023-10-31 13:05:01+00:00</name>
  </author>
  <author>
    <name>James O'Beirne 2023-10-30 16:20:32+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-28 04:49:30+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2023-10-27 07:00:36+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-22 04:16:33+00:00</name>
  </author>
  <author>
    <name>Brandon Black 2023-10-20 14:19:06+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2023-10-20 03:40:37+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2023/022105_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022104_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022103_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022099_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022063_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022037_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2023/022031_Examining-ScriptPubkeys-in-Bitcoin-Script.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Examining ScriptPubkeys in Bitcoin Script</title>
    <updated>2023-11-01T21:13:07.902110+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-October/022031.html" rel="alternate"/>
    <summary>Rusty explores the feasibility of validating Taproot outputs in Bitcoin Script to enable useful vaults. He suggests including opcodes such as OP_TXHASH/OP_TX, OP_MULTISHA256 (or OP_CAT), OP_KEYADDTWEAK, and OP_LESS (or OP_CONDSWAP) to achieve this functionality. Additionally, he proposes soft-forking the OP_SUCCESSx rule or adding an opcode to pop the script from the stack. These additions would allow for proving a two-leaf Taproot scriptPubkey, which is crucial for implementing vaults. Rusty invites collaboration from others to produce a prototype and debug the script examples provided in his blog post.

The email also discusses the concept of a script tree, which can be implemented in approximately 110 bytes of Script. This implementation enables the imposition of spending constraints based on a template approach.

Rusty expresses gratitude and signs off as "Rusty."</summary>
    <published>2023-10-31T13:05:01+00:00</published>
  </entry>
</feed>

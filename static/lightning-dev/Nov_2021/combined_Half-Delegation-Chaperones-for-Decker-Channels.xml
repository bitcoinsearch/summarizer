<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Half-Delegation &amp; Chaperones for Decker Channels</title>
  <updated>2023-07-31T23:55:20.546252+00:00</updated>
  <author>
    <name>Jeremy 2021-11-30 01:06:32+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2021-11-30 00:50:25+00:00</name>
  </author>
  <author>
    <name>Jeremy 2021-11-29 23:32:12+00:00</name>
  </author>
  <link href="lightning-dev/Nov_2021/003369_Half-Delegation-Chaperones-for-Decker-Channels.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2021/003368_Half-Delegation-Chaperones-for-Decker-Channels.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2021/003367_Half-Delegation-Chaperones-for-Decker-Channels.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Half-Delegation &amp; Chaperones for Decker Channels</title>
    <updated>2023-07-31T23:55:20.547254+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-November/003367.html" rel="alternate"/>
    <summary>The conversation revolves around the concept of delegation scripts in Bitcoin and explores various types of delegation, including full delegation, partial delegation, and half-delegation. Full delegation involves signing a script that can then sign a transaction, while partial delegation involves signing a tuple consisting of both a script and a transaction. Half-delegation allows one party to sign a tuple of a script and a transaction, with the additional condition that revealing the tuple does not grant authorization to any other party.The speakers discuss how these delegation scripts can be utilized, citing an example of using scriptless multisig where S signs T and onion encrypts it to the signers of R, distributing the shares. However, they highlight a concern that if T is signed by S with AnyPrevOut (APO), it becomes arbitrarily rebindable. To address this issue, they propose stricter definitions and introduce the concept of half-delegation, which prevents anyone other than R from rebinding the transaction.The conversation also touches upon different signing methods, such as SSS or SIGHASH_ALL, depending on the specifics of the delegation script. Additionally, the speakers mention chaperone signatures and their relevance to delegation scripts, noting that they can be useful for dynamically picking or rotating keys. However, they agree that the design discussion for APO should focus on its composition with delegation proposals and CTV, rather than revisiting chaperone signatures.Overall, the email conversation delves into the composition of delegations and prevouts in Bitcoin, introducing different types of delegation scripts and discussing their implications. It highlights the importance of defining stricter rules to prevent arbitrary rebindings and suggests potential solutions. Additionally, it touches upon the relationship between delegation scripts, APO, chaperone signatures, and other related concepts like CTV.</summary>
    <published>2021-11-30T01:06:32+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - RBF and dual-fund interactions</title>
  <updated>2023-07-31T20:48:54.472001+00:00</updated>
  <author>
    <name>Rusty Russell 2018-11-20 02:36:24+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-11-17 13:54:12+00:00</name>
  </author>
  <link href="lightning-dev/Nov_2018/001636_RBF-and-dual-fund-interactions.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001631_RBF-and-dual-fund-interactions.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - RBF and dual-fund interactions</title>
    <updated>2023-07-31T20:48:54.472001+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001631.html" rel="alternate"/>
    <summary>In a Lightning-dev post, a user named ZmnSCPxj raises an important concern regarding an attack vector in the Lightning Network. The attack vector involves the second customer paying fees and designating inputs to create a large transaction with a low fee rate that is too large to be mined. This poses a problem for the first customer as it becomes difficult for them to confirm their channel without paying an uneconomical on-chain fee. To address this issue, Rusty suggests noting this vulnerability in the proposal. He also recommends that liquidity providers do not have a change output on the funding transaction, although this should not be mandatory.The author of the post further elaborates on the complex interactions between RBF (Replace-by-Fee) and dual-funding when a liquidity provider owns a single UTXO (Unspent Transaction Output) containing the entire funding. If the first customer's funding transaction is RBFed, the second customer's transaction can be removed from mempools, which prompts the liquidity provider to ask the second customer to sign a new transaction. However, this creates a potential attack vector where the second customer can gather all its dust and create a large transaction with a low fee rate that is too large to overcome the RBF rule. Consequently, this makes it challenging for the first customer to confirm their channel unless they pay an uneconomical on-chain fee.The author emphasizes the importance of prioritizing channel initiation RBF over dual-funding. They suggest off-to-onchain services as a solution to reverse the polarity of the satoshi flow, enabling funds to be put into cold storage or paid to people on-chain. Alternatively, instead of providing change outputs for liquidity providers, the author proposes a requirement that liquidity providers cannot have a change output on the funding transaction. This would allow the two customers to perform RBF independently but would increase blockchain usage.</summary>
    <published>2018-11-20T02:36:24+00:00</published>
  </entry>
</feed>

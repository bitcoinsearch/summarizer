<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Storing the Merkle Tree in a compact way</title>
  <updated>2023-07-31T23:46:56.627112+00:00</updated>
  <author>
    <name>shymaa arafat 2021-09-16 15:05:24+00:00</name>
  </author>
  <author>
    <name>Vincent 2021-09-16 12:37:24+00:00</name>
  </author>
  <author>
    <name>shymaa arafat 2021-09-11 03:00:12+00:00</name>
  </author>
  <link href="lightning-dev/Sept_2021/003248_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003228_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2021/003227_Storing-the-Merkle-Tree-in-a-compact-way.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Storing the Merkle Tree in a compact way</title>
    <updated>2023-07-31T23:46:56.627112+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-September/003227.html" rel="alternate"/>
    <summary>Vincent responded to Shymaa Arafat's message, acknowledging her idea for saving storage space and addressing traversing issues in handling the UTXOS Merkle Tree/forest. Shymaa proposed a solution using a 2D array with variable row size, which eliminates the need for pointers and can be applied to any Merkle Tree. By storing N internal nodes and using the appropriate formula, traversing can be performed efficiently in any direction. Shymaa provided pseudo code for fetching proof[i], which involves transforming recursion into iteration. Vincent expressed gratitude for the reference but requested clarification on the specific area where Shymaa intends to save space through this compression technique on the Merkle Tree.In summary, Shymaa M Arafat introduces a simple yet practical approach to address storage concerns and simplify traversing in the UTXOS Merkle Tree/forest. The method involves utilizing a 2D array with variable row size, eliminating the need for pointers and reducing overall storage requirements. Traversing can be performed smoothly in any direction using the right formula. A pseudo code for fetching proof[i] is provided, offering a recursive-to-iterative transformation. While the Utreexo team may have employed a different solution, Shymaa believes this approach has broader applicability for any Merkle Tree scenario.</summary>
    <published>2021-09-16T15:05:24+00:00</published>
  </entry>
</feed>

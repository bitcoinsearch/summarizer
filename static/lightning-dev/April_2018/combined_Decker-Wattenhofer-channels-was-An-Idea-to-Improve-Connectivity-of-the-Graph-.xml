<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Decker-Wattenhofer channels (was: An Idea to Improve Connectivity of the Graph)</title>
  <updated>2023-07-31T20:00:16.418820+00:00</updated>
  <author>
    <name>ZmnSCPxj 2018-04-15 14:04:38+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-04-13 20:51:54+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-04-13 13:41:32+00:00</name>
  </author>
  <link href="lightning-dev/April_2018/001184_Decker-Wattenhofer-channels-was-An-Idea-to-Improve-Connectivity-of-the-Graph-.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001180_Decker-Wattenhofer-channels-was-An-Idea-to-Improve-Connectivity-of-the-Graph-.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001178_Decker-Wattenhofer-channels-was-An-Idea-to-Improve-Connectivity-of-the-Graph-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Decker-Wattenhofer channels (was: An Idea to Improve Connectivity of the Graph)</title>
    <updated>2023-07-31T20:00:16.418820+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001178.html" rel="alternate"/>
    <summary>The discussion revolves around the use of invalidation tree structure in Burchert-Decker-Wattenhofer channel factories and its impact on HTLC (Hashed Timelock Contracts) timeout. It is suggested that terminating these channels into Poon-Dryja channels, which have smaller relative locktimes, can allow for more frequent updates while keeping the locktimes involved relatively small. The precision is also discussed, proposing that `cltv_delta` should be larger for channels created inside a channel factory due to the relative locktime consumed by the invalidation tree structure.One suggestion put forward is to disallow channel factories from allowing channel reorganization. Instead, funding transactions that fund the entire factory could be confirmed on-chain, followed by an off-chain split transaction (non-timelocked) that funds multiple channels, and finally commitment transactions that spend from the split transaction. In the case of a multilateral close where all channel factory owners are available for closing, the split and commitment transactions can be collapsed into a single close transaction.The Decker-Wattenhofer construction of Duplex Micropayment Channels utilizes an invalidation tree to divide funds between payer and payee in individual simplex channels. However, concerns arise regarding the compatibility of HTLCs with absolute timelocks and the relative timelock used by the invalidation tree. To ensure compatibility, the absolute timelocks must be set far enough in the future to commit the latest branch of the invalidation tree on-chain and then resolve the HTLC before the HTLC timeout expires.Similarly, Poon-Dryja channels have a relative timelock only on the claim transaction after a unilateral commitment transaction. For HTLC timeouts to work correctly, they must be dropped on-chain to guarantee that all following hops resolve prior to resolving the incoming one. This distinction is significant as it may affect Burchert-Decker-Wattenhofer channel factories, which utilize invalidation trees internally and come before the HTLCs they eventually pay out to.ZmnSCPxj seeks clarification on how HTLCs are offered under Decker-Wattenhofer Duplex Micropayment Channels. The transaction sequence under Decker-Wattenhofer construction involves funding, trigger, and invalidation tree(s). The outputs of the final invalidation tree transaction split the funds between the payer and payee in individual simplex channels that form the duplex channels. However, ZmnSCPxj is uncertain about how HTLCs, which have an absolute timelock, can be made compatible with the relative timelock used by the invalidation tree.ZmnSCPxj draws a comparison with Poon-Dryja channels, where the relative timelock only exists on the claim transaction after a unilateral commitment transaction. HTLCs are offered as outputs of the unilateral commitment transaction, ensuring that the relative timelock on the main output does not interfere with their normal operation. However, unrevoked HTLC paths that go to oneself have an extra CSV (Check Sequence Verify) in the HTLC-timeout and HTLC-success paths. Nonetheless, the relative timelock for the HTLC-timeout case is relative to the absolute timelock that precedes it.Finally, ZmnSCPxj expresses concern regarding the handling of HTLCs under Decker-Wattenhofer channel factories, which utilize invalidation trees internally before paying out HTLCs. Clarification is needed on this matter.</summary>
    <published>2018-04-15T14:04:38+00:00</published>
  </entry>
</feed>

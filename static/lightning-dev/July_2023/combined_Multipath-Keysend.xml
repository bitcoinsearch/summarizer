<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Multipath Keysend</title>
  <updated>2023-08-11T15:57:07.665462+00:00</updated>
  <author>
    <name>Matt Corallo 2023-07-29 16:37:26+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2023-07-29 00:28:23+00:00</name>
  </author>
  <author>
    <name>Matt Morehouse 2023-07-28 22:10:11+00:00</name>
  </author>
  <author>
    <name>Thomas HUET 2023-07-28 10:43:34+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2023-07-27 17:13:59+00:00</name>
  </author>
  <link href="lightning-dev/July_2023/004032_Multipath-Keysend.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004031_Multipath-Keysend.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004030_Multipath-Keysend.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004029_Multipath-Keysend.xml" rel="alternate"/>
  <link href="lightning-dev/July_2023/004028_Multipath-Keysend.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Multipath Keysend</title>
    <updated>2023-08-11T15:57:07.665462+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-July/004028.html" rel="alternate"/>
    <summary>The email discusses the idea of implementing a multipath keysend protocol, which would allow for multipath payments. In this scheme, the preimage is embedded as TLV 5482373484 with a length of 32. The sender would split the keysend into multiple parts, each using the same payment hash. The receiver would only be able to claim the payment once all parts have arrived. The receiver holds the payment when it receives a part and finds that the supposed preimage does not match the actual HTLC payment hashes. When it receives another part, it XORs the supposed preimages together until it gets the correct preimage and can claim the entire funds. This scheme can work with any number of parts and even supports dynamic splitting. If a part reaches a receiver that doesn't support multipath keysend, it will error with "incorrect_or_unknown_payment_details", while an MPP-capable receiver will hold onto the incoming HTLCs until the MPP timeout and error with "mpp_timeout". The same feature bit 55 can be reused for this purpose.</summary>
    <published>2023-07-29T16:37:26+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Not revealing the channel capacity during opening of channel in lightning network</title>
  <updated>2023-07-31T22:34:54.637636+00:00</updated>
  <author>
    <name>Christian Decker 2020-01-29 13:14:19+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2020-01-27 16:22:47+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-01-27 15:55:21+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2020-01-27 15:33:18+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-01-27 15:19:01+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2020-01-27 15:15:10+00:00</name>
  </author>
  <author>
    <name>Subhra Mazumdar 2020-01-27 15:04:05+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2020-01-27 14:41:58+00:00</name>
  </author>
  <author>
    <name>Subhra Mazumdar 2020-01-27 08:11:33+00:00</name>
  </author>
  <author>
    <name>Ugam Kamat 2020-01-27 07:50:02+00:00</name>
  </author>
  <author>
    <name>Subhra Mazumdar 2020-01-27 07:14:41+00:00</name>
  </author>
  <link href="lightning-dev/Jan_2020/002468_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002465_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002464_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002463_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002462_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002461_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002459_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002458_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002457_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002456_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2020/002455_Not-revealing-the-channel-capacity-during-opening-of-channel-in-lightning-network.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Not revealing the channel capacity during opening of channel in lightning network</title>
    <updated>2023-07-31T22:34:54.637636+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002455.html" rel="alternate"/>
    <summary>In a recent forum post, Matt Corallo proposed an approach to prevent routing nodes from overcharging transaction fees. He suggested defining a fixed and proportional max fee and selecting a random route that pays no more than those fees unless no such route is available. He also recommended biasing towards old or good-reputation nodes, routing across nodes hosted on different ISPs/Tor/across continents, etc.Christian, from c-lightning, explained that they set up a fee budget of 0.5% and then select a random route within this constraint. They also fuzz the amount and other parameters within this range to obfuscate the distance to the recipient, i.e., slightly overpaying the recipient but simulating a shadow route. This randomization helps with privacy. Recent research results show that attempting to squeeze the very last bit of fees out has a detrimental effect on sender-receiver-privacy.The discussion on the Lightning-dev mailing list has been focused on improving the security and efficiency of the Lightning Network. One issue discussed is route-hijacking, where someone provides routing for a lower fee and users take it. The traits that make one a good forwarding node also makes one a good surveillance node.However, this second-layer Lightning network remains censorship-resistant as censorship leads to loss of profit from fees and censors can be evicted by jacking up willingness to pay fees. Another issue is anti-DoS protection, which could be accomplished with simple equivalent proofs that are somewhat more expensive to create/validate.Matt Corallo notes that there's no real reason lightning nodes have to have confidence in proof-of-funds-locked. If a node routes your payment to the next hop, how they do it doesn't really matter. Allowing things like non-lightning "channels" would actually be quite compelling. Lightning nodes today require proof-of-funds-locked largely for DoS resistance, effectively rate-limiting flooding the global routing table with garbage, but such rate-limiting could be accomplished via other means.Ugam Kamat explains that in order to have faith that the channel announced by the nodes is actually locked on the Bitcoin mainchain, we need to have the outpoint (`txid` and `vout`) of the funding transaction. The information about the funding transaction is broadcasted in the `channel_announcement` message in the `short_channel_id` field which includes the block number, transaction number, and vout.In a thread-hijack, ZmnSCPxj discusses the possibility of route-hijacking, where someone provides routing for a lower fee and users happily take it. This creates a catch-22 situation: If users notice lower fees and go to lower-fee channels, then route-hijacking is possible and surveillors can pay via sacrificed fees for better surveillance. But if users ignore lower fees, then forwarding nodes will jack up their prices to 21 million Bitcoin `fee_base`, because users are going to go through their nodes with equal probability as lower-priced nodes. The traits that make one a good forwarding node, such as having a large number of channels, cheap fees, central location, high uptime, low latency, also makes one a good surveillance node.Fortunately, this second-layer Lightning network remains censorship-resistant, just like on the blockchain layer, and censors can be evicted by jacking up willingness to pay fees, including on-chain fees to move channels away from the censoring node and towards the node the user wants to pay.A subsequent email from Matt Corallo further explains that there's no real reason lightning nodes have to have confidence in proof-of-funds locked, as long as a node routes the payment to the next hop, how they do it doesn't really matter. Allowing things like non-lightning channels would actually be quite compelling. The reason that lightning nodes today require proof-of-funds-locked is largely for DoS resistance, effectively rate-limiting flooding the global routing table with garbage, but such rate-limiting could be accomplished via other means.In another email, Ugam Kamat explains that in order to have faith that the channel announced by the nodes is actually locked on the Bitcoin mainchain, we need to have the outpoint (txid and vout) of the funding transaction. If we do not verify that the funding transaction has been confirmed, nodes can cheat us that a particular transaction is confirmed when it is not the case. This information is broadcasted in the channel_announcement message in the short_channel_id field which includes the block number, transaction number and vout. Since Bitcoin does not allow confidential transactions, we can query the blockchain and find out the channel capacity even when the amounts are never explicitly mentioned.In a discussion on the Lightning-dev mailing list, ZmnSCPxj and Matt Corallo responded to a question about the potential problem of not revealing channel capacity publicly but just providing a range proof of the attribute. ZmnSCPxj explained that the added complexity is</summary>
    <published>2020-01-29T13:14:19+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - A state machine.</title>
  <updated>2023-07-31T18:16:26.885763+00:00</updated>
  <author>
    <name>Rusty Russell 2015-09-04 05:35:37+00:00</name>
  </author>
  <author>
    <name>Jasper Hugunin 2015-09-02 19:36:44+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-09-02 05:55:44+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2015-09-01 22:32:42+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-09-01 07:32:49+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-31 02:24:26+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-31 01:04:21+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-31 00:34:03+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-30 00:51:54+00:00</name>
  </author>
  <author>
    <name>Pierre 2015-08-29 12:50:44+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2015-08-29 07:42:39+00:00</name>
  </author>
  <author>
    <name>Pierre 2015-08-28 16:55:31+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-21 05:32:32+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-21 01:33:52+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-21 01:27:22+00:00</name>
  </author>
  <author>
    <name>Pierre 2015-08-20 18:36:09+00:00</name>
  </author>
  <author>
    <name>Pierre 2015-08-20 18:20:04+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-08-20 07:52:11+00:00</name>
  </author>
  <link href="lightning-dev/Sept_2015/000183_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000181_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000180_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000178_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000177_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000166_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000165_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000164_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000160_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000157_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000156_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000154_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000145_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000142_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000144_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000138_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000137_A-state-machine-.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2015/000136_A-state-machine-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - A state machine.</title>
    <updated>2023-07-31T18:16:26.885763+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000136.html" rel="alternate"/>
    <summary>The Lightning Network protocol operates through a complex network of states, events, and transitions to facilitate secure and efficient transactions on the Bitcoin network. The protocol consists of different states, including opening, normal update loop, and closing. It also includes states related to handling hash time-locked contracts (HTLCs) within the channel.Rusty Russell, a contributor to the Elements Project, has developed a state machine for the Lightning Network protocol that has been thoroughly tested. The state machine is available on Rusty's GitHub account and includes two enums: `enum state` and `enum state_input`. The `enum state` defines the various states of a Lightning Network channel, while the `enum state_input` defines the inputs to the state machine.In an email conversation, Pierre raises concerns about the assumption made in the OPEN_WAITING state. Rusty explains that the packet is deferred until after the transition. Pierre also asks for clarification on Bob's state in a multi-party scenario, to which Rusty explains that Bob has two states depending on the connection.In 2015, Pierre previously raised concerns about the order of events in the Lightning Network protocol. Rusty responded by sharing details of the state machine he had written for the wire protocol, along with diagrams illustrating the different states. He emphasized the importance of the protocol handling re-transmits and outlined the combinations of events participants could be waiting for during the closing phase of a transaction.The Lightning Network protocol is a layer two protocol built on top of Bitcoin, enabling faster and cheaper transactions. Enums are used in the protocol implementation code to manage the different states and inputs, facilitating communication among developers. Rusty's state machine for the wire protocol handles all commands and Bitcoin event notifications, including error packets and unilateral close scenarios. It allows for broadcasting revoked commit txs, latest commit txs, and mutual close txs.Overall, the Lightning Network protocol is a comprehensive system with numerous states, inputs, and commands. The state machine developed by Rusty simplifies the process and ensures efficient handling of various scenarios.</summary>
    <published>2015-09-04T05:35:37+00:00</published>
  </entry>
</feed>

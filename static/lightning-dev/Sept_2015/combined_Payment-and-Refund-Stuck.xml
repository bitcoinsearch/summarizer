<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Payment and Refund Stuck</title>
  <updated>2023-07-31T18:20:58.261707+00:00</updated>
  <author>
    <name>Mats Jerratsch 2016-03-21 12:34:37+00:00</name>
  </author>
  <author>
    <name>Joseph Poon 2016-03-18 20:29:23+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2016-03-17 04:51:08+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2016-03-16 09:27:44+00:00</name>
  </author>
  <author>
    <name>Joseph Poon 2015-09-24 20:52:52+00:00</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-09-24 13:24:58+00:00</name>
  </author>
  <author>
    <name>Pierre 2015-09-24 12:13:42+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2015-09-24 05:56:30+00:00</name>
  </author>
  <author>
    <name>Mats Jerratsch 2015-09-22 17:55:26+00:00</name>
  </author>
  <link href="lightning-dev/March_2016/000498_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/March_2016/000495_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/March_2016/000493_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/March_2016/000491_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000226_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000223_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000222_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000225_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <link href="lightning-dev/Sept_2015/000210_Payment-and-Refund-Stuck.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Payment and Refund Stuck</title>
    <updated>2023-07-31T18:20:58.261707+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-September/000210.html" rel="alternate"/>
    <summary>A GitHub repository has been created to document the Lightning protocol, allowing developers to collaborate on its implementation. The author of the repository is concerned about the layout being too nested and wants to create a simple way to move ideas into and through the repo without politicizing proposals. The author plans to add various documents, including Rusty's BOLT proposals, the shachain design txt, and Joseph's 2-of-3 Instant Escrow. Additionally, Matsjj suggests implementing a refund process to invalidate payments in case of an attacker stopping a single payment.In an email exchange, Anthony Towns seeks opinions on a written document regarding the lightning protocol. Joseph Poon responds positively and suggests aligning designs with the specifications in the document. Mats Jerratsch discusses the recovery process in case a node fails to relay the payment in the Lightning Network, emphasizing the need for a shorter path or convincing nodes to use small timeouts. Pierre questions the default timeout set in the original lightning presentation.Mats Jerratsch shares his thoughts on the potential impact of an attacker stopping a single payment in a payment channel network. He believes that it would be a nuisance as the system can self-correct by setting a timeout and issuing a refund. This concept has been suggested by Joseph Poon before. Rusty acknowledges the criticisms and considers coding up a solution in the future if necessary.There are unresolved issues related to removing both the refund and the payment completely. Waiting for them to timeout is not efficient, so nodes could resolve it on their own, but this requires cooperation from the node that isn't relaying the payment. If the refund gets stuck, parties cannot sufficiently prove they haven't received the payment. E could give out multiple refunds via other routes until one finally arrives at the payer, but this would maximize the damage. Furthermore, a malicious payer could claim to have never received any refund, locking up funds of the payee.</summary>
    <published>2016-03-21T12:34:37+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Including a Protocol for splicing to BOLT</title>
  <updated>2023-07-31T20:20:03.463716+00:00</updated>
  <author>
    <name>Corné Plooy 2018-08-27 13:22:49+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-08-27 13:19:16+00:00</name>
  </author>
  <author>
    <name>Corné Plooy 2018-08-27 12:52:43+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-07-08 06:38:38+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-07-05 04:47:11+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-07-05 04:30:22+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-07-05 03:36:29+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-07-05 00:07:44+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-07-04 21:28:13+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-07-04 05:47:23+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-07-03 13:45:30+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-07-03 05:15:40+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-07-01 23:55:48+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-06-26 07:26:09+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2018-06-25 19:35:41+00:00</name>
  </author>
  <author>
    <name>René Pickhardt 2018-06-25 10:10:26+00:00</name>
  </author>
  <link href="lightning-dev/Aug_2018/001399_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2018/001398_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/Aug_2018/001397_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001353_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001351_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001350_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001349_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001348_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001347_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001346_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001342_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001335_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001332_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001325_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001324_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001322_Including-a-Protocol-for-splicing-to-BOLT.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Including a Protocol for splicing to BOLT</title>
    <updated>2023-07-31T20:20:03.463716+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-June/001322.html" rel="alternate"/>
    <summary>The Lightning-dev community recently discussed the implementation of splice in and out features for the Lightning Network. Two methods were proposed: broadcasting a spend to join random outputs and maintaining both old and new channels until confirmation, or pre-committing with another funding transaction and joining channels once confirmed. The second option requires two on-chain transactions, leading to a preference for the first option. For version 1.1, it was suggested to allow only one concurrent change at a time to reduce complexity.However, extending the gossip protocol for these features presents challenges. Extending channel_announce would not propagate through old nodes until the new channel is six deep, and extending channel_update would not propagate after the new spend is seen on the Bitcoin network. A new message type would not propagate at all through old nodes. It may be possible to make the "splice information" signatures + old-chanid discardable.In terms of implementation, a generic message for both splice in/out should be included, allowing both sides to schedule and queue up possible changes. The priority should be given to Atomic Multi-Path (AMP) payments, which retain proper Zero Knowledge Contingent Payment (ZKCP). With AMP, the size of channels becomes less important. On-to-offchain and off-to-onchain bridges form a different layer, reducing the necessity for dual-funded channels.Overall, the discussions within the Lightning-dev community highlighted the importance of splicing and AMP for improving user experience. However, the implementation of these features and the extension of the gossip protocol present challenges that need to be addressed.In an email exchange between Laolu and ZmnSCPxj, they discuss the technical implementation of a splicing proposal for the Lightning Network. The proposal aims to include a generic message for both splice in/out, allowing both sides to schedule/queue up possible changes. The goal is to achieve fully async splice in/out to improve user experience by avoiding the need to block channel operation for confirmations. In addition, a pre-announcement gossip message would signal other nodes that the channel is about to change outpoints but can still be used for routing.However, there are some considerations to address. One issue is that during the transition period, there will be a few blocks where other nodes may consider the channel closed while the replacement channel is not yet deep enough on-chain to be re-announced. To mitigate this, it is suggested to limit Splice-in if it has not been sufficiently buried in the chain.The Lightning Network developers are actively working on splicing, a protocol modification that requires deep knowledge of Bitcoin's protocol and specific implementation details. This is in contrast to modifying autopilot strategies, which is purely policy-based. It is expected that splicing will be included in BOLT 1.1, with the official draft planned for later this year. However, implementations can already draft working versions and reserve a temporary feature bit.To streamline operations, a "scheduler" for splicing can be included in the proposal, allowing implementations to batch their operations efficiently. The discussions on splicing took place at the 2nd lightninghackday in Berlin, where attendees engaged in intensive conversations about the autopilot feature and splicing. Developers from Lightning Labs informed attendees that they were currently working on splicing. While the technical aspects seem straightforward, formalizing the protocols is necessary.The author of the email found a six-month-old post mentioning a plan to include a splicing protocol in BOLT 1.1. However, upon checking the git repository and issues, they did not find any ongoing work or inclusion of the protocol. As a result, they are considering taking the initiative on the topic over the next few weeks if no one else is working on it, or offering support to anyone who is. The author believes that splicing should be a higher priority than improving the intelligence of the autopilot feature and suggests specifying the process in the Lightning RFC.The author seeks assistance in improving the quality of the specification they will create for splicing, as this is their first time contributing to such a formal RFC.</summary>
    <published>2018-08-27T13:22:49+00:00</published>
  </entry>
</feed>

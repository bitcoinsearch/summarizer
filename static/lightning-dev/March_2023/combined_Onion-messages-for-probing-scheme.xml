<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Onion messages for probing scheme</title>
  <updated>2023-08-01T01:04:48.992428+00:00</updated>
  <author>
    <name>Aymeric Vitte 2023-03-06 16:39:42+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-03-01 18:02:04+00:00</name>
  </author>
  <author>
    <name>vwallace 2023-02-27 21:31:15+00:00</name>
  </author>
  <link href="lightning-dev/March_2023/003882_Onion-messages-for-probing-scheme.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003870_Onion-messages-for-probing-scheme.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2023/003869_Onion-messages-for-probing-scheme.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Onion messages for probing scheme</title>
    <updated>2023-08-01T01:04:48.992428+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-February/003869.html" rel="alternate"/>
    <summary>In a Lightning-dev mailing list, the use of onion messages (OMs) for payment probing in the Lightning Network was discussed. The current method of HTLC payment probing can risk channel liquidity being locked up if a peer along the route goes offline. Onion messages provide a convenient way to probe without risking locked liquidity. The proposal suggests that routing hops could announce their liquidity balances through a new set of gossip messages, committing to a liquidity balance and duration. This approach would be more accurate than sender-side probing, especially with higher rates of network liquidity congestion.Val Wallace brought up the idea of using onion messages for payment probing, which was briefly discussed at the 2022 LN summit. Today, payment reliability heavily depends on having sufficient payment volume to determine current liquidity balances of channels. Most big nodes rely on this information to determine whether a given channel has enough liquidity to forward a given amount. The proposed scheme involves constructing an onion message for each hop, specifying the amount that can be forwarded to the next hop. If an intermediate node cannot forward the desired amount due to the stateless nature of OMs, they'll fail the probe back to the previous node, who will then fail it back to the original sender.While sending onion message probes directly to individual nodes along the desired route, including those to which you don't have a direct channel, could enable monitoring of arbitrary nodes across the network, it also degrades privacy. Therefore, it is suggested to design a scheme that probes along channel paths, similar to HTLC probing. This adds complexity to the case where an intermediate node cannot forward the desired amount due to the stateless nature of OMs.The proposed scheme presents a happy path example where Alice probes Alice &gt; Bob &gt; Carol &gt; Dave for a 100k msat payment. Each hop forwards the onion packet to the next based on their ability to forward the specified amount. If an intermediate node fails to forward the desired amount, they send an empty "failed" message back to the previous hop. While there is nothing stopping nodes from lying about their ability to forward in this scheme, they may be negatively scored if they do so.Overall, the proposal is considered a low priority enhancement at the moment, given that there are more pressing issues in the Lightning Network. However, it could be useful to spark ideas and highlight the flexibility of onion messages. The use of OMs for payment probing presents a convenient alternative to the current HTLC probing method and could potentially attract more forwarding traffic for routing nodes.</summary>
    <published>2023-03-06T16:39:42+00:00</published>
  </entry>
</feed>

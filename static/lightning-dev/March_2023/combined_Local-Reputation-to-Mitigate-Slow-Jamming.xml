<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Local Reputation to Mitigate Slow Jamming</title>
  <updated>2023-08-01T01:02:18.660919+00:00</updated>
  <author>
    <name>Clara Shikhelman 2023-03-06 18:53:59+00:00</name>
  </author>
  <author>
    <name>Antoine Riard 2023-03-06 17:29:12+00:00</name>
  </author>
  <author>
    <name>Vincenzo Palazzo 2023-03-04 12:40:23+00:00</name>
  </author>
  <author>
    <name>Clara Shikhelman 2023-03-03 19:48:52+00:00</name>
  </author>
  <author>
    <name>Thomas HUET 2023-03-03 19:21:57+00:00</name>
  </author>
  <author>
    <name>Clara Shikhelman 2023-03-03 18:45:17+00:00</name>
  </author>
  <author>
    <name>Thomas HUET 2023-03-03 16:50:46+00:00</name>
  </author>
  <author>
    <name>Clara Shikhelman 2023-03-03 16:14:12+00:00</name>
  </author>
  <author>
    <name>Thomas HUET 2023-03-02 19:28:52+00:00</name>
  </author>
  <author>
    <name>Clara Shikhelman 2023-03-02 18:56:32+00:00</name>
  </author>
  <author>
    <name>Thomas HUET 2023-03-02 13:14:24+00:00</name>
  </author>
  <author>
    <name>Clara Shikhelman 2023-02-16 21:28:44+00:00</name>
  </author>
  <link href="lightning-dev/March_2023/003884_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003883_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003880_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003879_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003878_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003877_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003876_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003875_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003874_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003873_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/March_2023/003871_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2023/003857_Local-Reputation-to-Mitigate-Slow-Jamming.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Local Reputation to Mitigate Slow Jamming</title>
    <updated>2023-08-01T01:02:18.661919+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-February/003857.html" rel="alternate"/>
    <summary>The proposed solution to prevent jamming attacks on the Lightning Network includes upfront fees and reputation-based forwarding. It aims to differentiate between active attackers and low-traffic neighbors. Each node gives a binary reputation to its neighbor, and channels have quotas for transactions based on neighbor reputation. Alice gains and maintains a good reputation by continuously paying more fees to Bob than potential damage. The proposal highlights the importance of local reputation and suggests treating reputation scores as continuous values. It also addresses the challenge of reporting confidence truthfully without negative impacts.The Lightning-dev mailing list serves as a platform for discussions related to the development of the Lightning Network. It is used by developers to share ideas, discuss technical issues, and coordinate efforts. The mailing list is open to anyone interested in contributing to the development of the Lightning Network.The Lightning Network development team is seeking early feedback on a draft for a neighbor reputation setting recommendation to prevent jamming in the network. The proposed solution includes upfront fees along with reputation-based forwarding. This approach aims to address the issue of "slow jamming," where transactions take a long time to resolve.Under this solution, each node assigns a binary reputation to its direct neighbors. Additionally, each channel has a designated quota of liquidity and slots specifically allocated for transactions from neighbors with a reputation of 0 or for transactions from neighbors with a reputation of 1 that were not endorsed by the neighbor.To maintain a "good" reputation, Alice must continuously pay more fees to Bob than the potential damage she could inflict. The main parameters for reputation that each node operator selects are S, L, and M. S represents the maximum time an HTLC (Hash Time Locked Contract) can remain unresolved in any of Bob's channels. M represents the revenue generated by Bob's node within the time S, representing the potential damage Alice could cause. L is the time window within which Alice must generate M revenue for Bob in order to have a reputation score of 1. It is suggested that L be set as 10 times the value of S (L=10S).For Alice to achieve a reputation score of 1, she must have forwarded payments in the last L seconds that generated M satoshi in fees. The fee for a single transaction is normalized based on the time it took for the HTLC to resolve, counted in slots of 10 seconds.Reputation management is handled locally, and the only required protocol change is the ability to signal endorsement as a TLV (Type-Length-Value) in the UpdateAddHTLC message. The proposed formula treats reputation scores as continuous values between 0 and 1, rather than binary classes. Using more bits allows for greater precision in rejecting specific HTLCs, thereby reducing the number of innocent casualties.It is important to note that reputation is only assigned to direct neighbors, and this is the only reliable data available when deciding whether or not to forward an HTLC. The team acknowledges that the current recommendation suggests a binary reputation for simplicity, but also recognizes the potential value in exploring multiple reputation buckets for further study. Reputation primarily comes into play during channel attacks, where not all transactions are permitted to go through.</summary>
    <published>2023-03-06T18:53:59+00:00</published>
  </entry>
</feed>

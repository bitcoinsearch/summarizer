<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Payee pay fee</title>
  <updated>2023-07-31T21:27:20.333082+00:00</updated>
  <author>
    <name>Rusty Russell 2019-02-26 06:22:11+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-02-26 03:50:33+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2019-02-23 03:53:47+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-02-22 05:52:58+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2019-02-22 04:24:42+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-02-20 08:52:24+00:00</name>
  </author>
  <author>
    <name>Cezary Dziemian 2019-02-19 18:46:50+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-02-15 05:40:46+00:00</name>
  </author>
  <author>
    <name>Cezary Dziemian 2019-02-14 14:06:12+00:00</name>
  </author>
  <link href="lightning-dev/Feb_2019/001887_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001886_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001885_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001881_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001879_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001878_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001877_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001872_Payee-pay-fee.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001871_Payee-pay-fee.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Payee pay fee</title>
    <updated>2023-07-31T21:27:20.333082+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-February/001871.html" rel="alternate"/>
    <summary>Rusty Russell and ZmnSCPxj discuss the possibility of using Single-Use-Receivable-BoLs (SURBs) as an alternative solution for the missing piece of information on how the payee would know to give the Bolt12 offer to the payer. Rusty suggests that a real message format would be better than a fake payment, and both agree that offers can be a new thing and need not be crammed into bolt11 in some backward compat way.Rusty proposes the creation of new URI schemes to facilitate the payment process for recurring payments. He suggests a mechanism for "pull an invoice" requests, which involves a web platform where clients can send invoices or offers over HTTPS. The proposal includes the development of a new message type to route these requests through the lightning network for automated payment. A format for bolt11 offers is also suggested to act as templates for the real invoice(s) to be fetched automatically.Another proposal is made for making payments on the Lightning Network to stay within invoice limits. This solution suggests that payees provide a fee limit along with an invoice and payers find a route that does not exceed the limit before paying the invoice. The proposal also suggests adding a new `withdrawn_amount` tag in BOLT11 that signals the service performing the payment should not spend more than the specified amount. This approach is trust-based and any custodial service is inherently trust-based anyway.ZmnSCPxj suggests an alternative solution where the payee provides one or more complete paths from the payer to the payee node, which will be provided as fully encrypted onions to the payer. This solution provides benefits such as improved privacy and fairness in fee calculation. The use-case discussed is where the payer is a publicly-useable service such as an exchange. There is a need for some standard of transporting multiple encrypted onions from the user (payee) to the service (payer), and some implementation must provide a method of generating multiple routes from the user to the service.Cezary Dziemian raises an issue with their exchange where users can withdraw funds using LN but cannot withdraw everything they have if they do not know the fee in advance. He suggests a payment solution where the payee pays the fee instead of the payer. The topic of discussion is unclear if it has been discussed before.</summary>
    <published>2019-02-26T06:22:11+00:00</published>
  </entry>
</feed>

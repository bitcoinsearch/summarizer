<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Spending `to_local` output of commitment</title>
  <updated>2023-08-01T01:09:32.496791+00:00</updated>
  <author>
    <name>Keagan McClelland 2023-05-19 21:46:26+00:00</name>
  </author>
  <author>
    <name>Benjamin Weintraub 2023-05-02 22:00:44+00:00</name>
  </author>
  <author>
    <name>Ken Sedgwick 2023-04-30 18:30:10+00:00</name>
  </author>
  <author>
    <name>Benjamin Weintraub 2023-04-27 12:41:47+00:00</name>
  </author>
  <link href="lightning-dev/May_2023/003962_Spending-to-local-output-of-commitment.xml" rel="alternate"/>
  <link href="lightning-dev/May_2023/003925_Spending-to-local-output-of-commitment.xml" rel="alternate"/>
  <link href="lightning-dev/April_2023/003919_Spending-to-local-output-of-commitment.xml" rel="alternate"/>
  <link href="lightning-dev/April_2023/003916_Spending-to-local-output-of-commitment.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Spending `to_local` output of commitment</title>
    <updated>2023-08-01T01:09:32.496791+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-April/003916.html" rel="alternate"/>
    <summary>The email conversation posted on the Lightning-dev mailing list hosted by the Linux Foundation revolves around the development related to the Lightning Network, which is a protocol layer built on top of Bitcoin to enhance scalability and transaction speed. Benjamin Weintraub initiates the thread by seeking guidance on generating a transaction that spends vout[2] after a force closure of the channel. In response, Ken Sedgwick explains that the "to_local" output can only be spent after a delay period, making it not a valid transaction until then. The delay period for HTLCs is one block for redeeming an HTLC. Ken provides Benjamin with a link to the GitHub page detailing the necessary witness script for generating a transaction that spends the to_local and HTLC output following a force closure of the channel.Keags also joins the conversation expressing uncertainty about generating such a transaction using lncli or chantools. The email includes a code block displaying transaction details such as the number of required signatures and addresses involved. Additionally, contact information for Ken Sedgwick of Bonsai Software, Inc. is provided.The email thread commences with Benjamin Weintraub sharing his experience with testing failure scenarios in LND. He encountered an issue after force closing the channel using `lncli closechannel --force ....`. Although he could see the commitment transaction in the mempool, he couldn't find the subsequent HTLC/to_local spend. Seeking suggestions, Benjamin asks how to generate the transaction that spends the to_local and HTLC output, preferably using lnd. In response, Ken Sedgwick directs him to the necessary witness script described in the given GitHub link. Benjamin further seeks clarification on the witness script needed to redeem the to_local funds when a peer force closes a channel by sending a commitment to the blockchain. He provides transaction details from a committed transaction on a local simnet bitcoin blockchain and expresses the desire to spend vout[2].To summarize, Benjamin Weintraub seeks guidance on the witness script required to redeem the to_local funds after a force closure of the channel. He wishes to generate a transaction based on a specific committed transaction on a local simnet bitcoin blockchain and spend vout[2]. Ken Sedgwick provides assistance by directing him to the appropriate GitHub link.</summary>
    <published>2023-05-19T21:46:26+00:00</published>
  </entry>
</feed>

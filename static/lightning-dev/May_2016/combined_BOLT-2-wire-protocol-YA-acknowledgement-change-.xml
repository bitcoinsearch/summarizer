<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - BOLT #2: wire protocol: YA acknowledgement change.</title>
  <updated>2023-07-31T19:00:36.721938+00:00</updated>
  <author>
    <name>Rusty Russell 2016-05-23 21:26:00+00:00</name>
  </author>
  <author>
    <name>Pierre 2016-05-18 17:46:44+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2016-05-17 07:06:37+00:00</name>
  </author>
  <link href="lightning-dev/May_2016/000540_BOLT-2-wire-protocol-YA-acknowledgement-change-.xml" rel="alternate"/>
  <link href="lightning-dev/May_2016/000539_BOLT-2-wire-protocol-YA-acknowledgement-change-.xml" rel="alternate"/>
  <link href="lightning-dev/May_2016/000537_BOLT-2-wire-protocol-YA-acknowledgement-change-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - BOLT #2: wire protocol: YA acknowledgement change.</title>
    <updated>2023-07-31T19:00:36.721938+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-May/000537.html" rel="alternate"/>
    <summary>Pierre expresses his satisfaction with the newly implemented protocol and hopes that it will suit everyone. He shares that he was able to independently implement a toy version of the protocol and pass Rusty's scripted tests, indicating that there are no obvious issues. Pierre suggests that this could be the first step towards a Lightning Network non-regression test set. Rusty agrees with Pierre and mentions that eventually he would like to have some "canned conversations" to go with the BOLTs for testing against. Pierre then asks Rusty about the "nocommitwait" and why he makes it optional in his test. Rusty explains that it is simpler if you don't let yourself do multiple in-flight commits. This code ensures that only one set of outstanding changes is needed. Rusty then defines YA as "Yet Another." He found a good description on Wikipedia which states that among programmers, yet another is an idiomatic qualifier in the name of a computer program, organization, or event that is unoriginal.The author of the 02-wire-protocol.md draft has created a protocol simulator to test the draft and ensure its reasonableness. The simulator also generates timing diagrams as a bonus. The author concludes that we don't need acknowledgement numbers because the revocation reply provides everything necessary. The revocation reply is when incoming changes are added to the other side as "acked". The author states that this process seems to work well in all corner cases, and it's wire-optimal. For those interested in a layman's write-up, the author has provided one at https://medium.com/@rusty_lightning/lightning-inter-node-protocol-a-primer-c642816c8b8#.8skw6hfar. The full spec can be found on GitHub at https://github.com/rustyrussell/lightning-rfc/blob/master/bolts/02-wire-protocol.md, and tests are available at https://github.com/ElementsProject/lightning/blob/test-protocol/test/test_protocol.c and https://github.com/ElementsProject/lightning/tree/test-protocol/test/commits. Feedback is welcomed by the author, Rusty.</summary>
    <published>2016-05-23T21:26:00+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Barrier Escrow (Was: Re: A Payment Point Feature Family (MultiSig, DLC, Escrow, ...))</title>
  <updated>2023-07-31T22:47:20.442410+00:00</updated>
  <author>
    <name>Nadav Kohen 2020-04-16 14:42:08+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-04-16 08:32:16+00:00</name>
  </author>
  <link href="lightning-dev/April_2020/002637_Barrier-Escrow-Was-Re-A-Payment-Point-Feature-Family-MultiSig-DLC-Escrow-.xml" rel="alternate"/>
  <link href="lightning-dev/April_2020/002636_Barrier-Escrow-Was-Re-A-Payment-Point-Feature-Family-MultiSig-DLC-Escrow-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Barrier Escrow (Was: Re: A Payment Point Feature Family (MultiSig, DLC, Escrow, ...))</title>
    <updated>2023-07-31T22:47:20.442410+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-April/002636.html" rel="alternate"/>
    <summary>In a recent discussion on the Lightning Development mailing list, concerns have been raised regarding the effectiveness of a proposed mitigation for barrier escrows. ZmnSCPxj expresses doubts about the solution and its ability to address the issues associated with barrier escrows. In response, Nadav Kohen suggests an alternative approach that involves each participant contributing a point commitment, which can help detect cheating by any of the parties involved. Nadav goes on to provide two informative blog post links related to Barrier Escrows, offering further insights into the topic. The proposed solution comprises of two methods: barrier-commit and barrier-reveal. The barrier-commit method takes a list of points as input and returns a point only if none of the input points have been seen before, and the exact inputs have been received previously. On the other hand, the barrier-reveal method requires a scalar as input and waits until it receives barrier-reveal requests for each of the n points. Once all the requests are received, it then returns the scalar pre-image to E.While the first interaction in this process can occur in various ways, Nadav personally suggests utilizing invoice offers if feasible. However, the author of the email brings attention to the fact that the proposed mitigation mentioned in the old thread is not foolproof. They highlight the possibility of one participant making a payment of the entire amount using their own generated `Z`. To prevent such scenarios, additional checks would need to be implemented, but this would require trust in the barrier escrow system.Overall, the discussion revolves around the challenges and potential solutions concerning barrier escrows. It addresses the existing concerns and proposes an alternative approach that could enhance the security and effectiveness of the system. The inclusion of blog post links further enriches the conversation by providing additional resources for interested individuals to explore.</summary>
    <published>2020-04-16T14:42:08+00:00</published>
  </entry>
</feed>

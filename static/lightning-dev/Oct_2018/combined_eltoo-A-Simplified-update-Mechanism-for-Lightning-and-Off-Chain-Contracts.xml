<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
  <updated>2023-07-31T20:05:29.778894+00:00</updated>
  <author>
    <name>Anthony Towns 2018-10-13 11:40:30+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-10-13 10:12:03+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-10-12 03:20:55+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-10-11 17:37:56+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2018-10-10 08:25:46+00:00</name>
  </author>
  <author>
    <name>Anthony Towns 2018-07-18 10:02:38+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-06-22 00:32:01+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2018-06-20 15:31:50+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2018-06-19 18:02:51+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-06-19 14:46:32+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2018-06-19 11:56:18+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-15 13:41:45+00:00</name>
  </author>
  <author>
    <name>Corn√© Plooy 2018-05-15 13:22:44+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-04 07:20:57+00:00</name>
  </author>
  <author>
    <name>Carsten Otto 2018-05-03 16:17:28+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-05-03 10:51:01+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-05-03 10:28:53+00:00</name>
  </author>
  <author>
    <name>Carsten Otto 2018-05-03 09:03:51+00:00</name>
  </author>
  <author>
    <name>Carsten Otto 2018-05-03 09:00:23+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-02 12:16:29+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-02 04:12:28+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-01 23:55:41+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-05-01 12:04:51+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-05-01 11:38:12+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-01 07:12:35+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2018-05-01 05:07:54+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2018-04-30 15:41:38+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2018/001454_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001453_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001442_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001441_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2018/001435_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/July_2018/001363_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001316_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001313_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001312_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001311_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/June_2018/001310_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001279_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001278_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001240_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001239_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001238_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001237_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001236_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001235_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001234_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001231_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001230_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001229_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001228_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001227_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/May_2018/001226_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <link href="lightning-dev/April_2018/001223_eltoo-A-Simplified-update-Mechanism-for-Lightning-and-Off-Chain-Contracts.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts</title>
    <updated>2023-07-31T20:05:29.779893+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-April/001223.html" rel="alternate"/>
    <summary>On October 13, 2018, Christian Decker proposed an adaptive scheme for update transactions in the Lightning specification. The scheme starts with a single transaction and adds a second at around 90% of the available range. This method creates a larger overall counter, providing a single counter with 10^18 possible updates.In contrast, ZmnSCPxj suggested always having two update transactions, which would create a single counter with 10^18 possible updates. Anthony Towns proposed that if you have more than 1 billion updates to your channel, you could reset the locktime by rolling over to use new update keys. This method would save a transaction if you did a cooperative close.The Lightning Network specification uses a penalty-based invalidation mechanism, but eltoo is a drop-in replacement for this. One issue with eltoo's locktime-based sequencing is that it limits the number of updates to 1 billion. However, ZmnSCPxj suggests an adaptive scheme in which a second update transaction is added at around 90% of the available range; this effectively creates a larger overall counter with 10^18 possible updates.Alternatively, Anthony Towns suggests always having two update transactions, creating a single counter with 10^18 possible updates, and rolling over to new update keys after using more than 1 billion updates on a channel. This would make unilateral closes more painful, but keep cooperative closes cheap. Christian Decker notes that he did not think 1 billion updates would be used anytime soon since splice-in/splice-out operations would lead to regular on-chain re-anchoring.In a discussion about the Lightning specification, it was suggested to use a larger overall counter for updates by always having two update transactions and incrementing highbits when lobits saturates. This creates a single counter with 10^18 possible updates. This method is useful for channels that require more than 1 billion updates as resetting the locktime by rolling over to new update keys can be done. This would save a transaction if a cooperative close is done rather than an unilaterally close. Rolling over to new update keys requires an extra transaction on-chain. The suggestion for this method came from Anthony Towns.In a discussion about the eltoo Lightning Network specification, Anthony Towns suggests using new update keys to reset the locktime and state numbers when there are more than 1 billion updates to a channel. Christian Decker had originally believed that this number of updates was unlikely, but Towns explains that it could be possible with regular on-chain operations. To implement this, one would need to use an extra transaction on-chain to roll-over to the new update keys when unilaterally closing, but cooperative closes would remain cheap. This process could be repeated every time another 1 billion updates occur. The eltoo specification is a drop-in replacement for the penalty-based invalidation mechanism currently used in the Lightning Network.Christian Decker proposed a drop-in replacement called 'eltoo' for the penalty-based invalidation mechanism currently used in the Lightning specification. The locktime-based sequencing in eltoo interprets any number above 0.500 billion as a UNIX timestamp, leaving about 1 billion numbers that are interpreted as being in the past with the current timestamp of ~1.5 billion. In response to this, AJ suggested that if there were more than 1B updates to a channel, one could reset the locktime by rolling over to use new update keys. Unilateral closes will need an extra on-chain transaction to roll-over, but cooperative closes can save a transaction. Repeat the process after another 1B updates making unilateral closes more painful while keeping cooperative closes cheap.In a recent discussion on bitcoin-dev mailing list, Bitcoin Core developer AJ Towns proposed eltoo as a drop-in replacement for the penalty-based invalidation mechanism used in the Lightning Network specification. He suggested that the eltoo protocol could be further simplified to have a simpler ratchet mechanism and proposed a new transaction scheme that would replace "funding transaction spending to address 'X', and a set of ratcheting states that spend from-and-to the same address 'X'". This transaction scheme has several features such as txes at (3a) and (3b) can both pay current market fees with minimal risk and can be CPFPed by a tx spending your own channel balance, both parties can claim their funds as soon as the other can, no matter who initiates the close, and more. However, the scheme isn't great for untrusted outsourcing and requires NOINPUT to function properly. Despite these limitations, AJ thinks that eltoo works nicely.In a post to the lightning-dev mailing list, David A. Harding shared his thoughts on several potential denial-of-service (DoS) attacks against Lightning Network settlements with regards to issues with relative locktime and SIGHASH_NOINPUT. The first attack vector he describes involves an adversarial party stalling a cooperative close by broadcasting a trigger</summary>
    <published>2018-10-13T11:40:30+00:00</published>
  </entry>
</feed>

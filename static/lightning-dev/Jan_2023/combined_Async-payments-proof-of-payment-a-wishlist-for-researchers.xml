<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Async payments proof-of-payment: a wishlist for researchers</title>
  <updated>2023-08-01T00:58:04.668643+00:00</updated>
  <author>
    <name>Anthony Towns 2023-01-26 01:04:12+00:00</name>
  </author>
  <author>
    <name>vwallace 2023-01-25 23:50:52+00:00</name>
  </author>
  <author>
    <name>vwallace 2023-01-12 23:05:29+00:00</name>
  </author>
  <author>
    <name>Olaoluwa Osuntokun 2023-01-11 01:35:28+00:00</name>
  </author>
  <author>
    <name>vwallace 2023-01-10 19:41:09+00:00</name>
  </author>
  <link href="lightning-dev/Jan_2023/003831_Async-payments-proof-of-payment-a-wishlist-for-researchers.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2023/003830_Async-payments-proof-of-payment-a-wishlist-for-researchers.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2023/003823_Async-payments-proof-of-payment-a-wishlist-for-researchers.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2023/003821_Async-payments-proof-of-payment-a-wishlist-for-researchers.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2023/003820_Async-payments-proof-of-payment-a-wishlist-for-researchers.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Async payments proof-of-payment: a wishlist for researchers</title>
    <updated>2023-08-01T00:58:04.669645+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003820.html" rel="alternate"/>
    <summary>In a recent email thread, the challenge of receiving an invoice from an offline receiver in the Lightning Network was discussed. The proposed solution involves using a BIP340 signature with Bob's public signature nonce R to avoid attacks. To claim a nonce, Alice may need to make a micropayment to Larry. Separate LSPs can be used for issuing nonces and holding onto incoming PTLCs. However, it was found that the current PTLCs design wouldn't solve the problem as the LSP could still steal funds. Another solution presented is to stick with keysend but have the sender encode a nonce, payment time, and amount as a tweak to the keysend PTLC point. This allows the sender to prove when and how much they sent, although it doesn't provide exact proof-of-payment. Another suggestion is for the receiver's LSP to provide a reusable keysend invoice to senders, but this would also lose the proof-of-payment property.The Lightning Development mailing list discussed a proposal for a payment system that allows users to prove they sent a specific amount of money at a specific time. This involves using keysend with additional data encoded by the sender, such as a nonce, payment time, and amount. While this scheme doesn't provide full proof-of-payment, it allows the sender to prove when and how much they sent.An open question in the Lightning Network is how the sender can get an invoice from an offline receiver during asynchronous payments. One solution presented was PTLCs, but it was found that it wouldn't solve the problem. Trampoline payments were suggested as an alternative, which allows the sender's LSP to retry the payment without needing to fetch a fresh onion each time. AMP usage also enables the sender to attempt payment even if the receiver is offline.Conner gave a talk about an AMP extension called "invoice tunneling," where the receiver is forced to reveal a unique secret bound to the invoice or payment attempt. The proposal is currently being considered by the community. Relevant links to resources, including the proposal and Lightning Improvement Proposal (BLIP) for the Lightning Network, were provided.The research question revolves around creating a scheme that allows a regularly-offline receiver to create a reusable invoice for their LSP to provide to senders while maintaining proof-of-payment. One possible direction is to stick with keysend but have the sender encode additional data as a tweak to the keysend PTLC point. This would allow the sender to prove when and how much they sent, although it doesn't provide exact proof-of-payment.</summary>
    <published>2023-01-26T01:04:12+00:00</published>
  </entry>
</feed>

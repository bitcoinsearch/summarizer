<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal for an invoice pattern with an embedded Bitcoin onchain address</title>
  <updated>2023-07-31T23:35:16.771414+00:00</updated>
  <author>
    <name>Harsha Goli 2021-07-10 12:55:55+00:00</name>
  </author>
  <author>
    <name>Bitcoin Error Log 2021-07-10 09:09:52+00:00</name>
  </author>
  <author>
    <name>Ren√© Pickhardt 2021-07-10 06:56:47+00:00</name>
  </author>
  <author>
    <name>micaroni at gmail.com 2021-07-10 05:58:55+00:00</name>
  </author>
  <author>
    <name>micaroni at gmail.com 2021-07-10 05:55:55+00:00</name>
  </author>
  <link href="lightning-dev/July_2021/003121_Proposal-for-an-invoice-pattern-with-an-embedded-Bitcoin-onchain-address.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003120_Proposal-for-an-invoice-pattern-with-an-embedded-Bitcoin-onchain-address.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003119_Proposal-for-an-invoice-pattern-with-an-embedded-Bitcoin-onchain-address.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003118_Proposal-for-an-invoice-pattern-with-an-embedded-Bitcoin-onchain-address.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003117_Proposal-for-an-invoice-pattern-with-an-embedded-Bitcoin-onchain-address.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal for an invoice pattern with an embedded Bitcoin onchain address</title>
    <updated>2023-07-31T23:35:16.771414+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-July/003117.html" rel="alternate"/>
    <summary>In a recent email thread, the concept of embedding a bitcoin address into a Lightning Network (LN) invoice is discussed. The sender provides an example of this feature on the website https://thebiz.pro, where a BTC address is embedded in a Lightning URI. The format of the embedded bitcoin address is shown in the example. The possibility of the invoice being serialized is also mentioned as a potential reason for not being able to see it.The email proposes a new LN invoice pattern that includes a Bitcoin address for on-chain transfer as a backup. The motivation behind this proposal is to create an app wallet that can seamlessly work on-chain and/or LN, depending on the situation. By embedding a Bitcoin address in the invoice, an immediate on-chain backup alternative can be provided in case of payment failure. This functionality already exists in today's invoices through a mechanism called fallback address, but the proposed pattern aims to make it more transparent and user-friendly. The f field in the invoice allows for on-chain fallback, although it may not be suitable for small or time-sensitive payments. The email suggests referring to the bolt 11 on GitHub for more details on this topic.The author of the email shares their personal experience with payment pathfinding difficulties while using the Phoenix wallet. They were unable to pay a friend due to lack of liquidity on the specific route. After transferring to Breeze, they were finally able to reach the intended recipient. These exceptional cases can be confusing for non-expert users. To mitigate such issues, the proposed solution is to embed a Bitcoin address on the invoice. In case of payment failure, the wallet can prompt the user to send the payment on-chain at a specified fee rate. This immediate on-chain backup option would be particularly useful when the LN rates are low.The email highlights that although the Phoenix wallet comes close to achieving a fully abstract and transparent on-chain/LN experience, there is still a distinction between the two that can confuse users. By including an embedded Bitcoin address in the invoice, this confusion can be minimized. The author provides an example format for the proposed invoice pattern to illustrate how it would work.To contact the sender, their schedule can be accessed at https://calendly.com/bitcoinerrorlog, their chat is available at https://t.me/bitcoinerrorlog, and they can be reached on Twitter at https://twitter.com/bitcoinerrorlog.</summary>
    <published>2021-07-10T12:55:55+00:00</published>
  </entry>
</feed>

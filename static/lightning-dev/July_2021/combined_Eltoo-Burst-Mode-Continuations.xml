<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Eltoo Burst Mode &amp; Continuations</title>
  <updated>2023-07-31T23:35:29.650854+00:00</updated>
  <author>
    <name>Anthony Towns 2021-07-11 04:10:00+00:00</name>
  </author>
  <author>
    <name>Jeremy 2021-07-11 00:02:35+00:00</name>
  </author>
  <author>
    <name>Jeremy 2021-07-10 23:25:06+00:00</name>
  </author>
  <author>
    <name>Jeremy 2021-07-10 21:07:02+00:00</name>
  </author>
  <link href="lightning-dev/July_2021/003125_Eltoo-Burst-Mode-Continuations.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003124_Eltoo-Burst-Mode-Continuations.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003123_Eltoo-Burst-Mode-Continuations.xml" rel="alternate"/>
  <link href="lightning-dev/July_2021/003122_Eltoo-Burst-Mode-Continuations.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Eltoo Burst Mode &amp; Continuations</title>
    <updated>2023-07-31T23:35:29.650854+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-July/003122.html" rel="alternate"/>
    <summary>In a recent email exchange, Jeremy Rubin proposed two solutions to improve the sequence space for Eltoo channels. The first solution involves creating a Taproot tree with N copies of the state update protocol, allowing for a random path through which leaf is being used. This increases privacy but only achieves 5 bits of added sequence space compared to the prior approach. The second solution involves using a continuation state where one signs a move to a new update key, providing 32 bits worth of updates before forwarding to a new contract with an extra transaction. However, this method increases resolution time linearly.To mitigate the increase in resolution time, Rubin suggests a "semitrusted burst mode" with a counterparty. In this mode, parties move to sequence M+1 and enter a burst with 32 bits of sequences to blow through. They then indicate to the other party to terminate the burst at a certain internal state number and sign M+2, reflecting the last state at that internal state number. This protocol also improves privacy as top-level state numbers do not strongly reflect the number of payments made.The email thread also discusses using an Eltoo "trampoline" to get around the CSV restriction. By initiating a burst session and always including a third branch, it allows for 32 bits worth of updates before forwarding to a new contract with an additional transaction. However, this method adds CSV layers and increases resolution time linearly. To address this, the suggestion is to use the "semitrusted burst mode" with a counterparty.Overall, these solutions provide ways to extend the sequence space for Eltoo channels without going on-chain, but they come with considerations such as privacy, resolution time, and potential risks with malicious peers. Mitigations such as entering burst mode with long-lived peers, having a higher channel balance than the counterparty, and limiting the percentage of liquidity moved during a burst can help address these risks.</summary>
    <published>2021-07-11T04:10:00+00:00</published>
  </entry>
</feed>

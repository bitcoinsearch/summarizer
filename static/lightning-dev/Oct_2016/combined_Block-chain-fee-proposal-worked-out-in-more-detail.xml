<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Block chain fee proposal worked out in more detail</title>
  <updated>2023-07-31T19:13:16.299035+00:00</updated>
  <author>
    <name>Rusty Russell 2016-10-17 03:15:17+00:00</name>
  </author>
  <author>
    <name>CJP 2016-10-10 20:53:25+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2016/000634_Block-chain-fee-proposal-worked-out-in-more-detail.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2016/000631_Block-chain-fee-proposal-worked-out-in-more-detail.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Block chain fee proposal worked out in more detail</title>
    <updated>2023-07-31T19:13:16.299035+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-October/000631.html" rel="alternate"/>
    <summary>In a discussion on the Lightning-dev mailing list, Rusty Russell proposed an algorithm for bitcoin fees in the context of creating a payment channel between parties A and B. The algorithm involves the channel creator paying the fee initially, while allowing microtransactions within the channel without affecting the fee itself. However, if adding an HTLC (Hashed Time-Locked Contract) requires extra fees due to larger transaction sizes, the fee is deducted from the HTLC itself. Although the algorithm has been criticized for not being less exploitable than a naive system, it does slightly increase channel capacity. Further refinement and discussion of the algorithm is needed to address issues such as adjusting the fee size when on-blockchain fee market conditions change.The author explains their process of developing a fee proposal and then shifts the focus to how deposits into a channel serve as a means of payment. They provide an example involving parties A and B, where the amount to be paid is 1.000 BTC. Additionally, there is an extra 1.997 BTC stored in the channel and a required fee of 0.003 BTC for the commit transaction. The output size of the anchor transaction is 3.000 BTC.Next, A initiates a microtransaction of 0.500 BTC to B, with an extra fee of 0.001 BTC required for the HTLC. The commit transaction outputs are described for different scenarios: when the transaction is locked or released to either A or B, as well as if it were returned to A.Similarly, B makes a microtransaction of 1.000 BTC to A, with an extra fee of 0.001 BTC required for the HTLC. The corresponding commit transaction outputs are also described.Summarizing the algorithm, the channel creator bears the initial fee cost, while the non-fee portions are rearranged during channel usage. Additional fees for HTLCs are subtracted from the HTLC itself, and negative-sized HTLCs are avoided. However, the author acknowledges that they have not yet addressed the aspect of adjusting the fee size based on blockchain market conditions.</summary>
    <published>2016-10-17T03:15:17+00:00</published>
  </entry>
</feed>

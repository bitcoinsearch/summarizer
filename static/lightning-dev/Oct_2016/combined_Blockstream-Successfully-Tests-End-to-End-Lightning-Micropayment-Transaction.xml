<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Blockstream Successfully Tests End-to-End Lightning Micropayment Transaction</title>
  <updated>2023-07-31T19:12:59.815263+00:00</updated>
  <author>
    <name>Anthony Towns 2016-10-06 06:59:39+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2016-10-05 21:37:06+00:00</name>
  </author>
  <author>
    <name>gb 2016-10-05 21:11:49+00:00</name>
  </author>
  <author>
    <name>Christian Decker 2016-10-05 16:00:18+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2016/000630_Blockstream-Successfully-Tests-End-to-End-Lightning-Micropayment-Transaction.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2016/000629_Blockstream-Successfully-Tests-End-to-End-Lightning-Micropayment-Transaction.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2016/000628_Blockstream-Successfully-Tests-End-to-End-Lightning-Micropayment-Transaction.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2016/000627_Blockstream-Successfully-Tests-End-to-End-Lightning-Micropayment-Transaction.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Blockstream Successfully Tests End-to-End Lightning Micropayment Transaction</title>
    <updated>2023-07-31T19:12:59.815263+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2016-October/000627.html" rel="alternate"/>
    <summary>In an email conversation, it was revealed that the default implementation of a server will bind to a random port. However, the port number 8334 was fixed by Rusty to make the server easier to find. This port number is currently unassigned according to IANA. In another email thread, it was noticed that lightningd is using port 8334 and namecoind has been using the same port since its launch in May 2011. Christian Decker explained that this is mostly a coincidence as the implementation usually binds to a random port, but Rusty fixed it to 8334 for convenience. The email thread also included a blog post by Rusty Russell describing a recent demonstration of a v0.5 C lightning prototype. The demonstration showcased a completed transaction that included invoicing, multi-hop payment, and item delivery. The post contained additional content, supporting code, and a short video.The Lightning micropayment system was tested by creating invoices for test Bitcoin payments over the Lightning network. A link was provided to access the invoices, and in return, an ASCII cat picture was offered. Dr. Christian Decker purchased the cat picture using 0.01 test Bitcoin to open a Lightning channel with the server. After a single confirmation, he paid the invoice with a 100 satoshi transfer and accessed the link to find the ASCII cat picture, which turned out to feature two cats. Excited by the success, Christian promptly opened another node, connected to the first node, and bought a second copy of the cat picture by routing through the previous node. The Digital Ocean server used for the demonstration runs Apache, bitcoind, and lightningd. A CGI script calls 'lightning-cli invoice 100000' to create an invoice, which is presented to the user. If 'lightning-cli listinvoice' indicates that the invoice was paid, the script presents the picture. This successful demonstration marks the first end-to-end test of a Lightning micropayment network, including invoicing, multi-hop payment, and item delivery. The Blockstream developers encountered a few bugs in corner cases and addressed known issues, making lightningd more robust against misconfiguration. They still plan to address some rough edges and provide additional documentation before the release of version 0.5. Additionally, they intend to create libraries that will enable web developers to construct their own cat picture stores. A video of the demonstration has been shared on asciinema.org.</summary>
    <published>2016-10-06T06:59:39+00:00</published>
  </entry>
</feed>

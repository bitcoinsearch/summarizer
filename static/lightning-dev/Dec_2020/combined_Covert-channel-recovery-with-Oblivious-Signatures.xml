<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Covert channel recovery with Oblivious Signatures</title>
  <updated>2023-07-31T23:19:59.124249+00:00</updated>
  <author>
    <name>ZmnSCPxj 2020-12-22 02:09:37+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-20 04:53:41+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-12-19 07:48:21+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-18 00:43:08+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-18 00:24:31+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-12-16 14:56:30+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-16 04:51:01+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2020-12-15 10:21:09+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-15 06:07:04+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-15 03:43:46+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2020-12-14 13:12:48+00:00</name>
  </author>
  <author>
    <name>Ariel Lorenzo-Luaces 2020-12-14 08:08:27+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-14 05:31:23+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2020-12-13 17:41:57+00:00</name>
  </author>
  <author>
    <name>Lloyd Fournier 2020-12-11 02:02:04+00:00</name>
  </author>
  <link href="lightning-dev/Dec_2020/002927_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002926_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002925_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002924_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002923_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002922_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002920_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002919_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002918_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002917_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002916_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002915_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002914_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002913_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2020/002912_Covert-channel-recovery-with-Oblivious-Signatures.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Covert channel recovery with Oblivious Signatures</title>
    <updated>2023-07-31T23:19:59.124249+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-December/002912.html" rel="alternate"/>
    <summary>The discussion revolves around the possibility of using Zero-Knowledge Contingent Payments (ZKCP) to prove the discrete log equivalence in a payment scheme. ZmnSCPxj suggests that a ZKCP on the payment point and scalar could be used to gate part of the proof, without revealing the scalar 'z'. However, LL argues that if a secure conditional payment for the proof can be created, it would always prove the existence of the proof, regardless of whether or not payment is made.The article discusses various issues related to the Lightning Network (LN) and suggests possible solutions for each of them. One issue highlighted is hardware failure, which often goes undetected until casual users activate their wallet and use HTLCs. The writer suggests using static-key channels as a way to recover forgotten outgoing channels. However, this method may not work with PTLCs due to the loss of the adaptor signature.Another issue discussed in the article is peer selling private information in unpublished channels. To prevent this, the writer suggests a mitigation strategy that prevents the other party from proving you have a channel with them. The article also examines recovery when a channel state has HTLCs in flight, highlighting the potential risks involved in gifting the money. As an alternative, the writer suggests locking up Bitcoin into channels with well-established lightning nodes.The need for redundancy in data storage is also discussed as a line of defense for routing nodes. The article stresses the importance of detecting hardware failure early on to avoid detectable failure of hardware when the user activates the wallet and uses HTLCs. Static-key channels can allow recovery even for outgoing channels with outgoing HTLC that have been forgotten by the outgoing peer. However, using static-key channels has slightly weaker privacy as published nodes reveal all their channels with other published nodes on the blockchain. Unpublished nodes risk revealing their channels with published nodes via the blockchain.In the email exchange between ZmnSCPxj and LL, they discuss the issue of channel state with HTLCs in flight and how to handle it. LL suggests that one option could be to gift the money to the party offering the recovery settlement or put them onto the settlement tx. However, ZmnSCPxj points out that gifting the money is not a good option as all the claimable value could potentially be in an outgoing HTLC. They also discuss the recovery system and how it should ideally be used by people whose channels are in a HTLC-free state for most of the time.The conversation also touches upon the advantages and disadvantages of using YOLO commitment transactions versus oblivious settlements for recovering funds. Fournier claims that before revealing a recovery, one is guaranteed to have a transaction in hand that they can broadcast first, choose the fee to be as high as they like, and is not replaceable. However, Fournier also mentions potential concerns and privacy issues with the different methods of recovery.The email thread revolves around various aspects of the Lightning Network protocol. The first part of the discussion focuses on the goal of offering a cooperative settlement transaction upfront instead of a commitment transaction. The sender emphasizes the need to avoid losing claim three in order to maintain the applicability of claim one. In YOLO commitment transactions, additional metadata, specifically compressed revocation keys, must be recovered from the other party. The sender explains that a signature on the compressed revocation keys needs to be given before data loss and returned upon reconnection with the commitment transaction.The second part of the thread addresses the consequences of using revocable signature-based channels. It is highlighted that if a node posts a revoked commitment transaction, it loses its static secret key and all funds from all channels with all peers. This can result in a significant loss. The sender agrees with David A. Harding's points about side-channels being effective tools to determine if a node has experienced data loss.The third part of the discussion corrects a mistake regarding LND's "static channel backups" (option_data_loss_protect). The sender clarifies that the goal is to offer a cooperative settlement transaction upfront to the possibly recovering party, rather than a commitment transaction. They explain the potential risks involved with sending commitment transactions, as it exposes the recovering party to the punishment mechanism. The sender argues that using oblivious settlement signatures is preferable because it provides a coherent user experience for recovery. However, they also mention working on another recovery idea that involves peer-provided encrypted backup and full channel restoration.The fourth part of the thread delves into the issue of data loss during network connectivity. Ariel Lorenzo-Luaces suggests that any party refusing to go first cannot be assumed to have lost data. However, the fifth part counters this point, explaining how dishonest counterparties can gather evidence about a recently reconnected node to evaluate the probability of data loss. They argue that knowingly not answering a request can't be distinguished from having connection issues or a machine being turned off. The discussion explores the concept of data loss honeypots but highlights</summary>
    <published>2020-12-22T02:09:37+00:00</published>
  </entry>
</feed>

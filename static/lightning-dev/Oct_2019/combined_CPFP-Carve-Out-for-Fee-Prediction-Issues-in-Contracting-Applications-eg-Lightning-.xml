<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
  <updated>2023-07-31T21:02:25.700695+00:00</updated>
  <author>
    <name>Johan Torås Halseth 2019-10-30 07:22:53+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2019-10-28 17:14:38+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-28 09:45:39+00:00</name>
  </author>
  <author>
    <name>David A. Harding 2019-10-27 22:54:02+00:00</name>
  </author>
  <author>
    <name>Jeremy 2019-10-27 19:13:09+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-25 17:30:41+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-25 07:05:15+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-10-24 21:25:14+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2019-10-24 13:49:09+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2019-02-13 04:22:39+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-08 14:46:45+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2019-01-08 05:50:20+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2019-01-07 15:18:52+00:00</name>
  </author>
  <author>
    <name>Rusty Russell 2018-12-04 03:33:53+00:00</name>
  </author>
  <author>
    <name>Bob McElrath 2018-12-02 15:08:39+00:00</name>
  </author>
  <author>
    <name>Matt Corallo 2018-11-29 19:37:54+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2019/002261_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002256_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002255_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002252_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002251_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002248_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002243_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002242_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002240_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Feb_2019/001868_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001809_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001805_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2019/001801_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2018/001710_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Dec_2018/001703_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <link href="lightning-dev/Nov_2018/001697_CPFP-Carve-Out-for-Fee-Prediction-Issues-in-Contracting-Applications-eg-Lightning-.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - CPFP Carve-Out for Fee-Prediction Issues in Contracting Applications (eg Lightning)</title>
    <updated>2023-07-31T21:02:25.700695+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-November/001697.html" rel="alternate"/>
    <summary>In an email conversation among developers, the potential impact of relaxing the carve-out rule in Bitcoin's mempool limits was discussed. David A. Harding pointed out that this change could allow for the free relay of large amounts of data, potentially exceeding the default maximum mempool size. Johan Torås Halseth raised concerns about the cost of relaying data if all limits were removed. Matt Corallo suggested increasing the carve-out limit to support the current Lightning Network protocol.The discussion also touched on the feasibility of a simplified Replace-by-Fee (RBF) scheme and the need to lower the default minimum fee in Bitcoin Core. There were discussions about implementing a tree structure for HTLCs, relaxing the carve-out rule, and utilizing a Lightning close algorithm. The proposed changes aimed to improve efficiency and mitigate potential spamming issues. However, there were concerns about the impact on the mempool acceptance code in bitcoind.The email thread also explored the possibility of relaxing the Carve-Out rule for on-chain contracts and implementing a simplified RBF scheme. Johan Torås Halseth suggested changing the rule to allow for more robust CPFP of Lightning commitment transactions. Rusty Russell proposed a simplified RBF scheme with specific conditions for transaction replacement. There were discussions about potential spamming issues, marking unilateral close transactions, and the impact on the mempool acceptance code.The email exchange highlighted the ongoing efforts to optimize the mempool and address the challenges associated with OP_SECURETHEBAG and RBF. Developers proposed various solutions, including changes to the carve-out rule and the implementation of a lightning close algorithm. The discussions emphasized the need for simplicity, feasibility, and compatibility with the Lightning Network protocol.Matt Corallo has proposed a solution to the Replace-by-fee (RBF) problem in the Lightning Network. His proposal involves allowing transactors to mark their transactions as "likely-to-be-RBF'ed" to enable a relay policy where any children of such transactions would be rejected unless the resulting package would be "near the top of the mempool". While this theoretically prevents consistent attacks, there is still a low probability of executing such attacks in case of feerate spikes right after broadcast. Corallo believes that his proposal is incentive-compatible and addresses the issue of adding too many transactions to the UTXO set.The Lightning Network has been facing problems with the security model around Child Pays for Parent (CPFP). This has led to channel failures and difficulties in preventing third parties from delaying the confirmation of commitment transactions. To address this, Corallo suggests tweaking Lightning's commitment transaction to have two small-value outputs that are immediately spendable by each channel participant.Another alternative proposal discussed is to mark transactions as "likely-to-be-RBF'ed" to enable a relay policy where children of such transactions would be rejected unless the resulting package would be "near the top of the mempool". Although this theoretically prevents consistent attacks, there is still a low probability of executing such attacks in case of feerate spikes right after broadcast.Overall, these proposals aim to improve the security and efficiency of the Lightning Network by addressing the issues related to RBF and CPFP.</summary>
    <published>2019-10-30T07:22:53+00:00</published>
  </entry>
</feed>

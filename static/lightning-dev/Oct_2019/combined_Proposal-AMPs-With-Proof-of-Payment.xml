<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Proposal: AMPs With Proof of Payment</title>
  <updated>2023-07-31T21:58:47.523688+00:00</updated>
  <author>
    <name>Nadav Kohen 2019-10-03 03:11:48+00:00</name>
  </author>
  <author>
    <name>ZmnSCPxj 2019-10-03 00:48:46+00:00</name>
  </author>
  <author>
    <name>Nadav Kohen 2019-10-02 21:28:56+00:00</name>
  </author>
  <link href="lightning-dev/Oct_2019/002195_Proposal-AMPs-With-Proof-of-Payment.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002192_Proposal-AMPs-With-Proof-of-Payment.xml" rel="alternate"/>
  <link href="lightning-dev/Oct_2019/002191_Proposal-AMPs-With-Proof-of-Payment.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Proposal: AMPs With Proof of Payment</title>
    <updated>2023-07-31T21:58:47.523688+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-October/002191.html" rel="alternate"/>
    <summary>The discussion on the Lightning Network mailing list revolves around the implementation of Atomic Multi-Path Payments (AMPs) with Proof of Payment (PoP). Currently, PoP is not compatible with AMPs because the payer needs to know the payment pre-images in advance, which eliminates the possibility of learning atomically with payment completion.However, it is suggested that Payment Points and PTLCs can potentially enable PoP-enabled AMPs. A proposed modification to OG AMP involves adding a Payment Point, PP = pop*G, to each partial payment point. This modification allows the receiver to add pop to each r_i, which is necessary to complete each payment. The use of Payment Points is considered a compelling reason to transition to them as soon as possible.Nadav, a member of the Lightning Network mailing list, proposes modifying OG AMP to allow for AMPs with PoP. Currently, AMPs with PoP are not feasible due to the requirement of knowing the payment pre-images in advance. However, by utilizing Payment Points and PTLCs instead of Payment Hashes with their HTLCs, PoP-enabled AMPs become possible. The proposed modification involves adding a Payment Point, PP = pop*G, to each partial payment point. This will enable AMPs to enjoy the benefits of PoP. Nadav emphasizes the importance of transitioning to Payment Points promptly, likely when bip-schnorr enters the base layer.At Adelaide 2018, only path decorrelation and High AMP were the known advantages of payment point/scalar. Therefore, the decision was made to wait for Schnorr-like signatures to be implemented in the base layer rather than implementing 2p-ECDSA. The possibility of Stuckless, which potentially allows Escrow-over-Lightning, further strengthens the case for using payment points. ZmnSCPxj is currently considering the implementation of 2p-ECDSA, as bip-schnorr is expected to go through a lengthy process of arguments, testing, development, and miners delaying activation.In summary, the Lightning Network mailing list discussion highlights the potential implementation of AMPs with PoP. The proposal suggests utilizing Payment Points and PTLCs to enable PoP-enabled AMPs. The modification involves adding a Payment Point to each partial payment point, allowing for the completion of each payment. Transitioning to Payment Points is seen as a compelling reason due to the benefits they offer.</summary>
    <published>2019-10-03T03:11:48+00:00</published>
  </entry>
</feed>

<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>2</id>
  <title>Combined summary - Insufficient funder balance for paying fees</title>
  <updated>2023-07-31T19:38:57.643943+00:00</updated>
  <author>
    <name>Johan Torås Halseth 2018-01-12 12:41:09+00:00</name>
  </author>
  <author>
    <name>Pierre 2018-01-12 11:56:39+00:00</name>
  </author>
  <author>
    <name>Johan Torås Halseth 2018-01-12 10:32:23+00:00</name>
  </author>
  <link href="lightning-dev/Jan_2018/000925_Insufficient-funder-balance-for-paying-fees.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2018/000924_Insufficient-funder-balance-for-paying-fees.xml" rel="alternate"/>
  <link href="lightning-dev/Jan_2018/000923_Insufficient-funder-balance-for-paying-fees.xml" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <entry>
    <id>2</id>
    <title>Combined summary - Insufficient funder balance for paying fees</title>
    <updated>2023-07-31T19:38:57.643943+00:00</updated>
    <link href="https://gnusha.org/url/https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-January/000923.html" rel="alternate"/>
    <summary>In an email exchange between Johan and Pierre, they discuss a corner case regarding insufficient fees that may cause a node to fail the channel. Pierre mentions that this situation is similar to a race condition described in BOLT 2, where the timing of `commit_sig`/`revoke_and_ack` messages is crucial. It is noted that the issue lies with the acknowledgement logic that excludes remote's unsigned updates, rather than the `update_add_htlc`s.According to BOLT 3, if a commitment transaction has insufficient fees, it may be appropriate to fail the channel using the previous commitment. Pierre suggests that Eclair should consider failing the channel in such cases, especially if they are the fundee and would end up with all funds in an unpublishable transaction. The funder could also face a similar situation if there are pending htlcs with a high value. Pierre believes that choosing appropriate channel parameters such as max_htlc_value_in_flight_msat, channel_reserve_satoshis, and max_accepted_htlcs could reduce the probability of this scenario occurring.Johan further raises a question about how Eclair and c-lightning handle a specific scenario. In this example, Alice is funding the channel between herself and Bob and wants to add an HTLC but only has enough balance for the HTLC and its fee. Bob also wants to add an HTLC and sees that Alice has enough balance to receive it. However, both parties send their AddHTLC at the same time, causing Alice to not have enough funds to cover both HTLCs and their fees. This situation could potentially violate the channel reserve requirement or deplete Alice's entire channel if the reserve is set to zero.Johan seeks clarification on how both Alice and Bob would be expected to handle this scenario. The email exchange includes links to BOLT 2 and BOLT 3, which provide information on handling race conditions and failures due to insufficient fees in Lightning Network transactions. Additionally, there are links provided for updating fees and fee payment in lightning transactions.</summary>
    <published>2018-01-12T12:41:09+00:00</published>
  </entry>
</feed>
